var search_data = {"index":{"searchIndex":["array","basicobject","class","diff","diff::lcs::internals","diff::lcs::ldiff","fakedate","filecreation","fileutils","fourthdimensional","error","event","lcs","balancedcallbacks","block","change","contextchange","contextdiffcallbacks","defaultcallbacks","diffcallbacks","htmldiff","callbacks","hunk","sdiffcallbacks","sequencecallbacks","spechelper","matchers","module","object","pathname","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","section","crossreference","erbio","erbpartial","encoding","error","extend","generator","darkfish","jsonindex","markup","pot","messageextractor","po","poentry","ri","sdoc","filestree","ghostmethod","i18n","locale","text","include","markdown","literals","memoentry","parseerror","ruleinfo","memoentry","parseerror","ruleinfo","markup","attrchanger","attrspan","attributemanager","attributes","blankline","blockquote","document","formatter","formattertestcase","hardbreak","include","indentedparagraph","list","listitem","paragraph","parser","error","parseerror","preprocess","raw","regexphandling","rule","textformattertestcase","toansi","tobs","tohtml","tohtmlcrossref","tohtmlsnippet","tojoinedparagraph","tolabel","tomarkdown","tordoc","totableofcontents","totest","tottonly","verbatim","metamethod","methodattr","mixin","normalclass","normalmodule","options","page","parser","c","changelog","markdown","rd","ripperstatelex","innerstatelex","ruby","rubytools","simple","text","rd","blockparser","inline","inlineparser","rdoc","ri","driver","error","notfounderror","error","paths","task","require","rubygemshook","servlet","singleclass","stats","normal","quiet","verbose","store","error","missingfileerror","task","text","tokenstream","tomdoc","toplevel","rdoctask","rspec","callerfilter","core","anonymousexamplegroup","backtraceformatter","bisect","bisectfailederror","channel","coordinator","exampleminimizer","forkrunner","captureformatter","rundispatcher","notifier","server","shellcommand","shellrunner","configuration","deprecationreporterbuffer","exposecurrentexample","mustbeconfiguredbeforeexamplegroupserror","configurationoptions","drboptions","drbrunner","dsl","rspec","example","executionresult","procsy","examplegroup","examplestatusdumper","examplestatusmerger","examplestatusparser","examplestatuspersister","exclusionrules","filtermanager","filterrules","filterableitemrepository","queryoptimized","updateoptimized","flatmap","formatters","basebisectformatter","baseformatter","basetextformatter","bisectdrbformatter","bisectdebugformatter","bisectprogressformatter","consolecodes","deprecationformatter","delayedprinter","filestream","immediateprinter","raiseerrorstream","documentationformatter","exceptionpresenter","factory","commonbacktracetruncater","emptybacktraceformatter","fallbackmessageformatter","helpers","htmlformatter","htmlprinter","htmlsnippetextractor","coderayconverter","nullconverter","jsonformatter","loader","profileformatter","progressformatter","protocol","snippetextractor","syntaxhighlighter","coderayimplementation","nosyntaxhighlightingimplementation","windowsimplementation","hashimitatable","classmethods","hooks","aftercontexthook","afterhook","aroundhook","beforehook","hookcollections","inclusionrules","invocations","bisect","drbwithfallback","initializeproject","printversion","legacyexamplegrouphash","memoizedhelpers","classmethods","contexthookmemoized","after","before","nonthreadsafememoized","threadsafememoized","metadata","examplegrouphash","examplehash","hashpopulator","metadatafilter","minitestassertionsadapter","mockingadapters","flexmock","mocha","null","rr","rspec","multipleexceptionerror","interfacetag","notifications","customnotification","deprecationnotification","examplenotification","examplesnotification","failedexamplenotification","nullcolorizer","nullnotification","pendingexamplefailedasexpectednotification","pendingexamplefixednotification","profilenotification","seednotification","skippedexamplenotification","summarynotification","nullreporter","ordering","configurationmanager","custom","identity","random","registry","outputwrapper","parser","pending","pendingexamplefixederror","skipdeclaredinexample","profiler","projectinitializer","raketask","reporter","rubyproject","runner","sandbox","set","sharedcontext","sharedexamplegroup","registry","topleveldsl","sharedexamplegroupinclusionstackframe","sharedexamplegroupmodule","shellescape","suitehookcontext","testunitassertionsadapter","time","version","warnings","world","null","examplegroups","expectations","blockexpectationtarget","blocksnippetextractor","configuration","differ","expectationhelper","expectationnotmeterror","expectationtarget","instancemethods","failureaggregator","legacymacheradapter","legacymatcheradapter","rspec1","rspec2","multipleexpectationsnotmeterror","negativeexpectationhandler","positiveexpectationhandler","syntax","version","matchers","aliasedmatcher","aliasedmatcherwithoperatorsupport","aliasednegatedmatcher","builtin","all","basematcher","defaultfailuremessages","hashformatting","be","beakindof","beaninstanceof","bebetween","becomparedto","befalsey","behelpers","benil","bepredicate","betruthy","bewithin","capturestderr","capturestdout","capturestreamtotempfile","change","changedetails","changefromvalue","changerelatively","changetovalue","compound","and","nestedevaluator","or","sequentialevaluator","containexactly","pairingsmaximizer","cover","endwith","eq","eql","equal","exist","existencetest","has","haveattributes","include","match","negativeoperatormatcher","nullcapture","operatormatcher","output","positiveoperatormatcher","raiseerror","reliablematchdata","respondto","satisfy","specificvalueschange","startandendwith","startorendwith","startwith","throwsymbol","yieldcontrol","yieldprobe","yieldsuccessiveargs","yieldwithargs","yieldwithnoargs","composable","dsl","defaultimplementations","macros","deprecated","matcher","englishphrasing","expectedsformultiplediffs","failmatchers","matcherdelegator","matcherprotocol","mocks","allowancetarget","andreturnimplementation","andwraporiginalimplementation","andyieldimplementation","anyinstance","chain","customizations","errorgenerator","expectchainchain","expectationchain","fluentinterfaceproxy","messagechains","positiveexpectationchain","proxy","recorder","stubchain","stubchainchain","anyinstanceallowancetarget","anyinstanceexpectationtarget","argumentlistmatcher","argumentmatchers","anyargmatcher","anyargsmatcher","arrayincludingmatcher","basehashmatcher","booleanmatcher","ducktypematcher","hashexcludingmatcher","hashincludingmatcher","instanceof","kindof","noargsmatcher","singletonmatcher","callbackinvocationstrategy","classnewmethodreference","classverifyingdouble","configuration","constant","constantmutator","basemutator","constanthider","definedconstantreplacer","undefinedconstantsetter","directobjectreference","double","errorgenerator","examplemethods","expecthost","expectchain","expectationtarget","expectationtargetmethods","implementation","instancemethodreference","instancemethodstasher","instanceverifyingdouble","marshalextension","matchers","expectationcustomization","havereceived","matcher","receive","defaultdescribable","receivemessagechain","receivemessages","messagechain","messageexpectation","implementationdetails","methoddouble","methodreference","minitestintegration","namedobjectreference","nestedspace","nocallbackinvocationstrategy","objectmethodreference","objectreference","objectverifyingdouble","objectverifyingdoublemethods","ordergroup","partialclassdoubleproxy","partialclassdoubleproxymethods","partialdoubleproxy","proxy","proxyfornil","rootspace","simplemessageexpectation","space","stubchain","syntax","targetbase","targetdelegationclassmethods","targetdelegationinstancemethods","testdouble","testdoubleformatter","testdoubleproxy","verifyingdouble","silentio","verifyingexistingclassnewmethoddouble","verifyingexistingmethoddouble","verifyingmessageexpectation","verifyingmethoddouble","verifyingpartialclassdoubleproxy","verifyingpartialdoubleproxy","verifyingproxy","verifyingproxymethods","version","support","allexceptionsexceptoneswemustnotrescue","blocksignature","comparableversion","differ","directorymaker","encodedstring","formattingsupport","fuzzymatcher","hunkgenerator","insubprocess","loosesignatureverifier","signaturewithkeywordargumentsmatcher","methodsignature","methodsignatureexpectation","methodsignatureverifier","mutex","os","objectformatter","bigdecimalinspector","datetimeinspector","delegatorinspector","describablematcherinspector","inspectableobjectinspector","timeinspector","uninspectableobjectinspector","recursiveconstmethods","reentrantmutex","ruby","rubyfeatures","shellout","source","expressionsequencenode","node","token","spec","stderrsplitter","strictsignatureverifier","version","warnings","whitespacechecks","withisolatedstderr","rspechelpers","rake","application","cleaner","dsl","defaultloader","earlytime","filecreationtask","filelist","filetask","fileutilsext","invocationchain","emptyinvocationchain","invocationexceptionmixin","latetime","linkedlist","emptylinkedlist","makefileloader","multitask","namespace","packagetask","privatereader","classmethods","rakefileutils","rulerecursionoverflowerror","scope","emptyscope","task","taskargumenterror","taskarguments","tasklib","taskmanager","testcase","taskmanager","testtask","win32","win32homeerror","rakefiledefinitions","rubyrunner","sdoc","github","helpers","merge","templatable","string","testbacktracesuppression","testlinkedlist","testprivateattrs","sample","testrake","testrakeapplication","testrakeapplicationoptions","testrakebacktrace","testrakeclean","testrakecpucounter","testclassmethod","testrakedefinitions","testrakedirectorytask","testrakedsl","testrakeearlytime","testrakeextension","redirect","sample","testrakefilecreationtask","testrakefilelist","filelist","testrakefilelistpathmap","testrakefiletask","testrakefileutils","badlink","testrakeftpfile","testrakefunctional","testrakeinvocationchain","testrakelatetime","testrakemakefileloader","testrakemultitask","testrakenamespace","tm","testrakepackagetask","testrakepathmap","testrakepathmapexplode","testrakepathmappartial","testrakepathnameextensions","testrakepseudostatus","testrakeraketestloader","testrakereducecompat","testrakerequire","testrakerules","testrakescope","testraketask","testraketaskargumentparsing","testraketaskarguments","testraketasklib","testraketaskmanager","testraketaskmanagerargumentresolution","testraketaskwitharguments","testraketesttask","testraketestthreadpool","testraketoplevelfunctions","testrakewin32","win32","testthreadhistorydisplay","testtraceoutput","printspy","&()","*()","*()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","===()","===()","===()","===()","===()","===()","===()","array()","lcs()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","__build_mock_proxy()","__build_mock_proxy_unless_expired()","__delegate_operator()","__delegate_operator()","__disallow_further_usage!()","__send__()","__shared_context_recordings()","_base_name_for()","a_kind_of()","abort_with()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_blank_line()","accept_blank_line()","accept_blank_line()","accept_block_quote()","accept_block_quote()","accept_block_quote()","accept_document()","accept_document()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_heading()","accept_indented_paragraph()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_end()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_item_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_list_start()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_paragraph()","accept_raw()","accept_raw()","accept_raw()","accept_rule()","accept_rule()","accept_rule()","accept_rule()","accept_verbatim()","accept_verbatim()","accept_verbatim()","accept_verbatim()","accept_verbatim()","actual()","actual_delta()","actual_exists?()","actual_formatted()","actual_received_count_matters?()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_also_in()","add_attribute()","add_attribute()","add_c_enclosure()","add_c_variables()","add_class()","add_class()","add_class()","add_class_or_module()","add_comment()","add_comment()","add_constant()","add_constant()","add_constant()","add_default_stub()","add_description()","add_dir_to_load_path()","add_example()","add_expectation()","add_expectation()","add_extend()","add_extends()","add_extension_modules()","add_failure_exit_code()","add_file()","add_file()","add_filter()","add_footnote()","add_formatter()","add_formatters()","add_from()","add_full_description()","add_generator()","add_html()","add_html()","add_ids()","add_include()","add_include()","add_includes()","add_label()","add_libs()","add_line_numbers()","add_loader()","add_location()","add_message_expectation()","add_message_expectation()","add_message_expectation()","add_method()","add_method()","add_method()","add_method()","add_method_documentation()","add_method_list()","add_module()","add_module()","add_module_alias()","add_module_by_normal_module()","add_paragraph()","add_rakelib()","add_read_only_setting()","add_regexp_handling()","add_regexp_handling()","add_regexp_handling_rdoclink()","add_regexp_handling_tidylink()","add_require()","add_requires()","add_run()","add_section()","add_setting()","add_setting()","add_should_and_should_not_to()","add_simple_expectation()","add_simple_expectation()","add_simple_expectation()","add_simple_stub()","add_simple_stub()","add_simple_stub()","add_simple_stub()","add_stub()","add_stub()","add_stub()","add_stub()","add_stub()","add_stub_and_should_receive_to()","add_tag()","add_target()","add_text_tests()","add_to()","add_to_classes_or_modules()","add_to_load_path()","add_token()","add_token_listener()","add_tokens()","add_visitor_tests()","add_with_low_priority()","add_with_low_priority()","add_with_low_priority()","add_word_pair()","add_word_pair()","adding?()","additional_expected_calls()","advise()","after()","after()","after_teardown()","aggregate()","aggregate_failures()","aggregate_failures()","aggregation_block_label()","aggregation_metadata()","alias_example_group_to()","alias_example_to()","alias_extension()","alias_it_behaves_like_to()","alias_it_should_behave_like_to()","alias_matcher()","alias_matcher()","all()","all_classes()","all_classes_and_modules()","all_example_groups()","all_example_groups()","all_examples()","all_expectations_fulfilled?()","all_files()","all_hooks_for()","all_modules()","all_prerequisite_tasks()","alldirs()","allow()","allow_any_instance_of()","allow_deprecation()","allow_message()","allow_message_expectations_on_nil()","allow_warning()","already_observing?()","an_instance_of()","analyze_patchset()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors_of()","and()","and_any_keywords()","and_call_original()","and_keywords()","and_raise()","and_return()","and_throw()","and_unlimited_arguments()","and_wrap_original()","and_yield()","and_yield_receiver_to_implementation()","annotate()","annotate()","announce_exclusion_filter()","announce_filters()","announce_inclusion_filter()","any_args()","any_content()","any_instance()","any_instance_proxy_for()","any_instance_proxy_for()","any_instance_recorder_for()","any_instance_recorder_for()","any_instance_recorders_from_ancestry_of()","any_instance_recorders_from_ancestry_of()","anything()","anythingize_lonely_keys()","append()","append()","append()","append()","append()","append()","append_after()","append_after()","append_before()","append_before()","append_path()","application()","application=()","applies_to?()","apply?()","apply_derived_metadata_to()","arbitrary_kw_args?()","aref()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","aref_to()","arg_names()","arglists()","args()","args_match?()","argument()","arguments()","around()","around()","array_including()","article()","article()","as_href()","as_null_object()","as_null_object()","as_null_object()","as_string()","as_stubbed_const()","ascend()","ascend_until()","ascending()","assemble_template()","assert_used!()","assert_valid_expect_block!()","assertions()","asset()","assign_const()","ast()","at_least()","at_least()","at_most()","at_most()","attempt_to_add_rspec_terms_to_coderay_keywords()","attr_accessor()","attribute()","attributes()","attributes()","autorun()","autorun_disabled?()","backtrace_exclusion_patterns()","backtrace_exclusion_patterns=()","backtrace_formatter()","backtrace_inclusion_patterns()","backtrace_inclusion_patterns=()","backtrace_line()","backwards_compatibility_default_proc()","balanced_callback()","balanced_callback_no_change()","balanced_reverse()","balanced_traversal()","base_name()","base_name_for()","be()","be_a()","be_a_kind_of()","be_an()","be_an_instance_of()","be_between()","be_falsey()","be_instance_of()","be_kind_of()","be_nil()","be_truthy()","be_within()","before()","before()","before_context_ivars()","before_running_rdoc()","before_running_rdoc()","before_setup()","before_verifying_doubles()","begin_adding()","begin_adding()","binary?()","bisect()","bisect()","bisect_aborted()","bisect_complete()","bisect_dependency_check_failed()","bisect_dependency_check_failed()","bisect_dependency_check_passed()","bisect_dependency_check_passed()","bisect_dependency_check_started()","bisect_environment_hash()","bisect_failed()","bisect_individual_run_complete()","bisect_individual_run_complete()","bisect_individual_run_start()","bisect_original_run_complete()","bisect_original_run_complete()","bisect_over()","bisect_repro_command()","bisect_round_detected_multiple_culprits()","bisect_round_detected_multiple_culprits()","bisect_round_ignoring_ids()","bisect_round_ignoring_ids()","bisect_round_started()","bisect_round_started()","bisect_runner=()","bisect_runner_class()","bisect_starting()","bisect_with()","bitmap_for()","block_params=()","body_content_lines()","boolean()","break_on_newline()","build()","build()","build()","build_alias_method_name()","build_expectation()","build_expectation()","build_hash_from()","build_heading()","build_heading()","build_index()","build_list()","build_paragraph()","build_paragraph()","build_verbatim()","build_verbatim()","by()","by_at_least()","by_at_most()","cache_path()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_seq=()","callbacks_for()","called_max_times?()","called_max_times?()","caller_locations_supported?()","can_detect_signals?()","can_inspect?()","can_inspect?()","can_inspect?()","can_inspect?()","can_inspect?()","can_inspect?()","can_inspect?()","can_parse()","can_parse_by_name()","capture()","capture()","capture()","capture()","capture_run_results()","captures()","cause_supported?()","chain()","chain()","chain=()","change()","change()","change()","change()","change()","change()","change_attribute()","change_diff()","change_encoding()","change_global_dsl()","changed?()","changed?()","changed_attribute_by_name()","char_pos()","check_directories()","check_expansion()","check_files()","check_for_extra_spaces()","check_for_tab_characters()","check_for_unexpected_arguments()","check_generator()","check_message()","check_modeline()","check_names()","check_names()","check_no_expansion()","check_tasks()","child_name()","children()","children()","class_attributes()","class_dir()","class_dir()","class_dir()","class_dir()","class_document()","class_double()","class_file()","class_method_list()","class_methods()","class_of()","class_path()","class_spy()","classes()","classes()","classes_and_includes_and_extends_for()","classes_and_modules()","classes_hash()","classes_hash()","classify_arity()","classify_parameters()","classify_parameters()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_actions()","clear_argv()","clear_comment()","clear_comments()","clear_examples()","clear_exclude()","clear_exclude()","clear_generated_description()","clear_prerequisites()","clobber_task_description()","clobber_task_description()","close()","close()","close()","close()","close_after()","closed_by?()","collect_first_comment()","collect_tokens()","color()","color?()","color?()","color?()","color_enabled?()","color_mode()","colorized_formatted_backtrace()","colorized_formatted_backtrace()","colorized_message_lines()","colorized_message_lines()","colorized_rerun_commands()","colorized_totals_line()","command()","command_for()","command_from()","comment()","comment=()","complete()","complete()","complete()","concat()","conditionally_quote()","config_colors_to_methods()","configuration()","configuration()","configuration()","configuration()","configuration()","configure()","configure()","configure()","configure_example()","configure_expectation_framework()","configure_filter_manager()","configure_group()","configure_method()","configure_mock_framework()","conj()","cons()","cons()","console_code_for()","const_defined_on?()","const_missing()","const_to_replace()","const_to_replace()","constant_mutator_for()","constant_mutator_for()","constant_scope_for()","constants_defined_on()","constrained_to_any_of?()","consume()","contain_exactly()","content()","context_diff()","continue_entry_body()","convert()","convert()","convert()","convert()","convert()","convert()","convert_attrs()","convert_flow()","convert_flow()","convert_html()","convert_regexp_handling()","convert_regexp_handling()","convert_regexp_handlings()","convert_string()","convert_string()","convert_string()","copy_docs()","copy_files()","copy_resources()","copy_static()","copy_string()","correct_backward_diff()","correct_forward_diff()","correct_forward_sdiff()","correct_lcs()","could_contain_kw_args?()","count()","cover()","coverage_level=()","cp()","create()","create()","create_dir()","create_document()","create_entries()","create_file()","create_items()","create_rule()","create_timed_files()","cross_reference()","css()","current()","current=()","current_backtrace()","current_example()","current_example=()","current_scope()","current_section()","currently_executing_a_context_hook?()","currently_needed_ids()","cvs_url()","cvs_url()","debug_msg()","debug_msg()","debug_msg()","declaration_locations()","declare_double()","declare_verifying_double()","dedent()","deduplicate_call_seq()","deep_hash_dup()","default_error_message()","default_formatter()","default_formatter=()","default_instance()","default_options()","default_path=()","default_should_host()","default_should_syntax_host()","default_title=()","defaults()","defaults()","defaults()","define()","define()","define()","define()","define()","define_aliases()","define_derived_metadata()","define_example_group_method()","define_example_method()","define_negated_matcher()","define_nested_shared_group_method()","define_optimized_require_for_rspec()","define_predicate_for()","define_proxy_method()","define_reader()","define_task()","defined?()","defined?()","defined?()","defined_in?()","definition()","definition()","definition()","definition()","definition_lists()","definition_target()","definitions()","delegate_not_to()","delegate_to()","delegate_to_metadata()","delegate_to_metadata()","delegate_to_ordering_manager()","delete()","delete()","delete()","delete()","delete()","delete_file()","delete_legacy_args()","deleting?()","deprecate()","deprecate()","deprecation()","deprecation()","deprecation()","deprecation_message_for()","deprecation_stream=()","deprecation_summary()","deprecation_summary()","deprecation_summary()","deregister_matcher_definition()","desc()","descendant_filtered_examples()","descendants()","describe_expectation()","described_class()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description_for()","description_for()","detect_encoding()","detect_source_encoding()","determine_root()","diff()","diff()","diff()","diff()","diff_as_object()","diff_as_string()","diff_size()","diffable()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable_matcher_list()","differ()","direct_ancestors()","direct_ancestors()","directory()","disable_autorun!()","disable_expect()","disable_expect()","disable_monkey_patching!()","disable_should()","disable_should()","disallow_negation()","disambiguate()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_a()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","discard_b()","dispatch_specs()","display()","display?()","display?()","display_attributes()","display_class()","display_exception()","display_exception=()","display_method()","display_name()","display_names()","display_page()","display_page_list()","do_get()","do_aliases()","do_attrs()","do_boot_defclass()","do_classes()","do_constants()","do_define_class()","do_define_class_under()","do_define_module()","do_define_module_under()","do_includes()","do_methods()","do_missing()","do_modules()","do_nothing()","do_singleton_class()","do_struct_define_without_accessor()","doc_stats()","document()","document()","document_children=()","document_self=()","document_self_or_methods()","documentation_page()","documentation_search()","documentation_source()","documented?()","documented?()","documented?()","documented?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","done_adding()","done_adding()","done_documenting=()","double()","drb_argv()","drb_port()","drb_port()","duck_type()","dump()","dump()","dump()","dump()","dump_failures()","dump_pending()","dump_profile()","dump_profile()","dump_profile_slowest_example_groups()","dump_profile_slowest_examples()","dump_summary()","dump_summary()","dump_summary()","dump_with_rspec_mocks()","dump_without_rspec_mocks()","duplicate_method()","duplicate_with()","each()","each()","each()","each()","each()","each()","each_ancestor()","each_ancestor()","each_attribute()","each_classmodule()","each_constant()","each_extend()","each_include()","each_instance_variable_for_example()","each_letter_group()","each_method()","each_name_of()","each_pair()","each_pair()","each_parent()","each_section()","each_unfulfilled_expectation_matching()","egrep()","egrep()","emphasis()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","enable_expect()","enable_expect()","enable_should()","enable_should()","encode!()","encode_fallback()","end?()","end_accepting()","end_accepting()","end_accepting()","end_accepting()","end_with()","enhance()","enhance_with_matching_rule()","ensure_example_groups_are_configured()","ensure_expected_ordering_received!()","ensure_implemented()","ensure_implemented()","ensure_implemented()","ensure_publicly_implemented()","ensure_registered()","ensure_timing_set()","env_var()","eq()","eql()","eql?()","eql?()","eql?()","equal()","error()","error()","error()","error()","error_generator()","error_generator()","error_message()","error_message()","error_redirect()","escape()","eval_template()","everything_filtered_message()","exactly()","exactly()","example_count()","example_count()","example_failed()","example_failed()","example_failed()","example_failed()","example_failed()","example_finished()","example_finished()","example_group()","example_group_aliases()","example_group_finished()","example_group_finished()","example_group_finished()","example_group_started()","example_group_started()","example_group_started()","example_group_started()","example_group_started()","example_groups()","example_passed()","example_passed()","example_passed()","example_passed()","example_pending()","example_pending()","example_pending()","example_pending()","example_skipped?()","example_started()","example_started()","example_started()","example_status_persistence_file_path=()","examples()","examples()","exception()","exception_count_description()","exception_count_description()","exclude()","exclude()","exclude()","exclude()","exclude?()","exclude_only()","exclude_pattern=()","exclude_with_low_priority()","excluded_from_list?()","excluded_from_list?()","exclusion_filter()","exclusion_filter()","exclusion_filter=()","exclusive()","execute()","execute_with()","executed?()","exist()","existing()","existing()","existing!()","existing!()","expand_class()","expand_name()","expand_tabs()","expect()","expect()","expect()","expect_any_instance_of()","expect_chain()","expect_chain()","expect_chain_on()","expect_deprecation_with_call_site()","expect_deprecation_without_call_site()","expect_enabled?()","expect_enabled?()","expect_message()","expect_no_deprecation()","expect_no_deprecations()","expect_no_warnings()","expect_warn_deprecation()","expect_warn_deprecation_with_call_site()","expect_warning_with_call_site()","expect_warning_without_call_site()","expect_with()","expectation_count_type()","expectation_framework=()","expectation_frameworks()","expectation_fulfilled!()","expectation_fulfilled?()","expectation_fulfilled?()","expectation_fulfilled?()","expectation_on_nil_message()","expected()","expected()","expected()","expected_args()","expected_encoding?()","expected_formatted()","expected_messages_received?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expose_current_running_example_as()","expose_dsl_globally=()","expose_dsl_globally?()","expose_example_group_alias()","expose_example_group_alias_globally()","expose_globally!()","expose_globally!()","exposed_globally?()","exposed_globally?()","expression()","expression()","expression()","expression()","expression_lines()","expression_node()","expression_outmost_node?()","ext()","ext()","ext()","ext()","extend()","extended()","extension()","extension()","extension?()","extract()","extract_call_seq()","extract_comment()","extract_expression_lines_at()","extract_index_path()","extract_line_at()","extract_messages()","extras()","fail()","fail_fast_limit_met?()","fail_including()","fail_with()","fail_with()","fail_with_exception()","fail_with_message()","failed_examples()","failure_count()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message_for_should()","failure_message_for_should_not()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_notifications()","failure_notifier()","failure_notifier=()","failures()","failures()","false_positives_handler()","fetch()","fetch()","fetch()","fetch_or_store()","fetch_or_store()","fetch_or_store()","file()","file=()","file_dir()","file_dir()","file_dir()","file_name()","files_hash()","files_or_directories_to_run=()","files_to_run()","filter()","filter=()","filter_applies?()","filter_gem()","filter_gems_from_backtrace()","filter_manager()","filter_methods()","filter_run()","filter_run_excluding()","filter_run_including()","filter_run_when_matching()","filtered_examples()","find()","find_alias_comment()","find_ancestor_local_symbol()","find_and_eval_shared()","find_attr_comment()","find_attribute()","find_attribute_named()","find_best_solution()","find_body()","find_c_enclosure()","find_class()","find_class_comment()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_const_comment()","find_constant_named()","find_enclosing_module_named()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_first_parent_containing()","find_include_file()","find_instance_method_named()","find_items_for()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_methods()","find_minimal_repro()","find_modifiers()","find_module_named()","find_module_named()","find_module_named()","find_override_comment()","find_pager_jruby()","find_store()","find_symbol()","find_symbol_module()","find_text_page()","find_unique()","finish()","finish()","finish()","finish_page_dir()","finished_a?()","finished_b?()","first_non_rspec_line()","fix_basic_object_inheritance()","flat_map()","flow()","flush()","flush_left()","foo()","for()","for()","for()","for()","for()","for()","for()","for()","for()","for_failed_spec_run()","for_filtered_examples()","for_many_matchers()","force()","force()","force_documentation=()","fork_supported?()","format()","format()","format()","format=()","format_backtrace()","format_backtrace()","format_diffs()","format_docstrings()","format_docstrings_block()","format_duration()","format_seconds()","formatted_backtrace()","formatted_backtrace()","formatted_cause()","formatted_duration()","formatted_inclusion_location()","formatted_load_time()","formatter()","formatter()","formatter=()","formatter_loader()","formatters()","formatters()","framework_name()","framework_name()","framework_name()","framework_name()","freeze()","friendly_path()","from()","from()","from()","from_a()","from_a()","from_file()","from_hash()","from_module()","full_backtrace=()","full_backtrace?()","full_backtrace?()","full_comment()","full_description()","full_description=()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","fully_documented?()","fully_documented?()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted()","fully_formatted_failed_examples()","fully_formatted_lines()","fully_formatted_lines()","fully_formatted_pending_examples()","gather_files()","gem_dir()","gemdirs()","gen_body_table()","gen_const_table()","gen_relative_url()","gen_sub_directories()","gen_url()","gen_url()","gen_url()","gen_url()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate_class()","generate_class_files()","generate_class_files()","generate_class_tree()","generate_class_tree_level()","generate_error()","generate_file_files()","generate_file_files()","generate_file_tree()","generate_file_tree_level()","generate_gzipped()","generate_index()","generate_index_file()","generate_index_file()","generate_page()","generate_search_index()","generate_servlet_not_found()","generate_servlet_root()","generate_table_of_contents()","generated_description()","generation_hook()","generator_descriptions()","generator_for()","get()","get()","get_bool()","get_class_or_module()","get_class_specification()","get_const_defined_on()","get_constant()","get_included_module_with_optional_parens()","get_reader()","get_sorted_module_list()","get_squashed_tk()","get_svninfo()","get_symbol_or_name()","get_tk()","get_tk_until()","get_tkread()","github()","github_url()","glob()","glob()","great_job()","group_entries()","group_name()","gsub()","gsub()","gsub!()","gsub!()","handle()","handle_attr()","handle_class_module()","handle_constants()","handle_directive()","handle_failure()","handle_ifdefs_in()","handle_interrupt()","handle_matcher()","handle_matcher()","handle_method()","handle_order_constraint()","handle_pipe()","handle_rdoc_link()","handle_regexp_crossref()","handle_regexp_crossref()","handle_regexp_crossref()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hard_break()","handle_regexp_hyperlink()","handle_regexp_hyperlink()","handle_regexp_rdoclink()","handle_regexp_rdoclink()","handle_regexp_rdoclink()","handle_regexp_suppressed_crossref()","handle_regexp_tidylink()","handle_regexp_tidylink()","handle_regexp_tidylink()","handle_restoration_failures()","handle_singleton()","handle_tab_width()","has_block?()","has_default_failure_messages?()","has_expectation?()","has_key?()","has_kw_args_in?()","has_kw_args_in?()","has_negative_expectation?()","has_output?()","hash()","hash_attribute_names()","hash_excluding()","hash_including()","hash_not_including()","hash_with_backwards_compatibility_default_proc()","have_attributes()","have_git?()","have_received()","have_successful_no_warnings_output()","hello()","hello_ary()","hidden?()","hide()","hide_const()","highlight()","highlight_syntax()","highlight_syntax()","highlight_syntax()","home_dir()","hook_description()","hook_expression()","hook_expression()","hook_intention()","hook_intention()","hooks()","hooks()","html()","html_list_name()","html_list_name()","html_name()","html_name()","http_url()","http_url()","hunks()","id()","id()","id_from()","idempotently_define_singleton_method()","idempotently_reset()","if_modified_since()","ignore()","ignore()","ignore_deprecations()","ignored?()","ignoring_args?()","implemented?()","import()","improve_hash_formatting()","in_files()","in_namespace()","in_path?()","in_project_source_dir_regex()","in_sub_process()","in_sub_process_if_possible()","in_tt?()","include()","include()","include()","include()","include()","include?()","include_chain_clauses_in_custom_matcher_descriptions?()","include_context()","include_context()","include_example?()","include_example?()","include_example?()","include_examples()","include_file()","include_in()","include_only()","include_template()","include_with_low_priority()","included()","included()","included()","included()","inclusion_filter()","inclusion_filter()","inclusion_filter=()","inclusive()","increase_actual_received_count!()","index_classes()","index_methods()","index_pages()","index_path()","inherited()","inherited()","init()","init()","init_tags()","init_tags()","init_tags()","init_tags()","init_tags()","initial_action=()","initialize()","initialize()","initialize()","initialize_copy()","initialize_methods_etc()","inline()","inner_action()","inner_action=()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_output()","install_siginfo_handler()","installed_at_exit?()","installed_docs()","instance_attributes()","instance_double()","instance_exec()","instance_method_list()","instance_method_visibility_for()","instance_methods()","instance_of()","instance_spy()","instance_that_received()","interactive()","interface_matches?()","interface_matches?()","intern()","intro()","intuit_diff_direction()","invalid_kw_args_from()","invalid_kw_args_from()","investigation()","invoke()","invoke()","invoke()","invoke()","invoke()","invoke_normal()","invoke_without_incrementing_received_count()","invoked()","is_a?()","is_a?()","is_a_matcher?()","is_alias_for()","is_expected()","isolate_for_context_hook()","items_for()","items_for()","jruby?()","jruby_9000?()","jruby_version()","keyword?()","keywords=()","kind_of()","kind_of?()","kind_of?()","klass()","klass()","kw_args_supported?()","last()","last_commit_sha1()","last_description()","last_modified()","last_run_statuses()","lcs()","lcs()","lcs()","least_indentation_from()","length()","let()","let!()","libs=()","line_index()","line_range_of_expression()","line_range_of_location_nodes_in_expression()","lines()","lines_around()","link()","link_to()","list()","list_end_for()","list_files_in_directory()","list_item_from()","list_item_start()","list_item_start()","list_known_classes()","list_methods_matching()","ln()","load()","load()","load_all()","load_all_files()","load_cache()","load_class()","load_class_data()","load_from()","load_method()","load_method()","load_methods_matching()","load_options()","load_page()","load_phony()","load_rakefile()","load_rakefile()","load_rdoc()","load_spec_files()","load_variable_map()","load_yaml()","location()","location()","location_nodes_at_beginning_line()","location_rerun_argument()","location_tuple_from()","lock()","look_for_directives_in()","look_for_directives_in()","lookup()","lookup_method()","main()","main=()","make()","make_example_group_header_red()","make_example_group_header_yellow()","make_header_red()","make_header_yellow()","make_message()","make_variable_map()","map_diffs()","map_to_no_change()","mark_fixed!()","mark_pending!()","mark_skipped!()","markup()","markup_code()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump_with_unmarshable_object_handling()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","mask_protected_sequences()","match()","match()","match()","match()","match()","match()","match()","match()","match_array()","match_for_should()","match_for_should_not()","match_unless_raises()","match_unless_raises()","match_when_negated()","matcher()","matcher_definitions()","matcher_matches?()","matcher_matches?()","matcher_name()","matcher_name()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_args?()","matches_at_least_count?()","matches_at_most_count?()","matches_exact_count?()","matches_name_but_not_args()","matching_encoding()","matching_hooks_for()","max_count=()","max_formatted_output_length=()","member?()","member?()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge_search_index()","merge_tree()","merged?()","message()","message()","message()","message()","message()","message()","message()","message_expectation_class()","message_expectation_class()","message_lines()","message_lines()","message_received()","message_received()","message_with_diff()","messages_arg_list()","metadata()","metadata()","method_call_args_description()","method_defined_at_any_visibility?()","method_document()","method_double_from_ancestor_for()","method_double_if_exists_for_message()","method_file()","method_handle_for()","method_is_stashed?()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_reference()","method_reference()","method_type()","method_visibility_for()","methods_by_type()","methods_matching()","min_count=()","missing_kw_args_from()","missing_kw_args_from()","mkdir_p()","mock_framework()","mock_framework=()","mock_with()","modern_matcher_from()","module()","module?()","module?()","module_names()","module_prepends_supported?()","module_refinement_supported?()","modules()","modules_hash()","modules_hash()","move_progress()","mri?()","multitask()","mutate()","mutate()","mutate()","mutate()","mutated?()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name_for_path()","name_for_path()","name_prefix()","name_prefix()","name_regexp()","names()","namespace()","native_object_id()","needed?()","needed?()","needed?()","negative?()","negative_expectation_for?()","never()","never()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_comment()","new_rspec_prepended_module()","new_scope()","new_scope()","new_scope()","next_runnable_index_for()","next_token()","next_words_on_error()","no_args()","nodes_by_line_number()","nodoc()","non_aliases()","non_example_failure()","non_example_failure=()","non_kw_args_arity_description()","non_kw_args_arity_description()","non_mri?()","normalize()","normalize()","normalize_comment()","normalize_const_name()","normalized_file_list()","not_found()","not_to()","not_to()","not_to()","note()","note_for()","notes()","notifications()","notify()","notify_failure()","notify_non_example_exception()","notify_received_message()","notify_results()","now()","nowrite()","nowrite()","null_object?()","null_object?()","null_object?()","num_example_groups_defined_in()","object_class()","object_double()","object_singleton_class()","object_spy()","of()","off_tags()","off_tags()","on_char()","on_backref()","on_comma()","on_comment()","on_const()","on_cvar()","on_default()","on_error()","on_error()","on_example_group_definition()","on_example_group_definition_callbacks()","on_float()","on_gvar()","on_heredoc_beg()","on_heredoc_end()","on_ident()","on_ignored_nl()","on_ignored_sp()","on_imaginary()","on_int()","on_ivar()","on_kw()","on_lbrace()","on_lbracket()","on_lparen()","on_nl()","on_op()","on_period()","on_potential_false_positives=()","on_rational()","on_rbrace()","on_rbracket()","on_rparen()","on_sp()","on_symbeg()","on_tags()","on_tags()","on_tstring_beg()","on_tstring_end()","once()","once()","ongoing_visibility=()","only_failures_but_not_configured?()","op()","opening?()","opposite_should_method()","opposite_should_method()","option_list()","option_list()","optional_and_splat_args_supported?()","options()","options()","options()","opts()","or()","order()","order()","order()","order=()","ordered()","ordered?()","ordered_example_groups()","ordering_strategy()","organize_ids()","orig_initialize()","original()","original_dir()","original_implementation_callable()","original_locations()","original_method()","original_method_handle_for()","original_method_handle_for()","original_method_handle_for()","original_results()","original_results()","original_unbound_method_handle_from_ancestor_for()","other_errors()","other_errors()","output()","output()","output_flag_file()","output_name()","output_stream=()","overlaps?()","package_dir_path()","package_name()","page()","page()","page_file()","page_name()","paging?()","paragraph()","paragraph()","param_list()","param_seq()","parent()","parent_file_name()","parent_groups()","parent_name()","parent_name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_alias()","parse_attr()","parse_attr_accessor()","parse_call_parameters()","parse_class()","parse_comment()","parse_comment_tomdoc()","parse_constant()","parse_constant_visibility()","parse_dot_doc_file()","parse_entries()","parse_file()","parse_files()","parse_files_matching()","parse_id()","parse_meta_attr()","parse_meta_method()","parse_method()","parse_method_dummy()","parse_method_or_yield_parameters()","parse_method_parameters()","parse_method_params_and_body()","parse_module()","parse_name()","parse_options()","parse_require()","parse_rescue()","parse_statements()","parse_symbol_arg()","parse_symbol_in_arg()","parse_top_level_statements()","parse_url()","parse_visibility()","parse_yield()","parseable?()","parser=()","patch()","patch()","patch!()","patch!()","patch!()","patch_marshal_to_support_partial_doubles=()","patch_me()","path()","path()","path()","path()","path()","path_relative_to_repository()","path_to_executable()","path_to_git_dir()","pathmap()","pathmap()","pathmap()","pathmap()","pathmap_explode()","pathmap_partial()","pathmap_replace()","pattern=()","peek_read()","peek_tk()","peek_token()","peg_parse()","pending()","pending_count()","pending_examples()","pending_notifications()","percent_doc()","percent_of()","percentage()","perform_at_exit()","perform_change()","persist()","persist()","pick_encoding()","plain_html()","play_onto()","playback!()","playback!()","playback!()","playback!()","playback_onto()","pluralize()","pop_token()","populate()","post_process()","post_process()","post_processors()","preceding_declaration_line()","prepare_array()","prepare_default()","prepare_default()","prepare_element()","prepare_example_filtering()","prepare_for_inspection()","prepare_for_inspection()","prepare_hash()","prepend()","prepend()","prepend()","prepend_after()","prepend_after()","prepend_before()","prepend_before()","prepended_modules_of()","prepended_modules_of_singleton_class()","prerequisite_tasks()","present?()","present?()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","prev_words_on_error()","previously_defined?()","print()","print_alias()","print_attribute()","print_class()","print_constant()","print_deferred_deprecation_warnings()","print_deprecation_message()","print_deprecation_message()","print_example_failed()","print_example_group_end()","print_example_group_start()","print_example_passed()","print_example_pending()","print_file()","print_file()","print_html_start()","print_method()","print_module()","print_summary()","printer()","probe()","probe()","process_args()","processable_hooks_for()","profile_examples()","proxies_of()","proxies_of()","proxy_for()","proxy_for()","proxy_method_invoked()","proxy_method_invoked()","prune()","publish()","publish()","push()","push()","push()","push()","puts()","puts()","quiet()","quiet=()","quote()","raise_already_invoked_error()","raise_cant_constrain_count_for_negated_have_received_error()","raise_does_not_implement_error()","raise_double_negation_error()","raise_error()","raise_errors_for_deprecations!()","raise_exception()","raise_expectation_error()","raise_expectation_on_mocked_method()","raise_expectation_on_nil_error()","raise_expectation_on_unstubbed_method()","raise_expired_test_double_error()","raise_have_received_disallowed()","raise_invalid_arguments_error()","raise_message_already_received_by_other_instance_error()","raise_method_not_stubbed_error()","raise_method_not_stubbed_error()","raise_missing_block_error()","raise_missing_default_stub_error()","raise_missing_default_stub_error()","raise_non_public_error()","raise_not_supported_with_prepend_error()","raise_on_invalid_const()","raise_on_warning=()","raise_only_valid_on_a_partial_double()","raise_out_of_order_error()","raise_out_of_order_error()","raise_second_instance_received_message_error()","raise_similar_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_error()","raise_unexpected_message_error()","raise_unimplemented_error()","raise_verifying_double_not_defined_error()","raise_wrong_arity_error()","rake()","rake_check_options()","rake_check_options()","rake_merge_option()","rake_merge_option()","rake_output_message()","rake_output_message()","rake_system_dir()","rakefile()","rakefile_access()","rakefile_chains()","rakefile_comments()","rakefile_default()","rakefile_dryrun()","rakefile_extra()","rakefile_failing_test_task()","rakefile_file_creation()","rakefile_imports()","rakefile_multidesc()","rakefile_namespace()","rakefile_nosearch()","rakefile_rakelib()","rakefile_rbext()","rakefile_regenerate_imports()","rakefile_stand_alone_filelist()","rakefile_test_signal()","rakefile_test_task()","rakefile_unittest()","rakefile_verbose()","raw_path()","rb_scan_args()","rbx?()","rdoc_installed?()","rdoc_task_description()","rdoc_task_description()","read_directive()","read_documentation_modifiers()","read_file()","ready_for?()","receive()","receive()","receive_message_chain()","receive_messages()","received_expected_message!()","received_message?()","received_message?()","record()","record()","record()","record_finished()","record_location()","record_location()","record_message_received()","recursive_const_defined?()","recursive_const_get()","recursive_structure?()","reenable()","reference()","register()","register()","register()","register()","register()","register()","register_constant_mutator()","register_constant_mutator()","register_global_singleton_context_hooks()","register_globals()","register_listener()","register_matcher_definition()","register_ordering()","registered()","registered?()","registered?()","registered?()","registered_example_group_files()","registered_example_group_files()","registered_listeners()","registry()","relative_path()","relative_path_regex()","remove()","remove_all_constants()","remove_coding_comment()","remove_comment()","remove_commented_out_lines()","remove_example()","remove_from_documentation?()","remove_frozen_string_literal()","remove_globally!()","remove_globally!()","remove_invalid_bytes()","remove_invisible()","remove_magic_comment()","remove_modeline()","remove_nodoc()","remove_nodoc_children()","remove_private()","remove_private_comment()","remove_siginfo_handler()","remove_stub()","remove_stub()","remove_stub_chains_for!()","remove_stub_if_present()","remove_stub_if_present()","remove_token_listener()","remove_unparseable()","render()","render_template()","render_template()","reopen()","replace_ruby()","replay_received_message_on()","report()","report()","report_attributes()","report_class_module()","report_constants()","report_filter_message()","report_methods()","reporter()","reporter()","repository_url()","repro_command_for_currently_needed_ids()","repro_command_from()","require_do()","required_kw_args_supported?()","requires=()","rerdoc_task_description()","rerdoc_task_description()","rerun_argument()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset!()","reset_all()","reset_all()","reset_filters()","reset_memoized()","reset_reporter()","reset_syntaxes_to_default()","reset_syntaxes_to_default()","resolve()","resolve()","resolve()","resolve_aliases()","resolve_args()","resolve_expected_args_based_on()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","restore()","restore_original_method()","restore_original_visibility()","retrieve_comment_body()","reverse_sdiff()","ri_installed?()","ri_paths()","ripper_supported?()","root()","root()","root_search()","rspec_description_for_object()","ruby()","ruby()","ruby?()","rule()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_after_context_hooks()","run_before_context_hooks()","run_examples()","run_owned_hooks_for()","run_ruby()","run_ruby_with_current_load_path()","run_specs()","run_task()","run_with_threads()","running_in_drb?()","safe_invoke()","safe_ln()","sandboxed()","sanitize_path()","satisfy()","save()","save_cache()","save_class()","save_method()","save_original_implementation_callable!()","save_page()","scan()","scan()","scan()","scan()","scan()","scan()","scope()","scope_name()","sdiff()","sdiff()","search_record()","search_record()","search_record()","search_string()","section()","section_contents()","sections()","see()","seed()","seed()","seed=()","seed_used?()","seed_used?()","segments()","send()","send()","seq1()","seq2()","sequence()","set_aggregate_failures_exception()","set_arg_names()","set_attrs()","set_constant_visibility_for()","set_current_section()","set_eoutvar()","set_eoutvar()","set_exception()","set_exception()","set_it_up()","set_ivars()","set_visibility_for()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup()","setup_allowance()","setup_allowance()","setup_allowance()","setup_allowance()","setup_any_instance_allowance()","setup_any_instance_allowance()","setup_any_instance_allowance()","setup_any_instance_allowance()","setup_any_instance_expectation()","setup_any_instance_expectation()","setup_any_instance_expectation()","setup_any_instance_expectation()","setup_any_instance_negative_expectation()","setup_any_instance_negative_expectation()","setup_chain()","setup_command_line()","setup_default()","setup_expectation()","setup_expectation()","setup_expectation()","setup_expectation()","setup_generator()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_mocks_for_rspec()","setup_names()","setup_negative_expectation()","setup_negative_expectation()","setup_negative_expectation()","setup_negative_expectation()","setup_options()","setup_output_dir()","setup_output_dir()","setup_pager()","setup_scanner()","setup_simple_method_double()","setup_simplecov()","sexp?()","sh()","shared_context()","shared_context_metadata_behavior=()","shared_example_group_inclusions()","shared_example_group_registry()","shared_examples()","shared_examples()","shared_examples_for()","shell_allows_unquoted_ids?()","shell_out()","shellcommand()","should()","should()","should_enabled?()","should_enabled?()","should_enumerate?()","should_method()","should_method()","should_not()","should_not()","should_not_receive()","should_not_receive()","should_not_receive()","should_receive()","should_receive()","should_receive()","should_transfer_nested_constants?()","show_documentation()","show_frozen_warning()","shutdown()","signature()","silence_metadata_example_group_deprecations()","similar_messages()","simple_callback()","simple_callback_no_finishers()","simplify()","single_yield_args()","singleton_class()","site_dir()","skip()","skip()","skip_for_variable()","skip_method()","skip_optional_do_after_expression()","skip_tkspace()","skip_tkspace_comment()","skip_tkspace_without_nl()","skip_with_exception()","skipped_seq1()","skipped_seq2()","slow_duration()","slowest_examples()","slowest_groups()","snippet()","snippet()","snippet_for()","sort_hash_keys()","sort_sections()","source()","source()","source_from_file()","source_from_file()","sources()","spec_files_with_failures()","spec_opts_without_bisect()","split()","split_all()","split_file_scoped_rules()","split_into_flow()","split_words()","spy()","standalone?()","start()","start()","start()","start()","start()","start()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_accepting()","start_collecting_tokens()","start_doc()","start_dump()","start_dump()","start_dump()","start_server()","start_with()","stash()","stash_deprecation_message()","stashed_method_name()","stop()","stop()","stop()","stop_all_observation!()","stop_doc()","stop_observing!()","store=()","store=()","store=()","store=()","store=()","store=()","store=()","store_before_context_ivars()","store_for()","strike()","string()","strip_hashes()","strip_known_warnings()","strip_newlines()","strip_stars()","strip_tags()","strong()","stub()","stub()","stub()","stub()","stub_chain()","stub_chain()","stub_chain()","stub_chain_on()","stub_const()","stubbed?()","sub()","sub()","sub!()","sub!()","subclass()","subject()","subject()","subject!()","summarize()","summarize()","summary()","summary()","summary()","superclass()","superclass()","superclass=()","superclass_before_context_ivars()","superclass_metadata()","superclass_method()","superclass_proxy()","superclass_proxy_for()","superclass_proxy_for()","supports_block_expectations()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_exception_cause?()","supports_rebinding_module_methods?()","suppress()","suppressed?()","suppressed?()","surface_descriptions_in()","synchronize()","synchronize()","syntax()","syntax()","syntax=()","syntax=()","syntax_highlighter()","system_dir()","table_of_contents()","tar_bz2_file()","tar_gz_file()","target()","target()","task()","task()","task_defined?()","tasks()","tasks()","tasks()","tasks_in_scope()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","teardown_mocks_for_rspec()","template_dir_for()","template_for()","template_result()","terminal_action=()","test_9d_returns_partial_dirname()","test_accept_blank_line()","test_accept_block_quote()","test_accept_document()","test_accept_heading()","test_accept_heading_1()","test_accept_heading_2()","test_accept_heading_3()","test_accept_heading_4()","test_accept_heading_b()","test_accept_heading_indent()","test_accept_heading_suppressed_crossref()","test_accept_list_end_bullet()","test_accept_list_end_label()","test_accept_list_end_lalpha()","test_accept_list_end_note()","test_accept_list_end_number()","test_accept_list_end_ualpha()","test_accept_list_item_end_bullet()","test_accept_list_item_end_label()","test_accept_list_item_end_lalpha()","test_accept_list_item_end_note()","test_accept_list_item_end_number()","test_accept_list_item_end_ualpha()","test_accept_list_item_start_bullet()","test_accept_list_item_start_label()","test_accept_list_item_start_lalpha()","test_accept_list_item_start_note()","test_accept_list_item_start_note_2()","test_accept_list_item_start_note_multi_description()","test_accept_list_item_start_note_multi_label()","test_accept_list_item_start_number()","test_accept_list_item_start_ualpha()","test_accept_list_start_bullet()","test_accept_list_start_label()","test_accept_list_start_lalpha()","test_accept_list_start_note()","test_accept_list_start_number()","test_accept_list_start_ualpha()","test_accept_paragraph()","test_accept_paragraph_b()","test_accept_paragraph_br()","test_accept_paragraph_break()","test_accept_paragraph_i()","test_accept_paragraph_indent()","test_accept_paragraph_plus()","test_accept_paragraph_star()","test_accept_paragraph_underscore()","test_accept_paragraph_wrap()","test_accept_raw()","test_accept_rule()","test_accept_rule_indent()","test_accept_verbatim()","test_accept_verbatim_big_indent()","test_accept_verbatim_indent()","test_actions_of_various_arity_are_ok_with_args()","test_add_default_exclude_list()","test_add_many()","test_add_matching()","test_add_return()","test_all_and_extra_arguments_with_named_arguments()","test_all_and_extra_arguments_without_named_arguments()","test_all_multitasks_wait_on_slow_prerequisites()","test_all_prerequisite_tasks_does_not_include_duplicates()","test_all_prerequisite_tasks_includes_all_prerequisites()","test_all_prerequisite_tasks_includes_self_on_cyclic_dependencies()","test_always_multitask()","test_anonymous_namespace()","test_anonymous_tasks_can_be_invoked_indirectly()","test_append()","test_append_one_circular()","test_append_pathname()","test_append_two_circular()","test_append_with_one_argument()","test_arg_list_is_empty_if_no_args_given()","test_args_do_not_reference_env_values()","test_args_given()","test_args_knows_its_names()","test_args_not_passed_if_no_arg_names()","test_args_not_passed_if_no_prereq_names_on_multitask()","test_args_not_passed_if_no_prereq_names_on_task()","test_arguments_are_passed_to_all_blocks()","test_arguments_are_passed_to_block()","test_array_comparisons()","test_array_equality()","test_array_operators()","test_arrays_can_be_prerequisites()","test_attributes()","test_backtrace()","test_backtrace_with_error()","test_backtrace_with_following_task_name()","test_backtrace_with_stderr()","test_backtrace_with_stdout()","test_bad_option()","test_bad_run()","test_bad_run_includes_exception_name()","test_bad_run_with_backtrace()","test_bad_run_with_trace()","test_banner()","test_basic_array_functions()","test_bin_rake_suppressed()","test_block_verbose_false_should_not_show_command()","test_block_verbose_true_should_show_command()","test_block_with_no_parameters_is_ok()","test_building_imported_files_on_demand()","test_by_default_rakelib_files_are_included()","test_can_double_invoke_with_reenable()","test_can_handle_commas_in_args()","test_can_handle_spaces_between_args()","test_can_invoke_task_in_nested_namespace()","test_can_invoke_task_in_toplevel_namespace()","test_can_load_rake_library()","test_can_override_application()","test_can_use_blocks()","test_can_use_pathname()","test_child_hides_parent_arg_names()","test_claim_to_be_a_filelist_instance()","test_claim_to_be_a_kind_of_array()","test_claim_to_be_a_kind_of_filelist()","test_clean()","test_cleanup()","test_cleanup_ignores_missing_files()","test_clear()","test_clear_actions()","test_clear_comments()","test_clear_ignore_patterns()","test_clear_prerequisites()","test_clone()","test_clone_and_dup()","test_cloned_items_stay_frozen()","test_close_date()","test_close_matches_on_name_do_not_trigger_rule()","test_comment_after_desc_is_ignored()","test_comment_before_desc_is_ignored()","test_comment_before_task_acts_like_desc()","test_comment_separated_from_task_by_blank_line_is_not_picked_up()","test_comment_setting()","test_comments_do_not_set()","test_comments_is_nil()","test_comments_with_decimal_points()","test_comments_with_sentences()","test_comments_with_tabbed_sentences()","test_complex_patterns()","test_conj_against_two_elements()","test_conj_on_invocation_chains()","test_conjunction()","test_continue()","test_conversion_to_string()","test_conversion_with_inspect()","test_correct_number_of_tasks_reported()","test_correctly_scoped_prerequisites_are_invoked()","test_count()","test_count()","test_count_nil()","test_count_raise()","test_count_with_default_nil()","test_count_with_default_raise()","test_create()","test_create()","test_create()","test_create_filetask_in_namespace()","test_create_task_manager()","test_create_with_args()","test_create_with_block()","test_create_with_brackets()","test_create_with_brackets_and_filelist()","test_create_with_pathname()","test_create_with_source()","test_creating_new_argument_scopes()","test_curly_bracket_pattern()","test_d_returns_dirname()","test_dash_f_with_no_arg_foils_rakefile_lookup()","test_dash_returns_empty_string()","test_default_arguments_that_dont_match_names_are_ignored()","test_default_arguments_values_can_be_merged()","test_default_exclude()","test_default_options()","test_default_task_collection()","test_define_namespace_in_namespace()","test_define_namespaced_task()","test_define_task()","test_defined()","test_delegating_methods_do_not_include_to_a_or_to_ary()","test_describe()","test_describe_tasks()","test_describe_with_pattern()","test_directory()","test_directory()","test_directory()","test_directory_colon()","test_directory_win32()","test_display_exception_details()","test_display_exception_details_cause()","test_display_exception_details_cause_loop()","test_display_prereqs()","test_display_task_run()","test_display_tasks()","test_display_tasks_with_long_comments()","test_display_tasks_with_long_comments_to_a_non_tty_shows_entire_comment()","test_display_tasks_with_task_name_wider_than_tty_display()","test_display_tasks_with_very_long_task_name_to_a_non_tty_shows_name_and_comment()","test_dont_claim_to_be_an_array_instance()","test_dot_rake_files_can_be_loaded_with_dash_r()","test_dry_run()","test_dry_run()","test_dry_run_bug()","test_dry_run_prevents_actions()","test_dup_and_clone_replicate_taint()","test_duped_items_will_thaw()","test_duplicate_comments()","test_each_dir_parent()","test_egrep_returns_0_if_no_matches()","test_egrep_with_block()","test_egrep_with_error()","test_egrep_with_output()","test_empty_arg_list_is_empty()","test_empty_args()","test_empty_list()","test_end_accepting()","test_enumerable_behavior()","test_enumeration_methods()","test_env_available_at_task_scope()","test_env_available_at_top_scope()","test_environment_and_tasks_together()","test_environment_definition()","test_equality()","test_exceptions()","test_exclude()","test_exclude_pathname()","test_exclude_return_on_create()","test_exclude_with_alternate_file_seps()","test_exclude_with_string_return_on_create()","test_excluding_via_block()","test_execute()","test_execute_and_continue()","test_execute_and_print()","test_existing()","test_existing!()","test_existing_file_depends_on_non_existing_file()","test_explode()","test_ext_works_on_pathnames()","test_extended_comments()","test_extension_complains_when_a_method_that_is_present()","test_extra_args_with_less_than_named_arguments()","test_extra_names_are_nil()","test_extra_parameters_are_ignored()","test_f_returns_basename()","test_failing_test_sets_exit_status()","test_falsey_dependencies()","test_far_date()","test_file_creation_task()","test_file_depends_on_task_depend_on_file()","test_file_list_env_test()","test_file_list_is_requirable_separately()","test_file_list_supports_pathmap()","test_file_names_beginning_with_dot_can_be_tricked_into_referring_to_file()","test_file_names_beginning_with_dot_can_be_wrapped_in_lambda()","test_file_names_containing_percent_can_be_wrapped_in_lambda()","test_file_need()","test_file_needed()","test_file_task()","test_file_task_are_not_scoped_by_namespaces()","test_file_task_dependencies_scoped_by_namespaces()","test_file_times_new_depend_on_regular_task_timestamps()","test_file_times_new_depends_on_old()","test_file_times_old_depends_on_new()","test_file_utils_can_use_filelists()","test_file_utils_methods_are_available_at_top_level()","test_filelist_ext()","test_filelists_can_be_prerequisites()","test_files=()","test_fileutils_methods_dont_leak()","test_find()","test_finding_rakefile()","test_flatten()","test_general()","test_good_arg_patterns()","test_good_run()","test_gsub()","test_gsub!()","test_handle_options_should_not_strip_options_from_argv()","test_handle_options_trace_default_is_stderr()","test_handle_options_trace_does_not_eat_following_task_names()","test_handle_options_trace_overrides_to_stdout()","test_has_key()","test_help()","test_ignore_special()","test_implicit_file_dependencies()","test_implicit_system()","test_import()","test_imports()","test_include_with_another_array()","test_include_with_another_filelist()","test_include_with_pathname()","test_incremental_definitions()","test_index()","test_initialize()","test_initialize()","test_initialize_no_version()","test_initialize_noversion()","test_initialize_override()","test_inline_verbose_default_should_show_command()","test_inline_verbose_false_should_not_show_command()","test_inline_verbose_true_should_show_command()","test_inspect()","test_inspect_pending()","test_interspersed_duplicate_comments()","test_invalid_command_line_options()","test_investigation_output()","test_invoke()","test_invoke_with_circular_dependencies()","test_item_dequeued()","test_item_queued()","test_jobs()","test_keeps_embedded_spaces()","test_late_time_comparisons()","test_libdir()","test_libs_equals()","test_libs_equals_empty()","test_list_nested()","test_list_verbatim()","test_list_with_one_item()","test_list_with_several_items()","test_lists_are_enumerable()","test_lists_are_structurally_equivalent()","test_ln()","test_load_from_calculated_system_rakefile()","test_load_from_system_rakefile()","test_load_rakefile()","test_load_rakefile_doesnt_print_rakefile_directory_from_same_dir()","test_load_rakefile_doesnt_print_rakefile_directory_from_subdir_if_silent()","test_load_rakefile_from_subdir()","test_load_rakefile_not_found()","test_load_rakefile_prints_rakefile_directory_from_subdir()","test_loading_imports()","test_long_description()","test_lookup_with_explicit_scopes()","test_make_on_invocation_chains()","test_make_with_no_arguments()","test_make_with_one_argument()","test_make_with_two_arguments()","test_match()","test_member_eh_one()","test_member_eh_two()","test_methods_actually_exist()","test_missing_dependencies()","test_missing_other_constant()","test_missing_require()","test_multi_collapse()","test_multi_desc()","test_multi_invocations()","test_multiline_environment_definition()","test_multiple_comments()","test_multiple_items()","test_multiple_patterns()","test_multiple_patterns()","test_multiple_rules1()","test_multiple_rules2()","test_multiple_values_in_args()","test_multitask()","test_multitasks_with_parameters()","test_n_returns_basename_without_extension()","test_name_and_needs()","test_name_args_and_prereqs()","test_name_lookup()","test_name_lookup_in_multiple_scopes()","test_name_lookup_with_implicit_file_tasks()","test_name_lookup_with_nonexistent_task()","test_name_only()","test_name_with_args()","test_named_args()","test_named_args_are_passed_to_prereqs()","test_namespace()","test_namespace_command()","test_namespace_command_with_a_string_like_object()","test_namespace_command_with_bad_name()","test_namespace_creation()","test_namespace_lookup()","test_namespace_reports_tasks_it_owns()","test_namespace_task_create()","test_namespace_yields_same_namespace_as_returned()","test_near_system_dir_isnt_suppressed()","test_needed_eh_build_all()","test_needed_eh_dependency()","test_needed_eh_exists()","test_no_args_given()","test_no_commands_constant()","test_no_deprecated_dsl()","test_no_deprecated_messages()","test_no_double_invoke()","test_no_rakeopt()","test_no_retriggers_on_file_task()","test_no_retriggers_on_filecreate_task()","test_no_search()","test_no_system()","test_no_system()","test_no_warning_when_defining_ok_method()","test_non_extension_rule_name_refers_to_file()","test_nosearch_with_rakefile_uses_local_rakefile()","test_nosearch_without_rakefile_and_no_system_fails()","test_nosearch_without_rakefile_finds_system()","test_not_finding_rakefile()","test_nowrite()","test_one_argument()","test_original_dir_reports_current_dir()","test_original_time_compare_is_not_messed_up()","test_other_array_returning_methods()","test_p_returns_entire_pathname()","test_package_name()","test_package_name_noversion()","test_parse()","test_partial_directory_selection_works_with_patterns()","test_paste()","test_path_against_empty_scope()","test_path_against_one_element()","test_path_against_two_elements()","test_path_map_works_on_pathnames()","test_path_with_task_name()","test_path_with_task_name_against_empty_scope()","test_pathmap_automatically_applies_to_name()","test_pathmap_partial()","test_pattern()","test_pattern_can_use_backreferences()","test_pattern_equals()","test_pattern_equals_test_files_equals()","test_pattern_returns_substitutions()","test_pattern_with_invalid_operator()","test_pattern_with_no_replacement_nor_block_substitutes_empty_string()","test_pattern_with_star_replacement_string_uses_block()","test_pattern_works_with_certain_valid_operators()","test_percent_percent_returns_percent()","test_plain_strings_are_just_filenames()","test_plain_strings_as_dependents_refer_to_files()","test_pool_creates_the_correct_number_of_threads()","test_pool_executes_in_current_thread_for_zero_threads()","test_pool_executes_in_other_thread_for_pool_of_size_one()","test_pool_executes_in_two_other_threads_for_pool_of_size_two()","test_pool_future_does_not_duplicate_arguments()","test_pool_join_empties_queue()","test_pool_prevents_deadlock()","test_pool_reports_correct_results()","test_prereqs()","test_prerequisite_can_be_pathname()","test_prerequisite_tasks_fails_if_prerequisites_are_undefined()","test_prerequisite_tasks_honors_namespaces()","test_prerequisite_tasks_returns_tasks_not_strings()","test_printing_original_exception_cause()","test_private_reader_is_private()","test_private_reader_returns_data()","test_proc_returning_lists_are_flattened_into_prereqs()","test_proper_namespace_access()","test_quiet()","test_rake_default()","test_rake_error_excludes_exception_name()","test_rake_error_on_bad_task()","test_rake_explicit_task_library()","test_rake_namespace_refers_to_toplevel()","test_rakefile()","test_rakelib()","test_rakeopt_with_blank_options()","test_rakeopt_with_silent_options()","test_rbext()","test_recursive_rules_that_dont_terminate_will_overflow()","test_recursive_rules_will_work_as_long_as_they_terminate()","test_regenerate_imports()","test_regex_rule_with_args()","test_regex_rule_with_args_and_lambda_prereq()","test_reject()","test_require()","test_returns_self_with_no_args()","test_rm_filelist()","test_rm_one_file()","test_rm_two_files()","test_ruby_with_a_single_string_argument()","test_ruby_with_multiple_arguments()","test_rule_can_be_created_by_string()","test_rule_prereqs_can_be_created_by_string()","test_rule_rebuilds_obj_when_source_is_newer()","test_rule_runs_when_explicit_task_has_no_actions()","test_rule_with_method_prereq()","test_rule_with_one_arg_method_prereq()","test_rule_with_proc_dependent_will_trigger()","test_rule_with_two_sources_builds_both_sources()","test_rule_with_two_sources_but_one_missing_does_not_run()","test_rule_with_two_sources_runs_if_both_sources_are_present()","test_rules_chaining_to_file_task()","test_rules_with_bad_dependents_will_fail()","test_run_code_direct()","test_run_code_rake()","test_run_code_rake_default_gem()","test_run_code_testrb_ruby_1_8_2()","test_run_code_testrb_ruby_1_8_6()","test_run_with_bad_options()","test_running_multitasks()","test_s_returns_file_separator()","test_safe_ln_failover_to_cp_on_not_implemented_error()","test_safe_ln_failover_to_cp_on_standard_error()","test_safe_ln_fails_on_script_error()","test_scope()","test_second_rule_doest_run_if_first_triggers()","test_second_rule_doest_run_if_first_triggers_with_reversed_rules()","test_second_rule_runs_when_first_rule_doesnt()","test_sh()","test_sh_bad_option()","test_sh_failure()","test_sh_noop()","test_sh_special_handling()","test_sh_verbose()","test_sh_verbose_false()","test_sh_verbose_flag_nil()","test_sh_with_a_single_string_argument()","test_sh_with_multiple_arguments()","test_show_lines()","test_signal_propagation_in_tests()","test_silent()","test_single_collapse()","test_single_dependent()","test_source_is_first_prerequisite()","test_source_is_first_prerequisite()","test_sources_is_all_prerequisites()","test_special_return_delegating_methods_object_type()","test_split_all()","test_square_bracket_pattern()","test_stand_alone_filelist()","test_standalone_verbose_false_should_not_show_command()","test_standalone_verbose_true_should_show_command()","test_standard_exception_handling_invalid_option()","test_standard_exception_handling_other()","test_standard_exception_handling_system_exit()","test_standard_exception_handling_system_exit_nonzero()","test_start_accepting()","test_string_ext()","test_string_rule_with_args()","test_string_rule_with_args_and_lambda_prereq()","test_strings_can_be_prerequisites()","test_sub()","test_sub!()","test_sub_with_block()","test_suppress_option()","test_symbols_can_be_prerequisites()","test_symlink()","test_system()","test_system()","test_system_dir_suppressed()","test_system_excludes_rakelib_files_too()","test_task()","test_task_can_be_pathname()","test_task_collection()","test_task_gives_name_on_to_s()","test_task_list()","test_tasks()","test_tasks_can_access_arguments_as_hash()","test_tasks_can_be_traced()","test_tasks_can_reference_task_in_other_namespaces()","test_tasks_can_reference_task_in_same_namespace()","test_terminal_columns()","test_terminal_width_using_env()","test_terminal_width_using_hardcoded_80()","test_terminal_width_using_stty()","test_terminal_width_using_tput()","test_terminal_width_with_failure()","test_test_files_equals()","test_test_task_descriptions()","test_thread_created()","test_thread_deleted()","test_throws_error_if_library_not_found()","test_timestamp_returns_latest_prereq_timestamp()","test_timestamp_returns_now_if_all_prereqs_have_no_times()","test_to_array()","test_to_s()","test_to_s()","test_to_s()","test_to_s_empty()","test_to_s_pending()","test_to_string()","test_trace()","test_trace_bug()","test_trace_handles_nil_objects()","test_trace_issues_single_io_for_args_multiple_strings()","test_trace_issues_single_io_for_args_multiple_strings_and_alternate_sep()","test_trace_issues_single_io_for_args_with_empty_args()","test_trace_rules()","test_trace_with_error()","test_trace_with_following_task_name()","test_trace_with_stderr()","test_trace_with_stdout()","test_treat_blank_arg_as_empty_string()","test_trim()","test_truncating_comments_to_a_non_tty()","test_two_arguments()","test_undefined_percent_causes_error()","test_unique()","test_values_at()","test_verbose()","test_verbose()","test_version()","test_very_early_timestamp()","test_waiting()","test_when_not_writing()","test_when_writing()","test_where()","test_win32_backtrace_with_different_case()","test_win32_system_dir_fallback_to_userprofile_otherwise()","test_win32_system_dir_nil_of_no_env_vars()","test_win32_system_dir_uses_appdata_when_no_home_or_home_combo()","test_win32_system_dir_uses_home_if_defined()","test_win32_system_dir_uses_homedrive_homepath_when_no_home_defined()","test_windows()","test_with_99_exit_status()","test_with_zero_exit_status()","test_wont_reload_rake_library()","test_works_with_windows_separators()","test_x_returns_everything_but_extension()","test_x_returns_extension()","text()","text()","text()","text()","text=()","text?()","tgz_file()","thread_local_data()","thrice()","thrice()","throw_symbol()","time_delta_string()","times()","times()","timestamp()","timestamp()","timestamp()","title()","title=()","tk_nl?()","to()","to()","to()","to()","to()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_constant()","to_constant()","to_constant()","to_constant()","to_h()","to_h()","to_hash()","to_html()","to_html()","to_html()","to_io()","to_not()","to_not()","to_not()","to_proc()","to_proc()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_stderr()","to_stderr_from_any_process()","to_stdout()","to_stdout_from_any_process()","to_str()","to_toc()","today()","token_listener()","token_pos()","token_stream()","tokenize()","tokenize()","tokenize()","tokens()","tokens_by_line_number()","tokens_from_ripper_tokens()","tokens_to_s()","tomdoc?()","top_level()","top_level()","top_level()","top_level?()","top_level_description()","totals_line()","transfer_nested_constants()","transfer_nested_constants?()","translate()","translate()","trap_interrupt()","traverse_balanced()","traverse_balanced()","traverse_example_group_trees_until()","traverse_example_group_trees_until()","traverse_sequences()","traverse_sequences()","traverse_tree_until()","treat_symbols_as_metadata_keys_with_true_values=()","truncate()","truncate()","try_extracting_single_line_body_of()","tt?()","tt_sections()","twice()","twice()","type()","type()","type()","type()","type()","unadvise()","unadvise()","unchanged?()","unclosed_tokens_in_line_range()","undoc_params()","unfulfilled_expectations()","unget()","unget_tk()","unimplemented?()","unimplemented?()","unique_classes()","unique_classes_and_modules()","unique_modules()","unlimited_args?()","unlock()","unmask_protected_sequences()","unmutated()","unpatch()","unpatch!()","unpatch!()","unpatch!()","unpatch_me()","unreadable_io?()","unregister()","unshift()","unstub()","unstub()","unstub()","update_aliases()","update_extends()","update_includes()","update_inherited_metadata()","update_inherited_metadata()","update_output_dir()","update_parser_of_file()","upgrade_to_class()","usable_rspec_prepended_module()","use_custom_matcher_or_delegate()","use_markup()","use_only()","use_only()","use_prefix()","used?()","used_random_seed?()","util_loader()","valid?()","valid?()","valid_action?()","valid_name?()","valid_non_kw_args?()","valid_non_kw_args?()","valid_test?()","validate_arguments!()","validate_arguments!()","validity_message()","value_representation()","values_at()","values_match?()","verb()","verb()","verbose()","verbose()","verify()","verify()","verify()","verify()","verify_all()","verify_all()","verify_constants_to_transfer!()","verify_doubled_constant_names?()","verify_invocation_order()","verify_messages_received()","verify_messages_received()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_mocks_for_rspec()","verify_no_warnings!()","verify_partial_doubles=()","verify_partial_doubles?()","verifying_double_callbacks()","visibility()","visibility()","visibility=()","visibility_for()","visibility_for()","visibility_for()","warn()","warn()","warn_about_block()","warn_about_potential_false_positives=()","warn_about_potential_false_positives?()","warn_about_should!()","warn_about_should!()","warn_about_should_unless_configured()","warn_deprecation()","warn_deprecation()","warn_unless_should_configured()","warn_with()","warn_with()","warning()","warning_notifier()","warnings=()","warnings?()","when_declaring_verifying_double()","when_first_matching_example_defined()","when_loaded()","when_loaded()","when_writing()","when_writing()","windows?()","windows?()","windows_file_path?()","with()","with()","with()","with()","with_any_keywords()","with_captures()","with_defaults()","with_documentation?()","with_entering_structure()","with_env()","with_expectation()","with_expectation()","with_failure_notifier()","with_frame()","with_isolated_stderr()","with_keywords()","with_matcher()","with_message()","with_replaced_metadata()","with_signature()","with_signature()","with_signature()","with_signature()","with_suite_hooks()","with_temporary_scope()","with_truncated_backtrace()","with_unlimited_arguments()","without_partial_double_verification()","word_sequence()","world()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","wrap()","write()","write_options()","write_style_sheet()","yield_control()","yield_receiver_to_any_instance_implementation_blocks?()","yield_receiver_to_implementation_block?()","yield_successive_args()","yield_with_args()","yield_with_no_args()","yielded_once?()","zip?()","zip_file()","ztest_file_deletes_on_failure()","|()","gemfile","gemfile.lock","readme","rakefile","setup","fourth_dimensional.gemspec","htmldiff","ldiff","sdoc","sdoc-merge","code-of-conduct","contributing","history","license","manifest","readme","rakefile","htmldiff","ldiff","copying","artistic","ds1.csv","ds2.csv","contributing","history","mit-license","manifest","readme","rakefile","command_line_usage","rakefile1","rakefile2","glossary","proto_rake","rakefile","rational","rake-0.4.14","rake-0.4.15","rake-0.5.0","rake-0.5.3","rake-0.5.4","rake-0.6.0","rake-0.7.0","rake-0.7.1","rake-0.7.2","rake-0.7.3","rake-0.8.0","rake-0.8.2","rake-0.8.3","rake-0.8.4","rake-0.8.5","rake-0.8.6","rake-0.8.7","rake-0.9.0","rake-0.9.1","rake-0.9.2.2","rake-0.9.2","rake-0.9.3","rake-0.9.4","rake-0.9.5","rake-0.9.6","rake-10.0.0","rake-10.0.1","rake-10.0.2","rake-10.0.3","rake-10.1.0","publish.rake","test_times.rake","markdown.kpeg","literals.kpeg","block_parser.ry","inline_parser.ry","license","readme","changelog","license","readme","changelog","license","readme","changelog","license","readme","changelog","license","readme","changelog","gemfile","license","readme","rakefile","index.rhtml","_context.rhtml","_head.rhtml","class.rhtml","file.rhtml","index.rhtml","github.css","main.css","panel.css","reset.css","highlight.pack.js","jquery-1.3.2.min.js","main.js","searchdoc.js","index.html","search_index.rhtml","_context.rhtml","_head.rhtml","class.rhtml","file.rhtml","index.rhtml","github.css","main.css","panel.css","reset.css","highlight.pack.js","jquery-1.3.2.min.js","main.js","searchdoc.js","index.html","search_index.rhtml","sdoc.gemspec","diff-lcs-1.3.gemspec","rake-10.5.0.gemspec","rdoc-6.1.1.gemspec","rspec-3.8.0.gemspec","rspec-core-3.8.0.gemspec","rspec-expectations-3.8.2.gemspec","rspec-mocks-3.8.0.gemspec","rspec-support-3.8.0.gemspec","sdoc-1.0.0.gemspec"],"longSearchIndex":["array","basicobject","class","diff","diff::lcs::internals","diff::lcs::ldiff","fakedate","filecreation","fileutils","fourthdimensional","fourthdimensional::error","fourthdimensional::event","lcs","lcs::balancedcallbacks","lcs::block","lcs::change","lcs::contextchange","lcs::contextdiffcallbacks","lcs::defaultcallbacks","lcs::diffcallbacks","lcs::htmldiff","lcs::htmldiff::callbacks","lcs::hunk","lcs::sdiffcallbacks","lcs::sequencecallbacks","lcs::spechelper","lcs::spechelper::matchers","module","object","pathname","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::context::section","rdoc::crossreference","rdoc::erbio","rdoc::erbpartial","rdoc::encoding","rdoc::error","rdoc::extend","rdoc::generator","rdoc::generator::darkfish","rdoc::generator::jsonindex","rdoc::generator::markup","rdoc::generator::pot","rdoc::generator::pot::messageextractor","rdoc::generator::pot::po","rdoc::generator::pot::poentry","rdoc::generator::ri","rdoc::generator::sdoc","rdoc::generator::sdoc::filestree","rdoc::ghostmethod","rdoc::i18n","rdoc::i18n::locale","rdoc::i18n::text","rdoc::include","rdoc::markdown","rdoc::markdown::literals","rdoc::markdown::literals::memoentry","rdoc::markdown::literals::parseerror","rdoc::markdown::literals::ruleinfo","rdoc::markdown::memoentry","rdoc::markdown::parseerror","rdoc::markdown::ruleinfo","rdoc::markup","rdoc::markup::attrchanger","rdoc::markup::attrspan","rdoc::markup::attributemanager","rdoc::markup::attributes","rdoc::markup::blankline","rdoc::markup::blockquote","rdoc::markup::document","rdoc::markup::formatter","rdoc::markup::formattertestcase","rdoc::markup::hardbreak","rdoc::markup::include","rdoc::markup::indentedparagraph","rdoc::markup::list","rdoc::markup::listitem","rdoc::markup::paragraph","rdoc::markup::parser","rdoc::markup::parser::error","rdoc::markup::parser::parseerror","rdoc::markup::preprocess","rdoc::markup::raw","rdoc::markup::regexphandling","rdoc::markup::rule","rdoc::markup::textformattertestcase","rdoc::markup::toansi","rdoc::markup::tobs","rdoc::markup::tohtml","rdoc::markup::tohtmlcrossref","rdoc::markup::tohtmlsnippet","rdoc::markup::tojoinedparagraph","rdoc::markup::tolabel","rdoc::markup::tomarkdown","rdoc::markup::tordoc","rdoc::markup::totableofcontents","rdoc::markup::totest","rdoc::markup::tottonly","rdoc::markup::verbatim","rdoc::metamethod","rdoc::methodattr","rdoc::mixin","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::page","rdoc::parser","rdoc::parser::c","rdoc::parser::changelog","rdoc::parser::markdown","rdoc::parser::rd","rdoc::parser::ripperstatelex","rdoc::parser::ripperstatelex::innerstatelex","rdoc::parser::ruby","rdoc::parser::rubytools","rdoc::parser::simple","rdoc::parser::text","rdoc::rd","rdoc::rd::blockparser","rdoc::rd::inline","rdoc::rd::inlineparser","rdoc::rdoc","rdoc::ri","rdoc::ri::driver","rdoc::ri::driver::error","rdoc::ri::driver::notfounderror","rdoc::ri::error","rdoc::ri::paths","rdoc::ri::task","rdoc::require","rdoc::rubygemshook","rdoc::servlet","rdoc::singleclass","rdoc::stats","rdoc::stats::normal","rdoc::stats::quiet","rdoc::stats::verbose","rdoc::store","rdoc::store::error","rdoc::store::missingfileerror","rdoc::task","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","rdoctask","rspec","rspec::callerfilter","rspec::core","rspec::core::anonymousexamplegroup","rspec::core::backtraceformatter","rspec::core::bisect","rspec::core::bisect::bisectfailederror","rspec::core::bisect::channel","rspec::core::bisect::coordinator","rspec::core::bisect::exampleminimizer","rspec::core::bisect::forkrunner","rspec::core::bisect::forkrunner::captureformatter","rspec::core::bisect::forkrunner::rundispatcher","rspec::core::bisect::notifier","rspec::core::bisect::server","rspec::core::bisect::shellcommand","rspec::core::bisect::shellrunner","rspec::core::configuration","rspec::core::configuration::deprecationreporterbuffer","rspec::core::configuration::exposecurrentexample","rspec::core::configuration::mustbeconfiguredbeforeexamplegroupserror","rspec::core::configurationoptions","rspec::core::drboptions","rspec::core::drbrunner","rspec::core::dsl","rspec::core::dsl::rspec","rspec::core::example","rspec::core::example::executionresult","rspec::core::example::procsy","rspec::core::examplegroup","rspec::core::examplestatusdumper","rspec::core::examplestatusmerger","rspec::core::examplestatusparser","rspec::core::examplestatuspersister","rspec::core::exclusionrules","rspec::core::filtermanager","rspec::core::filterrules","rspec::core::filterableitemrepository","rspec::core::filterableitemrepository::queryoptimized","rspec::core::filterableitemrepository::updateoptimized","rspec::core::flatmap","rspec::core::formatters","rspec::core::formatters::basebisectformatter","rspec::core::formatters::baseformatter","rspec::core::formatters::basetextformatter","rspec::core::formatters::bisectdrbformatter","rspec::core::formatters::bisectdebugformatter","rspec::core::formatters::bisectprogressformatter","rspec::core::formatters::consolecodes","rspec::core::formatters::deprecationformatter","rspec::core::formatters::deprecationformatter::delayedprinter","rspec::core::formatters::deprecationformatter::filestream","rspec::core::formatters::deprecationformatter::immediateprinter","rspec::core::formatters::deprecationformatter::raiseerrorstream","rspec::core::formatters::documentationformatter","rspec::core::formatters::exceptionpresenter","rspec::core::formatters::exceptionpresenter::factory","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater","rspec::core::formatters::exceptionpresenter::factory::emptybacktraceformatter","rspec::core::formatters::fallbackmessageformatter","rspec::core::formatters::helpers","rspec::core::formatters::htmlformatter","rspec::core::formatters::htmlprinter","rspec::core::formatters::htmlsnippetextractor","rspec::core::formatters::htmlsnippetextractor::coderayconverter","rspec::core::formatters::htmlsnippetextractor::nullconverter","rspec::core::formatters::jsonformatter","rspec::core::formatters::loader","rspec::core::formatters::profileformatter","rspec::core::formatters::progressformatter","rspec::core::formatters::protocol","rspec::core::formatters::snippetextractor","rspec::core::formatters::syntaxhighlighter","rspec::core::formatters::syntaxhighlighter::coderayimplementation","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation","rspec::core::formatters::syntaxhighlighter::windowsimplementation","rspec::core::hashimitatable","rspec::core::hashimitatable::classmethods","rspec::core::hooks","rspec::core::hooks::aftercontexthook","rspec::core::hooks::afterhook","rspec::core::hooks::aroundhook","rspec::core::hooks::beforehook","rspec::core::hooks::hookcollections","rspec::core::inclusionrules","rspec::core::invocations","rspec::core::invocations::bisect","rspec::core::invocations::drbwithfallback","rspec::core::invocations::initializeproject","rspec::core::invocations::printversion","rspec::core::legacyexamplegrouphash","rspec::core::memoizedhelpers","rspec::core::memoizedhelpers::classmethods","rspec::core::memoizedhelpers::contexthookmemoized","rspec::core::memoizedhelpers::contexthookmemoized::after","rspec::core::memoizedhelpers::contexthookmemoized::before","rspec::core::memoizedhelpers::nonthreadsafememoized","rspec::core::memoizedhelpers::threadsafememoized","rspec::core::metadata","rspec::core::metadata::examplegrouphash","rspec::core::metadata::examplehash","rspec::core::metadata::hashpopulator","rspec::core::metadatafilter","rspec::core::minitestassertionsadapter","rspec::core::mockingadapters","rspec::core::mockingadapters::flexmock","rspec::core::mockingadapters::mocha","rspec::core::mockingadapters::null","rspec::core::mockingadapters::rr","rspec::core::mockingadapters::rspec","rspec::core::multipleexceptionerror","rspec::core::multipleexceptionerror::interfacetag","rspec::core::notifications","rspec::core::notifications::customnotification","rspec::core::notifications::deprecationnotification","rspec::core::notifications::examplenotification","rspec::core::notifications::examplesnotification","rspec::core::notifications::failedexamplenotification","rspec::core::notifications::nullcolorizer","rspec::core::notifications::nullnotification","rspec::core::notifications::pendingexamplefailedasexpectednotification","rspec::core::notifications::pendingexamplefixednotification","rspec::core::notifications::profilenotification","rspec::core::notifications::seednotification","rspec::core::notifications::skippedexamplenotification","rspec::core::notifications::summarynotification","rspec::core::nullreporter","rspec::core::ordering","rspec::core::ordering::configurationmanager","rspec::core::ordering::custom","rspec::core::ordering::identity","rspec::core::ordering::random","rspec::core::ordering::registry","rspec::core::outputwrapper","rspec::core::parser","rspec::core::pending","rspec::core::pending::pendingexamplefixederror","rspec::core::pending::skipdeclaredinexample","rspec::core::profiler","rspec::core::projectinitializer","rspec::core::raketask","rspec::core::reporter","rspec::core::rubyproject","rspec::core::runner","rspec::core::sandbox","rspec::core::set","rspec::core::sharedcontext","rspec::core::sharedexamplegroup","rspec::core::sharedexamplegroup::registry","rspec::core::sharedexamplegroup::topleveldsl","rspec::core::sharedexamplegroupinclusionstackframe","rspec::core::sharedexamplegroupmodule","rspec::core::shellescape","rspec::core::suitehookcontext","rspec::core::testunitassertionsadapter","rspec::core::time","rspec::core::version","rspec::core::warnings","rspec::core::world","rspec::core::world::null","rspec::examplegroups","rspec::expectations","rspec::expectations::blockexpectationtarget","rspec::expectations::blocksnippetextractor","rspec::expectations::configuration","rspec::expectations::differ","rspec::expectations::expectationhelper","rspec::expectations::expectationnotmeterror","rspec::expectations::expectationtarget","rspec::expectations::expectationtarget::instancemethods","rspec::expectations::failureaggregator","rspec::expectations::legacymacheradapter","rspec::expectations::legacymatcheradapter","rspec::expectations::legacymatcheradapter::rspec1","rspec::expectations::legacymatcheradapter::rspec2","rspec::expectations::multipleexpectationsnotmeterror","rspec::expectations::negativeexpectationhandler","rspec::expectations::positiveexpectationhandler","rspec::expectations::syntax","rspec::expectations::version","rspec::matchers","rspec::matchers::aliasedmatcher","rspec::matchers::aliasedmatcherwithoperatorsupport","rspec::matchers::aliasednegatedmatcher","rspec::matchers::builtin","rspec::matchers::builtin::all","rspec::matchers::builtin::basematcher","rspec::matchers::builtin::basematcher::defaultfailuremessages","rspec::matchers::builtin::basematcher::hashformatting","rspec::matchers::builtin::be","rspec::matchers::builtin::beakindof","rspec::matchers::builtin::beaninstanceof","rspec::matchers::builtin::bebetween","rspec::matchers::builtin::becomparedto","rspec::matchers::builtin::befalsey","rspec::matchers::builtin::behelpers","rspec::matchers::builtin::benil","rspec::matchers::builtin::bepredicate","rspec::matchers::builtin::betruthy","rspec::matchers::builtin::bewithin","rspec::matchers::builtin::capturestderr","rspec::matchers::builtin::capturestdout","rspec::matchers::builtin::capturestreamtotempfile","rspec::matchers::builtin::change","rspec::matchers::builtin::changedetails","rspec::matchers::builtin::changefromvalue","rspec::matchers::builtin::changerelatively","rspec::matchers::builtin::changetovalue","rspec::matchers::builtin::compound","rspec::matchers::builtin::compound::and","rspec::matchers::builtin::compound::nestedevaluator","rspec::matchers::builtin::compound::or","rspec::matchers::builtin::compound::sequentialevaluator","rspec::matchers::builtin::containexactly","rspec::matchers::builtin::containexactly::pairingsmaximizer","rspec::matchers::builtin::cover","rspec::matchers::builtin::endwith","rspec::matchers::builtin::eq","rspec::matchers::builtin::eql","rspec::matchers::builtin::equal","rspec::matchers::builtin::exist","rspec::matchers::builtin::exist::existencetest","rspec::matchers::builtin::has","rspec::matchers::builtin::haveattributes","rspec::matchers::builtin::include","rspec::matchers::builtin::match","rspec::matchers::builtin::negativeoperatormatcher","rspec::matchers::builtin::nullcapture","rspec::matchers::builtin::operatormatcher","rspec::matchers::builtin::output","rspec::matchers::builtin::positiveoperatormatcher","rspec::matchers::builtin::raiseerror","rspec::matchers::builtin::reliablematchdata","rspec::matchers::builtin::respondto","rspec::matchers::builtin::satisfy","rspec::matchers::builtin::specificvalueschange","rspec::matchers::builtin::startandendwith","rspec::matchers::builtin::startorendwith","rspec::matchers::builtin::startwith","rspec::matchers::builtin::throwsymbol","rspec::matchers::builtin::yieldcontrol","rspec::matchers::builtin::yieldprobe","rspec::matchers::builtin::yieldsuccessiveargs","rspec::matchers::builtin::yieldwithargs","rspec::matchers::builtin::yieldwithnoargs","rspec::matchers::composable","rspec::matchers::dsl","rspec::matchers::dsl::defaultimplementations","rspec::matchers::dsl::macros","rspec::matchers::dsl::macros::deprecated","rspec::matchers::dsl::matcher","rspec::matchers::englishphrasing","rspec::matchers::expectedsformultiplediffs","rspec::matchers::failmatchers","rspec::matchers::matcherdelegator","rspec::matchers::matcherprotocol","rspec::mocks","rspec::mocks::allowancetarget","rspec::mocks::andreturnimplementation","rspec::mocks::andwraporiginalimplementation","rspec::mocks::andyieldimplementation","rspec::mocks::anyinstance","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::chain::customizations","rspec::mocks::anyinstance::errorgenerator","rspec::mocks::anyinstance::expectchainchain","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::fluentinterfaceproxy","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::positiveexpectationchain","rspec::mocks::anyinstance::proxy","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::stubchain","rspec::mocks::anyinstance::stubchainchain","rspec::mocks::anyinstanceallowancetarget","rspec::mocks::anyinstanceexpectationtarget","rspec::mocks::argumentlistmatcher","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers::anyargmatcher","rspec::mocks::argumentmatchers::anyargsmatcher","rspec::mocks::argumentmatchers::arrayincludingmatcher","rspec::mocks::argumentmatchers::basehashmatcher","rspec::mocks::argumentmatchers::booleanmatcher","rspec::mocks::argumentmatchers::ducktypematcher","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::instanceof","rspec::mocks::argumentmatchers::kindof","rspec::mocks::argumentmatchers::noargsmatcher","rspec::mocks::argumentmatchers::singletonmatcher","rspec::mocks::callbackinvocationstrategy","rspec::mocks::classnewmethodreference","rspec::mocks::classverifyingdouble","rspec::mocks::configuration","rspec::mocks::constant","rspec::mocks::constantmutator","rspec::mocks::constantmutator::basemutator","rspec::mocks::constantmutator::constanthider","rspec::mocks::constantmutator::definedconstantreplacer","rspec::mocks::constantmutator::undefinedconstantsetter","rspec::mocks::directobjectreference","rspec::mocks::double","rspec::mocks::errorgenerator","rspec::mocks::examplemethods","rspec::mocks::examplemethods::expecthost","rspec::mocks::expectchain","rspec::mocks::expectationtarget","rspec::mocks::expectationtargetmethods","rspec::mocks::implementation","rspec::mocks::instancemethodreference","rspec::mocks::instancemethodstasher","rspec::mocks::instanceverifyingdouble","rspec::mocks::marshalextension","rspec::mocks::matchers","rspec::mocks::matchers::expectationcustomization","rspec::mocks::matchers::havereceived","rspec::mocks::matchers::matcher","rspec::mocks::matchers::receive","rspec::mocks::matchers::receive::defaultdescribable","rspec::mocks::matchers::receivemessagechain","rspec::mocks::matchers::receivemessages","rspec::mocks::messagechain","rspec::mocks::messageexpectation","rspec::mocks::messageexpectation::implementationdetails","rspec::mocks::methoddouble","rspec::mocks::methodreference","rspec::mocks::minitestintegration","rspec::mocks::namedobjectreference","rspec::mocks::nestedspace","rspec::mocks::nocallbackinvocationstrategy","rspec::mocks::objectmethodreference","rspec::mocks::objectreference","rspec::mocks::objectverifyingdouble","rspec::mocks::objectverifyingdoublemethods","rspec::mocks::ordergroup","rspec::mocks::partialclassdoubleproxy","rspec::mocks::partialclassdoubleproxymethods","rspec::mocks::partialdoubleproxy","rspec::mocks::proxy","rspec::mocks::proxyfornil","rspec::mocks::rootspace","rspec::mocks::simplemessageexpectation","rspec::mocks::space","rspec::mocks::stubchain","rspec::mocks::syntax","rspec::mocks::targetbase","rspec::mocks::targetdelegationclassmethods","rspec::mocks::targetdelegationinstancemethods","rspec::mocks::testdouble","rspec::mocks::testdoubleformatter","rspec::mocks::testdoubleproxy","rspec::mocks::verifyingdouble","rspec::mocks::verifyingdouble::silentio","rspec::mocks::verifyingexistingclassnewmethoddouble","rspec::mocks::verifyingexistingmethoddouble","rspec::mocks::verifyingmessageexpectation","rspec::mocks::verifyingmethoddouble","rspec::mocks::verifyingpartialclassdoubleproxy","rspec::mocks::verifyingpartialdoubleproxy","rspec::mocks::verifyingproxy","rspec::mocks::verifyingproxymethods","rspec::mocks::version","rspec::support","rspec::support::allexceptionsexceptoneswemustnotrescue","rspec::support::blocksignature","rspec::support::comparableversion","rspec::support::differ","rspec::support::directorymaker","rspec::support::encodedstring","rspec::support::formattingsupport","rspec::support::fuzzymatcher","rspec::support::hunkgenerator","rspec::support::insubprocess","rspec::support::loosesignatureverifier","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher","rspec::support::methodsignature","rspec::support::methodsignatureexpectation","rspec::support::methodsignatureverifier","rspec::support::mutex","rspec::support::os","rspec::support::objectformatter","rspec::support::objectformatter::bigdecimalinspector","rspec::support::objectformatter::datetimeinspector","rspec::support::objectformatter::delegatorinspector","rspec::support::objectformatter::describablematcherinspector","rspec::support::objectformatter::inspectableobjectinspector","rspec::support::objectformatter::timeinspector","rspec::support::objectformatter::uninspectableobjectinspector","rspec::support::recursiveconstmethods","rspec::support::reentrantmutex","rspec::support::ruby","rspec::support::rubyfeatures","rspec::support::shellout","rspec::support::source","rspec::support::source::expressionsequencenode","rspec::support::source::node","rspec::support::source::token","rspec::support::spec","rspec::support::stderrsplitter","rspec::support::strictsignatureverifier","rspec::support::version","rspec::support::warnings","rspec::support::whitespacechecks","rspec::support::withisolatedstderr","rspechelpers","rake","rake::application","rake::cleaner","rake::dsl","rake::defaultloader","rake::earlytime","rake::filecreationtask","rake::filelist","rake::filetask","rake::fileutilsext","rake::invocationchain","rake::invocationchain::emptyinvocationchain","rake::invocationexceptionmixin","rake::latetime","rake::linkedlist","rake::linkedlist::emptylinkedlist","rake::makefileloader","rake::multitask","rake::namespace","rake::packagetask","rake::privatereader","rake::privatereader::classmethods","rake::rakefileutils","rake::rulerecursionoverflowerror","rake::scope","rake::scope::emptyscope","rake::task","rake::taskargumenterror","rake::taskarguments","rake::tasklib","rake::taskmanager","rake::testcase","rake::testcase::taskmanager","rake::testtask","rake::win32","rake::win32::win32homeerror","rakefiledefinitions","rubyrunner","sdoc","sdoc::github","sdoc::helpers","sdoc::merge","sdoc::templatable","string","testbacktracesuppression","testlinkedlist","testprivateattrs","testprivateattrs::sample","testrake","testrakeapplication","testrakeapplicationoptions","testrakebacktrace","testrakeclean","testrakecpucounter","testrakecpucounter::testclassmethod","testrakedefinitions","testrakedirectorytask","testrakedsl","testrakeearlytime","testrakeextension","testrakeextension::redirect","testrakeextension::sample","testrakefilecreationtask","testrakefilelist","testrakefilelist::filelist","testrakefilelistpathmap","testrakefiletask","testrakefileutils","testrakefileutils::badlink","testrakeftpfile","testrakefunctional","testrakeinvocationchain","testrakelatetime","testrakemakefileloader","testrakemultitask","testrakenamespace","testrakenamespace::tm","testrakepackagetask","testrakepathmap","testrakepathmapexplode","testrakepathmappartial","testrakepathnameextensions","testrakepseudostatus","testrakeraketestloader","testrakereducecompat","testrakerequire","testrakerules","testrakescope","testraketask","testraketaskargumentparsing","testraketaskarguments","testraketasklib","testraketaskmanager","testraketaskmanagerargumentresolution","testraketaskwitharguments","testraketesttask","testraketestthreadpool","testraketoplevelfunctions","testrakewin32","testrakewin32::win32","testthreadhistorydisplay","testtraceoutput","testtraceoutput::printspy","rspec::matchers::composable#&()","rake::filelist#*()","rake::filelist#*()","rdoc::markup::document#<<()","rdoc::markup::list#<<()","rdoc::markup::listitem#<<()","rdoc::markup::raw#<<()","rspec::core::set#<<()","rspec::support::encodedstring#<<()","rake::filelist#<<()","rake::filelist#<<()","lcs::change#<=>()","lcs::contextchange#<=>()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::methodattr#<=>()","rdoc::mixin#<=>()","rspec::support::comparableversion#<=>()","rake::earlytime#<=>()","rake::latetime#<=>()","lcs::change#==()","lcs::contextchange#==()","rdoc::attr#==()","rdoc::constant#==()","rdoc::context::section#==()","rdoc::markup::regexphandling#==()","rdoc::toplevel#==()","rspec::mocks::testdouble#==()","rspec::support::source::token#==()","rspec::support::stderrsplitter#==()","rake::filelist#==()","rake::filelist#==()","rake::linkedlist#==()","rspec::matchers::composable#===()","rspec::mocks::argumentmatchers::anyargmatcher#===()","rspec::mocks::argumentmatchers::arrayincludingmatcher#===()","rspec::mocks::argumentmatchers::basehashmatcher#===()","rspec::mocks::argumentmatchers::booleanmatcher#===()","rspec::mocks::argumentmatchers::ducktypematcher#===()","rspec::mocks::argumentmatchers::hashexcludingmatcher#===()","rspec::mocks::argumentmatchers::hashincludingmatcher#===()","rspec::mocks::argumentmatchers::instanceof#===()","rspec::mocks::argumentmatchers::kindof#===()","rspec::support::allexceptionsexceptoneswemustnotrescue::===()","rspec::matchers::englishphrasing::array()","lcs::lcs()","rdoc::i18n::locale::[]()","rdoc::markup::attrspan#[]()","rspec::core::filterrules#[]()","rspec::core::filterrules#[]()","rspec::core::hashimitatable#[]()","rspec::mocks::anyinstance::messagechains#[]()","rake::filelist::[]()","rake::filelist::[]()","rake::namespace#[]()","rake::task::[]()","rake::taskarguments#[]()","rake::taskmanager#[]()","rdoc::i18n::locale::[]=()","rspec::core::hashimitatable#[]=()","rspec::mocks::instanceverifyingdouble#__build_mock_proxy()","rspec::mocks::testdouble#__build_mock_proxy_unless_expired()","rspec::matchers::builtin::negativeoperatormatcher#__delegate_operator()","rspec::matchers::builtin::positiveoperatormatcher#__delegate_operator()","rspec::mocks::testdouble#__disallow_further_usage!()","rspec::mocks::verifyingdouble#__send__()","rspec::core::sharedcontext#__shared_context_recordings()","rspec::examplegroups::_base_name_for()","rspec::mocks::argumentmatchers#a_kind_of()","rspec::core::reporter#abort_with()","rdoc::markup::blankline#accept()","rdoc::markup::blockquote#accept()","rdoc::markup::document#accept()","rdoc::markup::hardbreak#accept()","rdoc::markup::indentedparagraph#accept()","rdoc::markup::list#accept()","rdoc::markup::listitem#accept()","rdoc::markup::paragraph#accept()","rdoc::markup::raw#accept()","rdoc::markup::rule#accept()","rdoc::markup::verbatim#accept()","rdoc::markup::tohtml#accept_blank_line()","rdoc::markup::tordoc#accept_blank_line()","rdoc::markup::tottonly#accept_blank_line()","rdoc::markup::tohtml#accept_block_quote()","rdoc::markup::tordoc#accept_block_quote()","rdoc::markup::tottonly#accept_block_quote()","rdoc::markup::formatter#accept_document()","rdoc::markup::totableofcontents#accept_document()","rdoc::markup::tobs#accept_heading()","rdoc::markup::tohtml#accept_heading()","rdoc::markup::tohtmlsnippet#accept_heading()","rdoc::markup::tordoc#accept_heading()","rdoc::markup::totableofcontents#accept_heading()","rdoc::markup::tottonly#accept_heading()","rdoc::markup::tordoc#accept_indented_paragraph()","rdoc::markup::tohtml#accept_list_end()","rdoc::markup::tomarkdown#accept_list_end()","rdoc::markup::tordoc#accept_list_end()","rdoc::markup::tottonly#accept_list_end()","rdoc::markup::toansi#accept_list_item_end()","rdoc::markup::tohtml#accept_list_item_end()","rdoc::markup::tohtmlsnippet#accept_list_item_end()","rdoc::markup::tomarkdown#accept_list_item_end()","rdoc::markup::tordoc#accept_list_item_end()","rdoc::markup::tottonly#accept_list_item_end()","rdoc::markup::toansi#accept_list_item_start()","rdoc::markup::tohtml#accept_list_item_start()","rdoc::markup::tohtmlsnippet#accept_list_item_start()","rdoc::markup::tomarkdown#accept_list_item_start()","rdoc::markup::tordoc#accept_list_item_start()","rdoc::markup::tottonly#accept_list_item_start()","rdoc::markup::tohtml#accept_list_start()","rdoc::markup::tohtmlsnippet#accept_list_start()","rdoc::markup::tomarkdown#accept_list_start()","rdoc::markup::tordoc#accept_list_start()","rdoc::markup::tottonly#accept_list_start()","rdoc::markup::tohtml#accept_paragraph()","rdoc::markup::tohtmlsnippet#accept_paragraph()","rdoc::markup::tojoinedparagraph#accept_paragraph()","rdoc::markup::tordoc#accept_paragraph()","rdoc::markup::tottonly#accept_paragraph()","rdoc::markup::tohtml#accept_raw()","rdoc::markup::tordoc#accept_raw()","rdoc::markup::tottonly#accept_raw()","rdoc::markup::tohtml#accept_rule()","rdoc::markup::tomarkdown#accept_rule()","rdoc::markup::tordoc#accept_rule()","rdoc::markup::tottonly#accept_rule()","rdoc::markup::tohtml#accept_verbatim()","rdoc::markup::tohtmlsnippet#accept_verbatim()","rdoc::markup::tomarkdown#accept_verbatim()","rdoc::markup::tordoc#accept_verbatim()","rdoc::markup::tottonly#accept_verbatim()","rspec::matchers::builtin::haveattributes#actual()","rspec::matchers::builtin::changedetails#actual_delta()","rspec::matchers::builtin::exist::existencetest#actual_exists?()","rspec::matchers::builtin::basematcher#actual_formatted()","rspec::mocks::messageexpectation::implementationdetails#actual_received_count_matters?()","rdoc::context#add()","rdoc::generator::pot::po#add()","rdoc::generator::sdoc::filestree#add()","rspec::core::filterrules#add()","rspec::core::filterrules#add()","rspec::core::formatters::loader#add()","rspec::core::inclusionrules#add()","rspec::core::multipleexceptionerror::interfacetag#add()","rspec::core::sharedexamplegroup::registry#add()","rspec::mocks::anyinstance::messagechains#add()","rake::filelist#add()","rake::filelist#add()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","rdoc::ri::driver#add_also_in()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rdoc::store#add_c_enclosure()","rdoc::store#add_c_variables()","rdoc::context#add_class()","rdoc::ri::driver#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","rdoc::classmodule#add_comment()","rdoc::context::section#add_comment()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","rspec::mocks::methoddouble#add_default_stub()","rake::task#add_description()","rspec::core::rubyproject::add_dir_to_load_path()","rspec::core::examplegroup::add_example()","rspec::mocks::methoddouble#add_expectation()","rspec::mocks::verifyingmethoddouble#add_expectation()","rdoc::context#add_extend()","rdoc::ri::driver#add_extends()","rdoc::ri::driver#add_extension_modules()","rspec::core::drboptions#add_failure_exit_code()","rdoc::stats#add_file()","rdoc::store#add_file()","rspec::core::drboptions#add_filter()","rdoc::rd::blockparser#add_footnote()","rspec::core::configuration#add_formatter()","rspec::core::drboptions#add_formatters()","rdoc::ri::driver#add_from()","rspec::core::drboptions#add_full_description()","rdoc::rdoc::add_generator()","rdoc::markup#add_html()","rdoc::markup::attributemanager#add_html()","rspec::core::filtermanager#add_ids()","rdoc::context#add_include()","rdoc::toplevel#add_include()","rdoc::ri::driver#add_includes()","rdoc::rd::blockparser#add_label()","rspec::core::drboptions#add_libs()","rdoc::methodattr#add_line_numbers()","rake::application#add_loader()","rspec::core::filtermanager#add_location()","rspec::mocks::proxy#add_message_expectation()","rspec::mocks::proxyfornil#add_message_expectation()","rspec::mocks::verifyingproxymethods#add_message_expectation()","rdoc::context#add_method()","rdoc::ri::driver#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::ri::driver#add_method_documentation()","rdoc::ri::driver#add_method_list()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rdoc::context#add_module_by_normal_module()","rdoc::markup::tohtmlsnippet#add_paragraph()","rake::add_rakelib()","rspec::core::configuration::add_read_only_setting()","rdoc::markup#add_regexp_handling()","rdoc::markup::attributemanager#add_regexp_handling()","rdoc::markup::formatter#add_regexp_handling_rdoclink()","rdoc::markup::formatter#add_regexp_handling_tidylink()","rdoc::context#add_require()","rspec::core::drboptions#add_requires()","testrakemultitask#add_run()","rdoc::context#add_section()","rspec::core::configuration::add_setting()","rspec::core::configuration#add_setting()","rspec::expectations::configuration#add_should_and_should_not_to()","rspec::mocks::methoddouble#add_simple_expectation()","rspec::mocks::partialdoubleproxy#add_simple_expectation()","rspec::mocks::proxy#add_simple_expectation()","rspec::mocks::methoddouble#add_simple_stub()","rspec::mocks::partialdoubleproxy#add_simple_stub()","rspec::mocks::proxy#add_simple_stub()","rspec::mocks::verifyingproxymethods#add_simple_stub()","rspec::mocks::methoddouble#add_stub()","rspec::mocks::proxy#add_stub()","rspec::mocks::proxyfornil#add_stub()","rspec::mocks::verifyingmethoddouble#add_stub()","rspec::mocks::verifyingproxymethods#add_stub()","rspec::mocks::configuration#add_stub_and_should_receive_to()","rdoc::markup::formatter#add_tag()","rake::rulerecursionoverflowerror#add_target()","rdoc::markup::textformattertestcase::add_text_tests()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rspec::core::rubyproject::add_to_load_path()","rdoc::tokenstream#add_token()","rdoc::parser::rubytools#add_token_listener()","rdoc::tokenstream#add_tokens()","rdoc::markup::formattertestcase::add_visitor_tests()","rspec::core::filterrules#add_with_low_priority()","rspec::core::filterrules#add_with_low_priority()","rspec::core::inclusionrules#add_with_low_priority()","rdoc::markup#add_word_pair()","rdoc::markup::attributemanager#add_word_pair()","lcs::change#adding?()","rspec::mocks::messageexpectation::implementationdetails#additional_expected_calls()","rspec::mocks::messageexpectation::implementationdetails#advise()","rspec::core::configuration#after()","rspec::core::hooks#after()","rspec::mocks::minitestintegration#after_teardown()","rspec::expectations::failureaggregator#aggregate()","object#aggregate_failures()","rspec::matchers#aggregate_failures()","rspec::expectations::multipleexpectationsnotmeterror#aggregation_block_label()","rspec::expectations::multipleexpectationsnotmeterror#aggregation_metadata()","rspec::core::configuration#alias_example_group_to()","rspec::core::configuration#alias_example_to()","rdoc::parser::alias_extension()","rspec::core::configuration#alias_it_behaves_like_to()","rspec::core::configuration#alias_it_should_behave_like_to()","rspec::matchers::alias_matcher()","rspec::matchers::dsl#alias_matcher()","rspec::matchers#all()","rdoc::store#all_classes()","rdoc::store#all_classes_and_modules()","rspec::core::world#all_example_groups()","rspec::core::world::null::all_example_groups()","rspec::core::world#all_examples()","rspec::mocks::anyinstance::messagechains#all_expectations_fulfilled?()","rdoc::store#all_files()","rspec::core::hooks::hookcollections#all_hooks_for()","rdoc::store#all_modules()","rake::task#all_prerequisite_tasks()","testrake#alldirs()","rspec::mocks::syntax#allow()","rspec::mocks::syntax#allow_any_instance_of()","rspechelpers#allow_deprecation()","rspec::mocks::allow_message()","rspec::mocks::examplemethods#allow_message_expectations_on_nil()","rspechelpers#allow_warning()","rspec::mocks::anyinstance::recorder#already_observing?()","rspec::mocks::argumentmatchers#an_instance_of()","diff::lcs::internals::analyze_patchset()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::singleclass#ancestors()","rdoc::store#ancestors()","rdoc::ri::driver#ancestors_of()","rspec::matchers::composable#and()","rspec::matchers::builtin::respondto#and_any_keywords()","rspec::mocks::messageexpectation#and_call_original()","rspec::matchers::builtin::respondto#and_keywords()","rspec::mocks::messageexpectation#and_raise()","rspec::mocks::messageexpectation#and_return()","rspec::mocks::messageexpectation#and_throw()","rspec::matchers::builtin::respondto#and_unlimited_arguments()","rspec::mocks::messageexpectation#and_wrap_original()","rspec::mocks::messageexpectation#and_yield()","rspec::mocks::messageexpectation::implementationdetails#and_yield_receiver_to_implementation()","rdoc::markup::formatter#annotate()","rdoc::markup::tobs#annotate()","rspec::core::world#announce_exclusion_filter()","rspec::core::world#announce_filters()","rspec::core::world#announce_inclusion_filter()","rspec::mocks::argumentmatchers#any_args()","rdoc::context#any_content()","rspec::mocks::syntax#any_instance()","rspec::mocks::rootspace#any_instance_proxy_for()","rspec::mocks::space#any_instance_proxy_for()","rspec::mocks::rootspace#any_instance_recorder_for()","rspec::mocks::space#any_instance_recorder_for()","rspec::mocks::rootspace#any_instance_recorders_from_ancestry_of()","rspec::mocks::space#any_instance_recorders_from_ancestry_of()","rspec::mocks::argumentmatchers#anything()","rspec::mocks::argumentmatchers::anythingize_lonely_keys()","rdoc::rd::inline#append()","rspec::core::filterableitemrepository::queryoptimized#append()","rspec::core::filterableitemrepository::updateoptimized#append()","rake::invocationchain#append()","rake::invocationchain::append()","rake::invocationchain::emptyinvocationchain#append()","rspec::core::configuration#append_after()","rspec::core::hooks#append_after()","rspec::core::configuration#append_before()","rspec::core::hooks#append_before()","sdoc::merge#append_path()","rake::application()","rake::application=()","rspec::mocks::classnewmethodreference::applies_to?()","rspec::core::metadatafilter::apply?()","rspec::core::configuration#apply_derived_metadata_to()","rspec::support::methodsignature#arbitrary_kw_args?()","rdoc::alias#aref()","rdoc::classmodule#aref()","rdoc::context::section#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","rdoc::generator::markup#aref_to()","rake::task#arg_names()","rdoc::anymethod#arglists()","rspec::support::source::node#args()","rspec::mocks::argumentlistmatcher#args_match?()","rspec::matchers::builtin::respondto#argument()","rspec::matchers::builtin::respondto#arguments()","rspec::core::configuration#around()","rspec::core::hooks#around()","rspec::mocks::argumentmatchers#array_including()","rspec::core::memoizedhelpers::contexthookmemoized::after::article()","rspec::core::memoizedhelpers::contexthookmemoized::before::article()","rdoc::generator::markup#as_href()","rspec::mocks::proxy#as_null_object()","rspec::mocks::syntax#as_null_object()","rspec::mocks::testdouble#as_null_object()","rdoc::markup::attributes#as_string()","rspec::mocks::objectverifyingdoublemethods#as_stubbed_const()","rspec::core::metadata::ascend()","rspec::core::rubyproject::ascend_until()","rspec::core::metadata::ascending()","rdoc::generator::darkfish#assemble_template()","rspec::matchers::builtin::yieldprobe#assert_used!()","rspec::matchers::builtin::yieldprobe#assert_valid_expect_block!()","rspec::core::minitestassertionsadapter#assertions()","rdoc::servlet#asset()","rspec::examplegroups::assign_const()","rspec::support::source#ast()","rspec::matchers::builtin::yieldcontrol#at_least()","rspec::mocks::messageexpectation#at_least()","rspec::matchers::builtin::yieldcontrol#at_most()","rspec::mocks::messageexpectation#at_most()","rspec::core::formatters::syntaxhighlighter::attempt_to_add_rspec_terms_to_coderay_keywords()","rspec::core::hashimitatable::classmethods#attr_accessor()","rdoc::markup::attributemanager#attribute()","rdoc::markup::tordoc#attributes()","rdoc::store#attributes()","rspec::core::runner::autorun()","rspec::core::runner::autorun_disabled?()","rspec::core::configuration#backtrace_exclusion_patterns()","rspec::core::configuration#backtrace_exclusion_patterns=()","rspec::expectations::configuration#backtrace_formatter()","rspec::core::configuration#backtrace_inclusion_patterns()","rspec::core::configuration#backtrace_inclusion_patterns=()","rspec::core::backtraceformatter#backtrace_line()","rspec::core::metadata::examplegrouphash::backwards_compatibility_default_proc()","lcs::spechelper#balanced_callback()","lcs::spechelper#balanced_callback_no_change()","lcs::spechelper#balanced_reverse()","lcs::spechelper#balanced_traversal()","rdoc::toplevel#base_name()","rspec::examplegroups::base_name_for()","rspec::matchers#be()","rspec::matchers#be_a()","rspec::matchers#be_a_kind_of()","rspec::matchers#be_an()","rspec::matchers#be_an_instance_of()","rspec::matchers#be_between()","rspec::matchers#be_falsey()","rspec::matchers#be_instance_of()","rspec::matchers#be_kind_of()","rspec::matchers#be_nil()","rspec::matchers#be_truthy()","rspec::matchers#be_within()","rspec::core::configuration#before()","rspec::core::hooks#before()","rspec::core::examplegroup::before_context_ivars()","rdoc::task#before_running_rdoc()","rdoc::task#before_running_rdoc()","rspec::mocks::minitestintegration#before_setup()","rspec::mocks::configuration#before_verifying_doubles()","rdoc::stats#begin_adding()","rdoc::stats::quiet#begin_adding()","rdoc::parser::binary?()","rspec::core::bisect::coordinator#bisect()","rspec::core::bisect::exampleminimizer#bisect()","rspec::core::formatters::bisectprogressformatter#bisect_aborted()","rspec::core::formatters::bisectprogressformatter#bisect_complete()","rspec::core::formatters::bisectdebugformatter#bisect_dependency_check_failed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_failed()","rspec::core::formatters::bisectdebugformatter#bisect_dependency_check_passed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_passed()","rspec::core::formatters::bisectprogressformatter#bisect_dependency_check_started()","rspec::core::bisect::shellcommand#bisect_environment_hash()","rspec::core::formatters::bisectprogressformatter#bisect_failed()","rspec::core::formatters::bisectdebugformatter#bisect_individual_run_complete()","rspec::core::formatters::bisectprogressformatter#bisect_individual_run_complete()","rspec::core::formatters::bisectdebugformatter#bisect_individual_run_start()","rspec::core::formatters::bisectdebugformatter#bisect_original_run_complete()","rspec::core::formatters::bisectprogressformatter#bisect_original_run_complete()","rspec::core::bisect::exampleminimizer#bisect_over()","rspec::core::formatters::bisectprogressformatter#bisect_repro_command()","rspec::core::formatters::bisectdebugformatter#bisect_round_detected_multiple_culprits()","rspec::core::formatters::bisectprogressformatter#bisect_round_detected_multiple_culprits()","rspec::core::formatters::bisectdebugformatter#bisect_round_ignoring_ids()","rspec::core::formatters::bisectprogressformatter#bisect_round_ignoring_ids()","rspec::core::formatters::bisectdebugformatter#bisect_round_started()","rspec::core::formatters::bisectprogressformatter#bisect_round_started()","rspec::core::configuration#bisect_runner=()","rspec::core::configuration#bisect_runner_class()","rspec::core::formatters::bisectprogressformatter#bisect_starting()","rspec::core::bisect::coordinator::bisect_with()","rdoc::markup::attributes#bitmap_for()","rdoc::methodattr#block_params=()","rspec::expectations::blocksnippetextractor#body_content_lines()","rspec::mocks::argumentmatchers#boolean()","rdoc::markdown#break_on_newline()","rspec::core::filterrules::build()","rspec::core::filterrules::build()","rspec::core::formatters::exceptionpresenter::factory#build()","rspec::mocks::anyinstance::recorder#build_alias_method_name()","rspec::mocks::methoddouble#build_expectation()","rspec::mocks::proxy#build_expectation()","rspec::core::metadata::build_hash_from()","rdoc::markup::parser#build_heading()","rdoc::tomdoc#build_heading()","rdoc::generator::jsonindex#build_index()","rdoc::markup::parser#build_list()","rdoc::markup::parser#build_paragraph()","rdoc::tomdoc#build_paragraph()","rdoc::markup::parser#build_verbatim()","rdoc::tomdoc#build_verbatim()","rspec::matchers::builtin::change#by()","rspec::matchers::builtin::change#by_at_least()","rspec::matchers::builtin::change#by_at_most()","rdoc::store#cache_path()","rdoc::stats#calculate()","rspec::core::example::procsy#call()","rspec::core::invocations::bisect#call()","rspec::core::invocations::drbwithfallback#call()","rspec::core::invocations::initializeproject#call()","rspec::core::invocations::printversion#call()","rspec::expectations::failureaggregator#call()","rspec::mocks::andreturnimplementation#call()","rspec::mocks::andwraporiginalimplementation#call()","rspec::mocks::andyieldimplementation#call()","rspec::mocks::callbackinvocationstrategy#call()","rspec::mocks::implementation#call()","rspec::mocks::nocallbackinvocationstrategy#call()","rdoc::anymethod#call_seq=()","lcs::callbacks_for()","rspec::mocks::messageexpectation::implementationdetails#called_max_times?()","rspec::mocks::simplemessageexpectation#called_max_times?()","rspec::support::rubyfeatures#caller_locations_supported?()","testrakefunctional#can_detect_signals?()","rspec::support::objectformatter::bigdecimalinspector::can_inspect?()","rspec::support::objectformatter::datetimeinspector::can_inspect?()","rspec::support::objectformatter::delegatorinspector::can_inspect?()","rspec::support::objectformatter::describablematcherinspector::can_inspect?()","rspec::support::objectformatter::inspectableobjectinspector::can_inspect?()","rspec::support::objectformatter::timeinspector::can_inspect?()","rspec::support::objectformatter::uninspectableobjectinspector::can_inspect?()","rdoc::parser::can_parse()","rdoc::parser::can_parse_by_name()","rspec::matchers::builtin::capturestderr::capture()","rspec::matchers::builtin::capturestdout::capture()","rspec::matchers::builtin::capturestreamtotempfile#capture()","rspec::matchers::builtin::nullcapture::capture()","rspec::core::bisect::server#capture_run_results()","rspec::matchers::builtin::reliablematchdata#captures()","testrakeapplication#cause_supported?()","rspec::matchers::dsl::macros#chain()","rake::invocationexceptionmixin#chain()","rake::invocationexceptionmixin#chain=()","lcs::contextdiffcallbacks#change()","lcs::defaultcallbacks::change()","lcs::defaultcallbacks::change()","lcs::defaultcallbacks::change()","lcs::sdiffcallbacks#change()","rspec::matchers#change()","rdoc::markup::attributemanager#change_attribute()","lcs::spechelper#change_diff()","rdoc::encoding::change_encoding()","rspec::core::dsl::change_global_dsl()","lcs::change#changed?()","rspec::matchers::builtin::changedetails#changed?()","rdoc::markup::attributemanager#changed_attribute_by_name()","rdoc::markup::parser#char_pos()","sdoc::merge#check_directories()","testrakefileutils#check_expansion()","rdoc::options#check_files()","rspec::support::whitespacechecks#check_for_extra_spaces()","rspec::support::whitespacechecks#check_for_tab_characters()","rspec::mocks::proxy#check_for_unexpected_arguments()","rdoc::options#check_generator()","rspec::expectations::expectationhelper::check_message()","rdoc::parser::check_modeline()","rdoc::task#check_names()","rdoc::task#check_names()","testrakefileutils#check_no_expansion()","testrakedefinitions#check_tasks()","rdoc::context#child_name()","rspec::core::examplegroup::children()","rspec::support::source::node#children()","rdoc::context#class_attributes()","rdoc::generator::darkfish#class_dir()","rdoc::generator::jsonindex#class_dir()","rdoc::generator::pot#class_dir()","rdoc::generator::sdoc#class_dir()","rdoc::ri::driver#class_document()","rspec::mocks::examplemethods#class_double()","rdoc::store#class_file()","rdoc::context#class_method_list()","rdoc::store#class_methods()","rspec::support::class_of()","rdoc::store#class_path()","rspec::mocks::examplemethods#class_spy()","rdoc::context#classes()","rdoc::ri::driver#classes()","rdoc::ri::driver#classes_and_includes_and_extends_for()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::store#classes_hash()","rspec::support::methodsignature#classify_arity()","rspec::support::blocksignature#classify_parameters()","rspec::support::methodsignature#classify_parameters()","rspec::core::filterrules#clear()","rspec::core::filterrules#clear()","rspec::core::set#clear()","rspec::mocks::methoddouble#clear()","rspec::mocks::ordergroup#clear()","rake::task#clear()","rake::task::clear()","rake::taskmanager#clear()","rake::task#clear_actions()","testrakeapplicationoptions#clear_argv()","rdoc::classmodule#clear_comment()","rake::task#clear_comments()","rspec::clear_examples()","rake::filelist#clear_exclude()","rake::filelist#clear_exclude()","rspec::matchers::clear_generated_description()","rake::task#clear_prerequisites()","rdoc::task#clobber_task_description()","rdoc::task#clobber_task_description()","rspec::core::bisect::channel#close()","rspec::core::formatters::baseformatter#close()","rspec::core::formatters::basetextformatter#close()","rspec::core::formatters::jsonformatter#close()","rspec::core::reporter#close_after()","rspec::support::source::token#closed_by?()","rdoc::parser::ruby#collect_first_comment()","rdoc::tokenstream#collect_tokens()","rspec::core::configuration#color()","rspec::expectations::configuration#color?()","rspec::mocks::configuration#color?()","rspec::support::differ#color?()","rspec::core::configuration#color_enabled?()","rspec::core::configuration#color_mode()","rspec::core::formatters::exceptionpresenter#colorized_formatted_backtrace()","rspec::core::notifications::failedexamplenotification#colorized_formatted_backtrace()","rspec::core::formatters::exceptionpresenter#colorized_message_lines()","rspec::core::notifications::failedexamplenotification#colorized_message_lines()","rspec::core::notifications::summarynotification#colorized_rerun_commands()","rspec::core::notifications::summarynotification#colorized_totals_line()","testrakefileutils#command()","rspec::core::bisect::shellcommand#command_for()","object#command_from()","rake::task#comment()","rdoc::codeobject#comment=()","rdoc::classmodule#complete()","rdoc::ri::driver#complete()","rdoc::store#complete()","rdoc::markup::document#concat()","rspec::core::shellescape#conditionally_quote()","rspec::core::formatters::consolecodes#config_colors_to_methods()","rspec::configuration()","rspec::core::mockingadapters::rspec::configuration()","rspec::expectations::configuration()","rspec::matchers::configuration()","rspec::mocks::configuration()","rspec::configure()","rspec::core::configurationoptions#configure()","rspec::core::runner#configure()","rspec::core::configuration#configure_example()","rspec::core::configuration#configure_expectation_framework()","rspec::core::configurationoptions#configure_filter_manager()","rspec::core::configuration#configure_group()","rspec::mocks::methoddouble#configure_method()","rspec::core::configuration#configure_mock_framework()","rake::linkedlist#conj()","rake::linkedlist::cons()","rake::linkedlist::emptylinkedlist::cons()","rspec::core::formatters::consolecodes#console_code_for()","rspec::support::recursiveconstmethods#const_defined_on?()","rspec::const_missing()","rspec::mocks::directobjectreference#const_to_replace()","rspec::mocks::namedobjectreference#const_to_replace()","rspec::mocks::nestedspace#constant_mutator_for()","rspec::mocks::space#constant_mutator_for()","rspec::examplegroups::constant_scope_for()","rspec::support::recursiveconstmethods#constants_defined_on()","rspec::mocks::anyinstance::chain#constrained_to_any_of?()","rspec::mocks::ordergroup#consume()","rspec::matchers#contain_exactly()","rdoc::rd::blockparser#content()","lcs::spechelper#context_diff()","rdoc::parser::changelog#continue_entry_body()","rdoc::markup#convert()","rdoc::markup::formatter#convert()","rdoc::markup::tohtmlsnippet#convert()","rdoc::markup::tolabel#convert()","rspec::core::formatters::htmlsnippetextractor::coderayconverter::convert()","rspec::core::formatters::htmlsnippetextractor::nullconverter::convert()","rdoc::markup::attributemanager#convert_attrs()","rdoc::markup::formatter#convert_flow()","rdoc::markup::tohtmlsnippet#convert_flow()","rdoc::markup::attributemanager#convert_html()","rdoc::markup::formatter#convert_regexp_handling()","rdoc::markup::tobs#convert_regexp_handling()","rdoc::markup::attributemanager#convert_regexp_handlings()","rdoc::markup::formatter#convert_string()","rdoc::markup::tobs#convert_string()","rdoc::markup::tohtml#convert_string()","sdoc::merge#copy_docs()","sdoc::merge#copy_files()","rdoc::generator::sdoc#copy_resources()","rdoc::generator::darkfish#copy_static()","rdoc::markup::attributemanager#copy_string()","lcs::spechelper#correct_backward_diff()","lcs::spechelper#correct_forward_diff()","lcs::spechelper#correct_forward_sdiff()","lcs::spechelper#correct_lcs()","rspec::support::methodsignature#could_contain_kw_args?()","testrakecpucounter::testclassmethod#count()","rspec::matchers#cover()","rdoc::stats#coverage_level=()","testrakefileutils::badlink#cp()","rspec::core::metadata::examplegrouphash::create()","rspec::core::metadata::examplehash::create()","filecreation#create_dir()","rdoc::parser::changelog#create_document()","rdoc::parser::changelog#create_entries()","filecreation#create_file()","rdoc::parser::changelog#create_items()","rake::task::create_rule()","filecreation#create_timed_files()","rdoc::markup::tohtmlcrossref#cross_reference()","rdoc::markdown#css()","rdoc::rdoc::current()","rdoc::rdoc::current=()","rspec::core::sharedexamplegroupinclusionstackframe::current_backtrace()","rspec::current_example()","rspec::current_example=()","rake::taskmanager#current_scope()","rdoc::context#current_section()","rspec::core::examplegroup::currently_executing_a_context_hook?()","rspec::core::bisect::exampleminimizer#currently_needed_ids()","rdoc::generator::markup#cvs_url()","rdoc::toplevel#cvs_url()","rdoc::generator::darkfish#debug_msg()","rdoc::generator::jsonindex#debug_msg()","rdoc::generator::sdoc#debug_msg()","rspec::core::examplegroup::declaration_locations()","rspec::mocks::examplemethods::declare_double()","rspec::mocks::examplemethods::declare_verifying_double()","rspec::support::formattingsupport#dedent()","rdoc::parser::c#deduplicate_call_seq()","rspec::core::metadata::deep_hash_dup()","rspec::mocks::errorgenerator#default_error_message()","rspec::core::configuration#default_formatter()","rspec::core::configuration#default_formatter=()","rspec::support::objectformatter::default_instance()","rdoc::ri::driver::default_options()","rspec::core::configuration#default_path=()","rspec::expectations::syntax#default_should_host()","rspec::mocks::syntax::default_should_syntax_host()","rdoc::options#default_title=()","rdoc::ri::task#defaults()","rdoc::task#defaults()","rdoc::task#defaults()","rdoc::task#define()","rdoc::task#define()","rspec::matchers::dsl#define()","rake::packagetask#define()","rake::testtask#define()","rspec::core::configuration::define_aliases()","rspec::core::configuration#define_derived_metadata()","rspec::core::examplegroup::define_example_group_method()","rspec::core::examplegroup::define_example_method()","rspec::matchers::dsl#define_negated_matcher()","rspec::core::examplegroup::define_nested_shared_group_method()","rspec::support::define_optimized_require_for_rspec()","rspec::core::configuration::define_predicate_for()","rspec::mocks::methoddouble#define_proxy_method()","rspec::core::configuration::define_reader()","rake::task::define_task()","rspec::mocks::directobjectreference#defined?()","rspec::mocks::methodreference#defined?()","rspec::mocks::namedobjectreference#defined?()","rdoc::context#defined_in?()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::markdown#definition_lists()","rspec::mocks::methoddouble#definition_target()","rspec::core::sharedexamplegroup::topleveldsl::definitions()","rspec::mocks::targetdelegationclassmethods#delegate_not_to()","rspec::mocks::targetdelegationclassmethods#delegate_to()","rspec::core::example::delegate_to_metadata()","rspec::core::examplegroup::delegate_to_metadata()","rspec::core::configuration::delegate_to_ordering_manager()","rspec::core::filterrules#delete()","rspec::core::filterrules#delete()","rspec::core::filterableitemrepository::queryoptimized#delete()","rspec::core::filterableitemrepository::updateoptimized#delete()","rspec::core::set#delete()","filecreation#delete_file()","rdoc::rubygemshook#delete_legacy_args()","lcs::change#deleting?()","rspec::core::warnings#deprecate()","rspec::support::warnings#deprecate()","rspec::core::configuration::deprecationreporterbuffer#deprecation()","rspec::core::formatters::deprecationformatter#deprecation()","rspec::core::reporter#deprecation()","rspec::core::formatters::deprecationformatter#deprecation_message_for()","rspec::core::configuration#deprecation_stream=()","rspec::core::formatters::deprecationformatter#deprecation_summary()","rspec::core::formatters::deprecationformatter::delayedprinter#deprecation_summary()","rspec::core::formatters::deprecationformatter::immediateprinter#deprecation_summary()","rspec::support::deregister_matcher_definition()","rake::dsl#desc()","rspec::core::examplegroup::descendant_filtered_examples()","rspec::core::examplegroup::descendants()","rspec::mocks::errorgenerator#describe_expectation()","rspec::core::examplegroup#described_class()","rdoc::classmodule#description()","rdoc::generator::markup#description()","rspec::core::example#description()","rspec::core::examplegroup::description()","rspec::core::filterrules#description()","rspec::core::filterrules#description()","rspec::core::notifications::failedexamplenotification#description()","rspec::core::sharedexamplegroupinclusionstackframe#description()","rspec::matchers::aliasedmatcher#description()","rspec::matchers::builtin::all#description()","rspec::matchers::builtin::basematcher#description()","rspec::matchers::builtin::beaninstanceof#description()","rspec::matchers::builtin::bebetween#description()","rspec::matchers::builtin::becomparedto#description()","rspec::matchers::builtin::bepredicate#description()","rspec::matchers::builtin::bewithin#description()","rspec::matchers::builtin::change#description()","rspec::matchers::builtin::changerelatively#description()","rspec::matchers::builtin::compound#description()","rspec::matchers::builtin::containexactly#description()","rspec::matchers::builtin::eq#description()","rspec::matchers::builtin::has#description()","rspec::matchers::builtin::haveattributes#description()","rspec::matchers::builtin::include#description()","rspec::matchers::builtin::match#description()","rspec::matchers::builtin::operatormatcher#description()","rspec::matchers::builtin::output#description()","rspec::matchers::builtin::raiseerror#description()","rspec::matchers::builtin::respondto#description()","rspec::matchers::builtin::satisfy#description()","rspec::matchers::builtin::specificvalueschange#description()","rspec::matchers::builtin::startorendwith#description()","rspec::matchers::builtin::startorendwith#description()","rspec::matchers::builtin::throwsymbol#description()","rspec::matchers::builtin::yieldsuccessiveargs#description()","rspec::matchers::builtin::yieldwithargs#description()","rspec::matchers::dsl::defaultimplementations#description()","rspec::matchers::dsl::macros#description()","rspec::mocks::argumentmatchers::anyargmatcher#description()","rspec::mocks::argumentmatchers::anyargsmatcher#description()","rspec::mocks::argumentmatchers::arrayincludingmatcher#description()","rspec::mocks::argumentmatchers::basehashmatcher#description()","rspec::mocks::argumentmatchers::booleanmatcher#description()","rspec::mocks::argumentmatchers::ducktypematcher#description()","rspec::mocks::argumentmatchers::hashexcludingmatcher#description()","rspec::mocks::argumentmatchers::hashincludingmatcher#description()","rspec::mocks::argumentmatchers::instanceof#description()","rspec::mocks::argumentmatchers::kindof#description()","rspec::mocks::argumentmatchers::noargsmatcher#description()","rspec::mocks::directobjectreference#description()","rspec::mocks::matchers::havereceived#description()","rspec::mocks::matchers::receive#description()","rspec::mocks::matchers::receivemessagechain#description()","rspec::mocks::matchers::receivemessages#description()","rspec::mocks::namedobjectreference#description()","rspec::support::methodsignature#description()","rspec::mocks::matchers::receive::defaultdescribable#description_for()","rspec::mocks::messageexpectation::implementationdetails#description_for()","rdoc::encoding::detect_encoding()","rspec::support::encodedstring#detect_source_encoding()","rspec::core::rubyproject::determine_root()","lcs#diff()","lcs::diff()","lcs::hunk#diff()","rspec::support::differ#diff()","rspec::support::differ#diff_as_object()","rspec::support::differ#diff_as_string()","lcs::block#diff_size()","rspec::matchers::dsl::macros#diffable()","rspec::matchers::builtin::basematcher#diffable?()","rspec::matchers::builtin::compound#diffable?()","rspec::matchers::builtin::eq#diffable?()","rspec::matchers::builtin::eql#diffable?()","rspec::matchers::builtin::equal#diffable?()","rspec::matchers::builtin::haveattributes#diffable?()","rspec::matchers::builtin::include#diffable?()","rspec::matchers::builtin::match#diffable?()","rspec::matchers::builtin::output#diffable?()","rspec::matchers::dsl::defaultimplementations#diffable?()","rspec::matchers::builtin::compound#diffable_matcher_list()","rspec::expectations::differ()","rdoc::classmodule#direct_ancestors()","rdoc::normalclass#direct_ancestors()","rake::dsl#directory()","rspec::core::runner::disable_autorun!()","rspec::expectations::syntax#disable_expect()","rspec::mocks::syntax::disable_expect()","rspec::core::configuration#disable_monkey_patching!()","rspec::expectations::syntax#disable_should()","rspec::mocks::syntax::disable_should()","rspec::mocks::targetdelegationclassmethods#disallow_negation()","rspec::examplegroups::disambiguate()","lcs::contextdiffcallbacks#discard_a()","lcs::defaultcallbacks::discard_a()","lcs::defaultcallbacks::discard_a()","lcs::defaultcallbacks::discard_a()","lcs::diffcallbacks#discard_a()","lcs::htmldiff::callbacks#discard_a()","lcs::sdiffcallbacks#discard_a()","lcs::contextdiffcallbacks#discard_b()","lcs::defaultcallbacks::discard_b()","lcs::defaultcallbacks::discard_b()","lcs::defaultcallbacks::discard_b()","lcs::diffcallbacks#discard_b()","lcs::htmldiff::callbacks#discard_b()","lcs::sdiffcallbacks#discard_b()","rspec::core::bisect::forkrunner::rundispatcher#dispatch_specs()","rdoc::ri::driver#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","rdoc::markup::attributemanager#display_attributes()","rdoc::ri::driver#display_class()","rspec::core::example#display_exception()","rspec::core::example#display_exception=()","rdoc::ri::driver#display_method()","rdoc::ri::driver#display_name()","rdoc::ri::driver#display_names()","rdoc::ri::driver#display_page()","rdoc::ri::driver#display_page_list()","rdoc::servlet#do_get()","rdoc::parser::c#do_aliases()","rdoc::parser::c#do_attrs()","rdoc::parser::c#do_boot_defclass()","rdoc::parser::c#do_classes()","rdoc::parser::c#do_constants()","rdoc::parser::c#do_define_class()","rdoc::parser::c#do_define_class_under()","rdoc::parser::c#do_define_module()","rdoc::parser::c#do_define_module_under()","rdoc::parser::c#do_includes()","rdoc::parser::c#do_methods()","rdoc::parser::c#do_missing()","rdoc::parser::c#do_modules()","rdoc::markup::tottonly#do_nothing()","rdoc::parser::c#do_singleton_class()","rdoc::parser::c#do_struct_define_without_accessor()","rdoc::stats#doc_stats()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rdoc::codeobject#document_children=()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::servlet#documentation_page()","rdoc::servlet#documentation_search()","rdoc::servlet#documentation_source()","rdoc::classmodule#documented?()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","rspec::expectations::negativeexpectationhandler::does_not_match?()","rspec::matchers::aliasednegatedmatcher#does_not_match?()","rspec::matchers::builtin::all#does_not_match?()","rspec::matchers::builtin::bepredicate#does_not_match?()","rspec::matchers::builtin::change#does_not_match?()","rspec::matchers::builtin::changefromvalue#does_not_match?()","rspec::matchers::builtin::changerelatively#does_not_match?()","rspec::matchers::builtin::changetovalue#does_not_match?()","rspec::matchers::builtin::compound#does_not_match?()","rspec::matchers::builtin::cover#does_not_match?()","rspec::matchers::builtin::exist#does_not_match?()","rspec::matchers::builtin::has#does_not_match?()","rspec::matchers::builtin::haveattributes#does_not_match?()","rspec::matchers::builtin::include#does_not_match?()","rspec::matchers::builtin::output#does_not_match?()","rspec::matchers::builtin::raiseerror#does_not_match?()","rspec::matchers::builtin::respondto#does_not_match?()","rspec::matchers::builtin::throwsymbol#does_not_match?()","rspec::matchers::builtin::yieldcontrol#does_not_match?()","rspec::matchers::builtin::yieldsuccessiveargs#does_not_match?()","rspec::matchers::builtin::yieldwithargs#does_not_match?()","rspec::matchers::builtin::yieldwithnoargs#does_not_match?()","rspec::mocks::matchers::havereceived#does_not_match?()","rspec::mocks::matchers::receive#does_not_match?()","rspec::mocks::matchers::receivemessagechain#does_not_match?()","rspec::mocks::matchers::receivemessages#does_not_match?()","rdoc::stats#done_adding()","rdoc::stats::quiet#done_adding()","rdoc::codeobject#done_documenting=()","rspec::mocks::examplemethods#double()","rspec::core::drbrunner#drb_argv()","rspec::core::bisect::server#drb_port()","rspec::core::drbrunner#drb_port()","rspec::mocks::argumentmatchers#duck_type()","rdoc::ri::driver::dump()","rspec::core::examplestatusdumper::dump()","rspec::core::examplestatusdumper#dump()","rspec::mocks::marshalextension::dump()","rspec::core::formatters::basetextformatter#dump_failures()","rspec::core::formatters::basetextformatter#dump_pending()","rspec::core::formatters::jsonformatter#dump_profile()","rspec::core::formatters::profileformatter#dump_profile()","rspec::core::formatters::jsonformatter#dump_profile_slowest_example_groups()","rspec::core::formatters::jsonformatter#dump_profile_slowest_examples()","rspec::core::formatters::basetextformatter#dump_summary()","rspec::core::formatters::htmlformatter#dump_summary()","rspec::core::formatters::jsonformatter#dump_summary()","rspec::mocks::marshalextension::dump_with_rspec_mocks()","rspec::mocks::marshalextension::dump_without_rspec_mocks()","testrakeextension::sample#duplicate_method()","rspec::core::example#duplicate_with()","rdoc::markup::document#each()","rdoc::ri::paths::each()","rspec::core::set#each()","rspec::support::source::node#each()","rake::linkedlist#each()","rake::taskarguments#each()","rdoc::classmodule#each_ancestor()","rspec::support::source::node#each_ancestor()","rdoc::context#each_attribute()","rdoc::context#each_classmodule()","rdoc::context#each_constant()","rdoc::context#each_extend()","rdoc::context#each_include()","rspec::core::examplegroup::each_instance_variable_for_example()","sdoc::helpers#each_letter_group()","rdoc::context#each_method()","rdoc::markup::attributes#each_name_of()","rspec::core::filterrules#each_pair()","rspec::core::filterrules#each_pair()","rdoc::codeobject#each_parent()","rdoc::context#each_section()","rspec::mocks::anyinstance::messagechains#each_unfulfilled_expectation_matching()","rake::filelist#egrep()","rake::filelist#egrep()","rdoc::markdown#emphasis()","rake::linkedlist::empty()","rdoc::comment#empty?()","rdoc::markup::document#empty?()","rdoc::markup::list#empty?()","rdoc::markup::listitem#empty?()","rspec::core::filtermanager#empty?()","rspec::core::filterrules#empty?()","rspec::core::filterrules#empty?()","rspec::core::set#empty?()","rspec::mocks::ordergroup#empty?()","rspec::support::methodsignatureexpectation#empty?()","rake::linkedlist#empty?()","rake::linkedlist::emptylinkedlist#empty?()","rspec::expectations::syntax#enable_expect()","rspec::mocks::syntax::enable_expect()","rspec::expectations::syntax#enable_should()","rspec::mocks::syntax::enable_should()","rdoc::comment#encode!()","rdoc::text::encode_fallback()","rdoc::parser::ripperstatelex::end?()","rdoc::markup::tohtml#end_accepting()","rdoc::markup::tordoc#end_accepting()","rdoc::markup::totableofcontents#end_accepting()","rdoc::markup::tottonly#end_accepting()","rspec::matchers#end_with()","rake::task#enhance()","rake::taskmanager#enhance_with_matching_rule()","rspec::core::examplegroup::ensure_example_groups_are_configured()","rspec::mocks::messageexpectation::implementationdetails#ensure_expected_ordering_received!()","rspec::mocks::proxy#ensure_implemented()","rspec::mocks::verifyingpartialdoubleproxy#ensure_implemented()","rspec::mocks::verifyingproxymethods#ensure_implemented()","rspec::mocks::verifyingproxymethods#ensure_publicly_implemented()","rspec::mocks::space#ensure_registered()","rspec::core::example::executionresult#ensure_timing_set()","testrakefileutils#env_var()","rspec::matchers#eq()","rspec::matchers#eql()","rdoc::context::section#eql?()","rdoc::toplevel#eql?()","rspec::support::source::token#eql?()","rspec::matchers#equal()","rdoc::parser::ruby#error()","rdoc::rdoc#error()","rdoc::servlet#error()","sdoc::merge#error()","rspec::mocks::error_generator()","rspec::mocks::anyinstance::error_generator()","rspec::support::methodsignatureverifier#error_message()","rspec::support::methodsignatureverifier#error_message()","testrakeextension::redirect#error_redirect()","rspec::core::shellescape#escape()","sdoc::templatable#eval_template()","rspec::core::world#everything_filtered_message()","rspec::matchers::builtin::yieldcontrol#exactly()","rspec::mocks::messageexpectation#exactly()","rspec::core::notifications::summarynotification#example_count()","rspec::core::world#example_count()","rspec::core::formatters::basebisectformatter#example_failed()","rspec::core::formatters::documentationformatter#example_failed()","rspec::core::formatters::htmlformatter#example_failed()","rspec::core::formatters::progressformatter#example_failed()","rspec::core::reporter#example_failed()","rspec::core::formatters::basebisectformatter#example_finished()","rspec::core::reporter#example_finished()","rspec::core::example#example_group()","rspec::core::dsl::example_group_aliases()","rspec::core::formatters::documentationformatter#example_group_finished()","rspec::core::profiler#example_group_finished()","rspec::core::reporter#example_group_finished()","rspec::core::formatters::baseformatter#example_group_started()","rspec::core::formatters::documentationformatter#example_group_started()","rspec::core::formatters::htmlformatter#example_group_started()","rspec::core::profiler#example_group_started()","rspec::core::reporter#example_group_started()","rspec::core::world::null::example_groups()","rspec::core::formatters::documentationformatter#example_passed()","rspec::core::formatters::htmlformatter#example_passed()","rspec::core::formatters::progressformatter#example_passed()","rspec::core::reporter#example_passed()","rspec::core::formatters::documentationformatter#example_pending()","rspec::core::formatters::htmlformatter#example_pending()","rspec::core::formatters::progressformatter#example_pending()","rspec::core::reporter#example_pending()","rspec::core::example::executionresult#example_skipped?()","rspec::core::formatters::htmlformatter#example_started()","rspec::core::profiler#example_started()","rspec::core::reporter#example_started()","rspec::core::configuration#example_status_persistence_file_path=()","rspec::core::examplegroup::examples()","rspec::core::notifications::examplesnotification#examples()","rspec::core::notifications::failedexamplenotification#exception()","rspec::core::multipleexceptionerror#exception_count_description()","rspec::expectations::multipleexpectationsnotmeterror#exception_count_description()","rdoc::options#exclude()","rspec::core::filtermanager#exclude()","rake::filelist#exclude()","rake::filelist#exclude()","rspec::core::backtraceformatter#exclude?()","rspec::core::filtermanager#exclude_only()","rspec::core::configuration#exclude_pattern=()","rspec::core::filtermanager#exclude_with_low_priority()","rake::filelist#excluded_from_list?()","rake::filelist#excluded_from_list?()","rspec::core::configuration#exclusion_filter()","rspec::core::world#exclusion_filter()","rspec::core::configuration#exclusion_filter=()","rspec::matchers::builtin::bebetween#exclusive()","rake::task#execute()","rspec::core::hooks::aroundhook#execute_with()","rspec::core::example::procsy#executed?()","rspec::matchers#exist()","rake::filelist#existing()","rake::filelist#existing()","rake::filelist#existing!()","rake::filelist#existing!()","rdoc::ri::driver#expand_class()","rdoc::ri::driver#expand_name()","rdoc::text#expand_tabs()","object#expect()","rspec::expectations::syntax#expect()","rspec::mocks::syntax#expect()","rspec::mocks::syntax#expect_any_instance_of()","rspec::mocks::anyinstance::proxy#expect_chain()","rspec::mocks::anyinstance::recorder#expect_chain()","rspec::mocks::expectchain::expect_chain_on()","rspechelpers#expect_deprecation_with_call_site()","rspechelpers#expect_deprecation_without_call_site()","rspec::expectations::syntax#expect_enabled?()","rspec::mocks::syntax::expect_enabled?()","rspec::mocks::expect_message()","rspechelpers#expect_no_deprecation()","rspechelpers#expect_no_deprecations()","rspechelpers#expect_no_warnings()","rspechelpers#expect_warn_deprecation()","rspechelpers#expect_warn_deprecation_with_call_site()","rspechelpers#expect_warning_with_call_site()","rspechelpers#expect_warning_without_call_site()","rspec::core::configuration#expect_with()","rspec::mocks::messageexpectation::implementationdetails#expectation_count_type()","rspec::core::configuration#expectation_framework=()","rspec::core::configuration#expectation_frameworks()","rspec::mocks::anyinstance::chain#expectation_fulfilled!()","rspec::mocks::anyinstance::expectchainchain#expectation_fulfilled?()","rspec::mocks::anyinstance::expectationchain#expectation_fulfilled?()","rspec::mocks::anyinstance::stubchain#expectation_fulfilled?()","rspec::mocks::errorgenerator#expectation_on_nil_message()","rspec::matchers::builtin::compound#expected()","rspec::matchers::builtin::include#expected()","rspec::matchers::dsl::matcher#expected()","rspec::mocks::messageexpectation::implementationdetails#expected_args()","object#expected_encoding?()","rspec::matchers::builtin::basematcher#expected_formatted()","rspec::mocks::messageexpectation::implementationdetails#expected_messages_received?()","rspec::matchers::builtin::basematcher#expects_call_stack_jump?()","rspec::matchers::builtin::compound#expects_call_stack_jump?()","rspec::matchers::builtin::raiseerror#expects_call_stack_jump?()","rspec::matchers::builtin::throwsymbol#expects_call_stack_jump?()","rspec::matchers::dsl::defaultimplementations#expects_call_stack_jump?()","rspec::core::configuration#expose_current_running_example_as()","rspec::core::configuration#expose_dsl_globally=()","rspec::core::configuration#expose_dsl_globally?()","rspec::core::dsl::expose_example_group_alias()","rspec::core::dsl::expose_example_group_alias_globally()","rspec::core::dsl::expose_globally!()","rspec::core::sharedexamplegroup::topleveldsl::expose_globally!()","rspec::core::dsl::exposed_globally?()","rspec::core::sharedexamplegroup::topleveldsl::exposed_globally?()","rspec::mocks::allowancetarget#expression()","rspec::mocks::anyinstanceallowancetarget#expression()","rspec::mocks::anyinstanceexpectationtarget#expression()","rspec::mocks::expectationtargetmethods#expression()","rspec::core::formatters::snippetextractor#expression_lines()","rspec::core::formatters::snippetextractor#expression_node()","rspec::core::formatters::snippetextractor#expression_outmost_node?()","pathname#ext()","rake::filelist#ext()","rake::filelist#ext()","string#ext()","rspec::core::configuration#extend()","rspec::mocks::examplemethods::extended()","rdoc::markdown::extension()","rdoc::markdown#extension()","rdoc::markdown#extension?()","rdoc::generator::pot::messageextractor#extract()","rdoc::comment#extract_call_seq()","rdoc::context::section#extract_comment()","rspec::core::formatters::snippetextractor::extract_expression_lines_at()","sdoc::merge#extract_index_path()","rspec::core::formatters::snippetextractor::extract_line_at()","rdoc::i18n::text#extract_messages()","rake::taskarguments#extras()","rspec::matchers::failmatchers#fail()","rspec::core::reporter#fail_fast_limit_met?()","rspec::matchers::failmatchers#fail_including()","rspec::expectations::fail_with()","rspec::matchers::failmatchers#fail_with()","rspec::core::example#fail_with_exception()","rspec::matchers::builtin::operatormatcher#fail_with_message()","rspec::core::notifications::examplesnotification#failed_examples()","rspec::core::notifications::summarynotification#failure_count()","rspec::expectations::legacymatcheradapter::rspec1#failure_message()","rspec::expectations::legacymatcheradapter::rspec2#failure_message()","rspec::matchers::aliasedmatcher#failure_message()","rspec::matchers::aliasednegatedmatcher#failure_message()","rspec::matchers::builtin::all#failure_message()","rspec::matchers::builtin::basematcher::defaultfailuremessages#failure_message()","rspec::matchers::builtin::be#failure_message()","rspec::matchers::builtin::bebetween#failure_message()","rspec::matchers::builtin::becomparedto#failure_message()","rspec::matchers::builtin::befalsey#failure_message()","rspec::matchers::builtin::benil#failure_message()","rspec::matchers::builtin::bepredicate#failure_message()","rspec::matchers::builtin::betruthy#failure_message()","rspec::matchers::builtin::bewithin#failure_message()","rspec::matchers::builtin::change#failure_message()","rspec::matchers::builtin::changerelatively#failure_message()","rspec::matchers::builtin::compound::and#failure_message()","rspec::matchers::builtin::compound::or#failure_message()","rspec::matchers::builtin::containexactly#failure_message()","rspec::matchers::builtin::eq#failure_message()","rspec::matchers::builtin::eql#failure_message()","rspec::matchers::builtin::equal#failure_message()","rspec::matchers::builtin::exist#failure_message()","rspec::matchers::builtin::has#failure_message()","rspec::matchers::builtin::haveattributes#failure_message()","rspec::matchers::builtin::include#failure_message()","rspec::matchers::builtin::output#failure_message()","rspec::matchers::builtin::raiseerror#failure_message()","rspec::matchers::builtin::respondto#failure_message()","rspec::matchers::builtin::satisfy#failure_message()","rspec::matchers::builtin::specificvalueschange#failure_message()","rspec::matchers::builtin::startorendwith#failure_message()","rspec::matchers::builtin::startorendwith#failure_message()","rspec::matchers::builtin::throwsymbol#failure_message()","rspec::matchers::builtin::yieldcontrol#failure_message()","rspec::matchers::builtin::yieldsuccessiveargs#failure_message()","rspec::matchers::builtin::yieldwithargs#failure_message()","rspec::matchers::builtin::yieldwithnoargs#failure_message()","rspec::matchers::dsl::macros#failure_message()","rspec::mocks::matchers::havereceived#failure_message()","rspec::matchers::dsl::macros::deprecated#failure_message_for_should()","rspec::matchers::dsl::macros::deprecated#failure_message_for_should_not()","rspec::expectations::legacymatcheradapter::rspec1#failure_message_when_negated()","rspec::expectations::legacymatcheradapter::rspec2#failure_message_when_negated()","rspec::matchers::aliasedmatcher#failure_message_when_negated()","rspec::matchers::aliasednegatedmatcher#failure_message_when_negated()","rspec::matchers::builtin::basematcher::defaultfailuremessages#failure_message_when_negated()","rspec::matchers::builtin::be#failure_message_when_negated()","rspec::matchers::builtin::becomparedto#failure_message_when_negated()","rspec::matchers::builtin::befalsey#failure_message_when_negated()","rspec::matchers::builtin::benil#failure_message_when_negated()","rspec::matchers::builtin::bepredicate#failure_message_when_negated()","rspec::matchers::builtin::betruthy#failure_message_when_negated()","rspec::matchers::builtin::bewithin#failure_message_when_negated()","rspec::matchers::builtin::change#failure_message_when_negated()","rspec::matchers::builtin::changefromvalue#failure_message_when_negated()","rspec::matchers::builtin::containexactly#failure_message_when_negated()","rspec::matchers::builtin::eq#failure_message_when_negated()","rspec::matchers::builtin::eql#failure_message_when_negated()","rspec::matchers::builtin::equal#failure_message_when_negated()","rspec::matchers::builtin::exist#failure_message_when_negated()","rspec::matchers::builtin::has#failure_message_when_negated()","rspec::matchers::builtin::haveattributes#failure_message_when_negated()","rspec::matchers::builtin::include#failure_message_when_negated()","rspec::matchers::builtin::output#failure_message_when_negated()","rspec::matchers::builtin::raiseerror#failure_message_when_negated()","rspec::matchers::builtin::respondto#failure_message_when_negated()","rspec::matchers::builtin::satisfy#failure_message_when_negated()","rspec::matchers::builtin::throwsymbol#failure_message_when_negated()","rspec::matchers::builtin::yieldcontrol#failure_message_when_negated()","rspec::matchers::builtin::yieldsuccessiveargs#failure_message_when_negated()","rspec::matchers::builtin::yieldwithargs#failure_message_when_negated()","rspec::matchers::builtin::yieldwithnoargs#failure_message_when_negated()","rspec::matchers::dsl::macros#failure_message_when_negated()","rspec::mocks::matchers::havereceived#failure_message_when_negated()","rspec::core::notifications::examplesnotification#failure_notifications()","rspec::support::failure_notifier()","rspec::support::failure_notifier=()","rspec::expectations::failureaggregator#failures()","rspec::expectations::multipleexpectationsnotmeterror#failures()","rspec::expectations::configuration#false_positives_handler()","rspec::core::filterrules#fetch()","rspec::core::filterrules#fetch()","rspec::core::ordering::registry#fetch()","rspec::core::memoizedhelpers::contexthookmemoized::fetch_or_store()","rspec::core::memoizedhelpers::nonthreadsafememoized#fetch_or_store()","rspec::core::memoizedhelpers::threadsafememoized#fetch_or_store()","rake::dsl#file()","rdoc::markup::document#file=()","rdoc::generator::darkfish#file_dir()","rdoc::generator::jsonindex#file_dir()","rdoc::generator::sdoc#file_dir()","rdoc::codeobject#file_name()","rdoc::store#files_hash()","rspec::core::configuration#files_or_directories_to_run=()","rspec::core::configuration#files_to_run()","rspec::core::configuration#filter()","rspec::core::configuration#filter=()","rspec::core::metadatafilter::filter_applies?()","rspec::core::backtraceformatter#filter_gem()","rspec::core::configuration#filter_gems_from_backtrace()","rspec::core::world#filter_manager()","rdoc::ri::driver#filter_methods()","rspec::core::configuration#filter_run()","rspec::core::configuration#filter_run_excluding()","rspec::core::configuration#filter_run_including()","rspec::core::configuration#filter_run_when_matching()","rspec::core::examplegroup::filtered_examples()","rspec::core::sharedexamplegroup::registry#find()","rdoc::parser::c#find_alias_comment()","rdoc::classmodule#find_ancestor_local_symbol()","rspec::core::examplegroup::find_and_eval_shared()","rdoc::parser::c#find_attr_comment()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","rspec::matchers::builtin::containexactly::pairingsmaximizer#find_best_solution()","rdoc::parser::c#find_body()","rdoc::store#find_c_enclosure()","rdoc::parser::c#find_class()","rdoc::parser::c#find_class_comment()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::store#find_class_named()","rdoc::store#find_class_named_from()","rdoc::store#find_class_or_module()","rdoc::toplevel#find_class_or_module()","rdoc::parser::c#find_const_comment()","rdoc::context#find_constant_named()","rdoc::context#find_enclosing_module_named()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::store#find_file_named()","rspec::core::rubyproject::find_first_parent_containing()","rdoc::markup::preprocess#find_include_file()","rdoc::context#find_instance_method_named()","rspec::core::filterableitemrepository::queryoptimized#find_items_for()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::ri::driver#find_methods()","rspec::core::bisect::exampleminimizer#find_minimal_repro()","rdoc::parser::c#find_modifiers()","rdoc::context#find_module_named()","rdoc::store#find_module_named()","rdoc::toplevel#find_module_named()","rdoc::parser::c#find_override_comment()","rdoc::ri::driver#find_pager_jruby()","rdoc::ri::driver#find_store()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","rdoc::store#find_text_page()","rdoc::store#find_unique()","lcs::diffcallbacks#finish()","rdoc::options#finish()","rspec::core::reporter#finish()","rdoc::options#finish_page_dir()","lcs::change#finished_a?()","lcs::change#finished_b?()","rspec::callerfilter::first_non_rspec_line()","rdoc::store#fix_basic_object_inheritance()","rspec::core::flatmap::flat_map()","rdoc::markup::attributemanager#flow()","rspec::core::formatters::htmlprinter#flush()","rdoc::text#flush_left()","rspec::support::rubyfeatures#foo()","rdoc::parser::for()","rspec::core::multipleexceptionerror::interfacetag::for()","rspec::core::notifications::customnotification::for()","rspec::core::notifications::examplenotification::for()","rspec::expectations::expectationtarget::for()","rspec::mocks::methodreference::for()","rspec::mocks::objectmethodreference::for()","rspec::mocks::objectreference::for()","rspec::mocks::verifyingexistingmethoddouble::for()","rspec::core::bisect::bisectfailederror::for_failed_spec_run()","rspec::core::examplegroup::for_filtered_examples()","rspec::matchers::expectedsformultiplediffs::for_many_matchers()","rspec::core::configuration#force()","rspec::core::ordering::configurationmanager#force()","rdoc::codeobject#force_documentation=()","rspec::support::rubyfeatures#fork_supported?()","rspec::mocks::testdoubleformatter::format()","rspec::support::objectformatter::format()","rspec::support::objectformatter#format()","rdoc::comment#format=()","rspec::core::backtraceformatter#format_backtrace()","rspec::core::formatters::exceptionpresenter::factory::emptybacktraceformatter::format_backtrace()","lcs::spechelper#format_diffs()","rspec::core::configuration#format_docstrings()","rspec::core::configuration#format_docstrings_block()","rspec::core::formatters::helpers::format_duration()","rspec::core::formatters::helpers::format_seconds()","rspec::core::formatters::exceptionpresenter#formatted_backtrace()","rspec::core::notifications::failedexamplenotification#formatted_backtrace()","rspec::core::formatters::exceptionpresenter#formatted_cause()","rspec::core::notifications::summarynotification#formatted_duration()","rspec::core::sharedexamplegroupinclusionstackframe#formatted_inclusion_location()","rspec::core::notifications::summarynotification#formatted_load_time()","rdoc::generator::markup#formatter()","rdoc::ri::driver#formatter()","rspec::core::configuration#formatter=()","rspec::core::configuration#formatter_loader()","rspec::core::configuration#formatters()","rspec::core::formatters::loader::formatters()","rspec::core::mockingadapters::flexmock::framework_name()","rspec::core::mockingadapters::mocha::framework_name()","rspec::core::mockingadapters::rr::framework_name()","rspec::core::mockingadapters::rspec::framework_name()","rspec::mocks::testdouble#freeze()","rdoc::store#friendly_path()","rspec::matchers::builtin::change#from()","rspec::matchers::builtin::changetovalue#from()","rspec::matchers::expectedsformultiplediffs::from()","lcs::change::from_a()","lcs::contextchange::from_a()","rspec::support::source::from_file()","rspec::core::notifications::deprecationnotification::from_hash()","rdoc::classmodule::from_module()","rspec::core::configuration#full_backtrace=()","rspec::core::backtraceformatter#full_backtrace?()","rspec::core::configuration#full_backtrace?()","rake::task#full_comment()","rspec::core::configuration#full_description()","rspec::core::configuration#full_description=()","rdoc::classmodule#full_name()","rdoc::constant#full_name()","rdoc::context#full_name()","rdoc::methodattr#full_name()","rdoc::mixin#full_name()","rdoc::toplevel#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rspec::core::formatters::exceptionpresenter#fully_formatted()","rspec::core::notifications::failedexamplenotification#fully_formatted()","rspec::core::notifications::seednotification#fully_formatted()","rspec::core::notifications::skippedexamplenotification#fully_formatted()","rspec::core::notifications::summarynotification#fully_formatted()","rspec::core::notifications::examplesnotification#fully_formatted_failed_examples()","rspec::core::formatters::exceptionpresenter#fully_formatted_lines()","rspec::core::notifications::failedexamplenotification#fully_formatted_lines()","rspec::core::notifications::examplesnotification#fully_formatted_pending_examples()","rdoc::rdoc#gather_files()","rdoc::ri::paths::gem_dir()","rdoc::ri::paths::gemdirs()","rdoc::parser::c#gen_body_table()","rdoc::parser::c#gen_const_table()","rdoc::markup::formatter::gen_relative_url()","rdoc::generator::darkfish#gen_sub_directories()","rdoc::markup::tohtml#gen_url()","rdoc::markup::tohtmlcrossref#gen_url()","rdoc::markup::tohtmlsnippet#gen_url()","rdoc::markup::tomarkdown#gen_url()","rdoc::generator::darkfish#generate()","rdoc::generator::jsonindex#generate()","rdoc::generator::pot#generate()","rdoc::generator::ri#generate()","rdoc::generator::sdoc#generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","rdoc::generator::darkfish#generate_class()","rdoc::generator::darkfish#generate_class_files()","rdoc::generator::sdoc#generate_class_files()","rdoc::generator::sdoc#generate_class_tree()","rdoc::generator::sdoc#generate_class_tree_level()","rspec::mocks::messageexpectation::implementationdetails#generate_error()","rdoc::generator::darkfish#generate_file_files()","rdoc::generator::sdoc#generate_file_files()","rdoc::generator::sdoc#generate_file_tree()","rdoc::generator::sdoc#generate_file_tree_level()","rdoc::generator::jsonindex#generate_gzipped()","rdoc::generator::darkfish#generate_index()","rdoc::generator::sdoc#generate_index_file()","sdoc::merge#generate_index_file()","rdoc::generator::darkfish#generate_page()","rdoc::generator::sdoc#generate_search_index()","rdoc::generator::darkfish#generate_servlet_not_found()","rdoc::generator::darkfish#generate_servlet_root()","rdoc::generator::darkfish#generate_table_of_contents()","rspec::matchers::generated_description()","rdoc::rubygemshook::generation_hook()","rdoc::options#generator_descriptions()","rdoc::servlet#generator_for()","rdoc::markup::parser#get()","rspec::matchers::builtin::operatormatcher::get()","rdoc::parser::ruby#get_bool()","rdoc::parser::ruby#get_class_or_module()","rdoc::parser::ruby#get_class_specification()","rspec::support::recursiveconstmethods#get_const_defined_on()","rdoc::parser::ruby#get_constant()","rdoc::parser::ruby#get_included_module_with_optional_parens()","testprivateattrs::sample#get_reader()","rdoc::generator::darkfish#get_sorted_module_list()","rdoc::parser::ripperstatelex#get_squashed_tk()","rdoc::generator::darkfish#get_svninfo()","rdoc::parser::ruby#get_symbol_or_name()","rdoc::parser::rubytools#get_tk()","rdoc::parser::rubytools#get_tk_until()","rdoc::parser::rubytools#get_tkread()","rdoc::markdown#github()","sdoc::github#github_url()","rake::filelist::glob()","rake::filelist::glob()","rdoc::stats#great_job()","rdoc::parser::changelog#group_entries()","sdoc::helpers#group_name()","rake::filelist#gsub()","rake::filelist#gsub()","rake::filelist#gsub!()","rake::filelist#gsub!()","rdoc::markup::preprocess#handle()","rdoc::parser::c#handle_attr()","rdoc::parser::c#handle_class_module()","rdoc::parser::c#handle_constants()","rdoc::markup::preprocess#handle_directive()","rspec::expectations::expectationhelper::handle_failure()","rdoc::parser::c#handle_ifdefs_in()","rspec::core::runner::handle_interrupt()","rspec::expectations::negativeexpectationhandler::handle_matcher()","rspec::expectations::positiveexpectationhandler::handle_matcher()","rdoc::parser::c#handle_method()","rspec::mocks::ordergroup#handle_order_constraint()","rdoc::rdoc#handle_pipe()","rdoc::markup::tomarkdown#handle_rdoc_link()","rdoc::markup::tohtmlcrossref#handle_regexp_crossref()","rdoc::markup::tohtmlsnippet#handle_regexp_crossref()","rdoc::markup::tolabel#handle_regexp_crossref()","rdoc::markup::tohtml#handle_regexp_hard_break()","rdoc::markup::tohtmlsnippet#handle_regexp_hard_break()","rdoc::markup::tomarkdown#handle_regexp_hard_break()","rdoc::markup::tordoc#handle_regexp_hard_break()","rdoc::markup::tohtml#handle_regexp_hyperlink()","rdoc::markup::tohtmlcrossref#handle_regexp_hyperlink()","rdoc::markup::tohtml#handle_regexp_rdoclink()","rdoc::markup::tohtmlcrossref#handle_regexp_rdoclink()","rdoc::markup::tomarkdown#handle_regexp_rdoclink()","rdoc::markup::tordoc#handle_regexp_suppressed_crossref()","rdoc::markup::tohtml#handle_regexp_tidylink()","rdoc::markup::tolabel#handle_regexp_tidylink()","rdoc::markup::tomarkdown#handle_regexp_tidylink()","rspec::mocks::instancemethodstasher#handle_restoration_failures()","rdoc::parser::c#handle_singleton()","rdoc::parser::c#handle_tab_width()","rspec::matchers::builtin::yieldprobe#has_block?()","rspec::matchers::builtin::basematcher::defaultfailuremessages::has_default_failure_messages?()","rspec::mocks::anyinstance::messagechains#has_expectation?()","rake::taskarguments#has_key?()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher#has_kw_args_in?()","rspec::support::methodsignature#has_kw_args_in?()","rspec::mocks::proxy#has_negative_expectation?()","rspec::support::stderrsplitter#has_output?()","rdoc::toplevel#hash()","rspec::core::hashimitatable::classmethods#hash_attribute_names()","rspec::mocks::argumentmatchers#hash_excluding()","rspec::mocks::argumentmatchers#hash_including()","rspec::mocks::argumentmatchers#hash_not_including()","rspec::core::metadata::examplegrouphash::hash_with_backwards_compatibility_default_proc()","rspec::matchers#have_attributes()","sdoc::github#have_git?()","rspec::mocks::examplemethods#have_received()","object#have_successful_no_warnings_output()","lcs::spechelper#hello()","lcs::spechelper#hello_ary()","rspec::mocks::constant#hidden?()","rspec::mocks::constantmutator::hide()","rspec::mocks::examplemethods#hide_const()","rspec::core::formatters::syntaxhighlighter#highlight()","rspec::core::formatters::syntaxhighlighter::coderayimplementation::highlight_syntax()","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation::highlight_syntax()","rspec::core::formatters::syntaxhighlighter::nosyntaxhighlightingimplementation::highlight_syntax()","rdoc::ri::paths::home_dir()","rspec::core::hooks::aroundhook#hook_description()","rspec::core::memoizedhelpers::contexthookmemoized::after::hook_expression()","rspec::core::memoizedhelpers::contexthookmemoized::before::hook_expression()","rspec::core::memoizedhelpers::contexthookmemoized::after::hook_intention()","rspec::core::memoizedhelpers::contexthookmemoized::before::hook_intention()","rspec::core::configuration#hooks()","rspec::core::hooks#hooks()","rdoc::markdown#html()","rdoc::markup::tohtml#html_list_name()","rdoc::markup::tohtmlsnippet#html_list_name()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","rdoc::context#http_url()","rdoc::toplevel#http_url()","rspec::support::hunkgenerator#hunks()","rspec::core::example#id()","rspec::core::examplegroup::id()","rspec::core::metadata::id_from()","rspec::core::examplegroup::idempotently_define_singleton_method()","rspec::mocks::constantmutator::basemutator#idempotently_reset()","rdoc::servlet#if_modified_since()","rdoc::codeobject#ignore()","rdoc::markup::formatter#ignore()","rake::testcase#ignore_deprecations()","rdoc::codeobject#ignored?()","rspec::mocks::messageexpectation::implementationdetails#ignoring_args?()","rspec::mocks::methodreference#implemented?()","rake::dsl#import()","rspec::matchers::builtin::basematcher::hashformatting::improve_hash_formatting()","rdoc::context::section#in_files()","rake::taskmanager#in_namespace()","rdoc::ri::driver#in_path?()","rspec::core::configuration#in_project_source_dir_regex()","rspec::support::insubprocess#in_sub_process()","rspec::support::insubprocess#in_sub_process_if_possible()","rdoc::markup::formatter#in_tt?()","rspec::core::configuration#include()","rspec::core::filtermanager#include()","rspec::matchers#include()","rake::filelist#include()","rake::filelist#include()","rspec::core::set#include?()","rspec::expectations::configuration#include_chain_clauses_in_custom_matcher_descriptions?()","rspec::core::configuration#include_context()","rspec::core::examplegroup::include_context()","rspec::core::filterrules#include_example?()","rspec::core::filterrules#include_example?()","rspec::core::inclusionrules#include_example?()","rspec::core::examplegroup::include_examples()","rdoc::markup::preprocess#include_file()","rspec::core::sharedexamplegroupmodule#include_in()","rspec::core::filtermanager#include_only()","sdoc::templatable#include_template()","rspec::core::filtermanager#include_with_low_priority()","rspec::core::hashimitatable::included()","rspec::core::sharedcontext#included()","rspec::core::sharedexamplegroupmodule#included()","rspec::mocks::examplemethods::included()","rspec::core::configuration#inclusion_filter()","rspec::core::world#inclusion_filter()","rspec::core::configuration#inclusion_filter=()","rspec::matchers::builtin::bebetween#inclusive()","rspec::mocks::messageexpectation::implementationdetails#increase_actual_received_count!()","rdoc::generator::jsonindex#index_classes()","rdoc::generator::jsonindex#index_methods()","rdoc::generator::jsonindex#index_pages()","rdoc::generator::sdoc#index_path()","rspec::core::formatters::basebisectformatter::inherited()","rspec::mocks::argumentmatchers::singletonmatcher::inherited()","rake::application#init()","rake::packagetask#init()","rdoc::markup::toansi#init_tags()","rdoc::markup::tobs#init_tags()","rdoc::markup::tohtml#init_tags()","rdoc::markup::tomarkdown#init_tags()","rdoc::markup::tordoc#init_tags()","rspec::mocks::andwraporiginalimplementation#initial_action=()","rdoc::generator::pot#initialize()","rdoc::generator::ri#initialize()","rdoc::rd::inline#initialize()","rspec::matchers::matcherdelegator#initialize_copy()","rdoc::context#initialize_methods_etc()","rdoc::rd::inlineparser#inline()","rspec::mocks::andwraporiginalimplementation#inner_action()","rspec::mocks::andwraporiginalimplementation#inner_action=()","lcs::change#inspect()","lcs::contextchange#inspect()","rspec::core::example#inspect()","rspec::core::example::procsy#inspect()","rspec::core::examplegroup#inspect()","rspec::core::sharedexamplegroupmodule#inspect()","rspec::matchers::dsl::matcher#inspect()","rspec::mocks::constant#inspect()","rspec::mocks::messageexpectation#inspect()","rspec::mocks::testdouble#inspect()","rspec::support::objectformatter::bigdecimalinspector#inspect()","rspec::support::objectformatter::datetimeinspector#inspect()","rspec::support::objectformatter::delegatorinspector#inspect()","rspec::support::objectformatter::describablematcherinspector#inspect()","rspec::support::objectformatter::inspectableobjectinspector#inspect()","rspec::support::objectformatter::timeinspector#inspect()","rspec::support::objectformatter::uninspectableobjectinspector#inspect()","rspec::support::source#inspect()","rspec::support::source::node#inspect()","rspec::support::source::token#inspect()","rake::linkedlist#inspect()","rspec::core::example#inspect_output()","rdoc::rdoc#install_siginfo_handler()","rspec::core::runner::installed_at_exit?()","rdoc::servlet#installed_docs()","rdoc::context#instance_attributes()","rspec::mocks::examplemethods#instance_double()","rspec::core::example#instance_exec()","rdoc::context#instance_method_list()","rspec::mocks::methodreference::instance_method_visibility_for()","rdoc::store#instance_methods()","rspec::mocks::argumentmatchers#instance_of()","rspec::mocks::examplemethods#instance_spy()","rspec::mocks::anyinstance::recorder#instance_that_received()","rdoc::ri::driver#interactive()","rspec::expectations::legacymatcheradapter::rspec1::interface_matches?()","rspec::expectations::legacymatcheradapter::rspec2::interface_matches?()","rake::taskmanager#intern()","rspec::mocks::errorgenerator#intro()","diff::lcs::internals::intuit_diff_direction()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher#invalid_kw_args_from()","rspec::support::methodsignature#invalid_kw_args_from()","rake::task#investigation()","rspec::core::runner::invoke()","rspec::mocks::messageexpectation::implementationdetails#invoke()","rspec::mocks::simplemessageexpectation#invoke()","rake::task#invoke()","testrakebacktrace#invoke()","testrakereducecompat#invoke_normal()","rspec::mocks::messageexpectation::implementationdetails#invoke_without_incrementing_received_count()","rspec::mocks::ordergroup#invoked()","rake::filelist#is_a?()","rake::filelist#is_a?()","rspec::support::is_a_matcher?()","rdoc::constant#is_alias_for()","rspec::core::memoizedhelpers#is_expected()","rspec::core::memoizedhelpers::contexthookmemoized::isolate_for_context_hook()","rspec::core::filterableitemrepository::queryoptimized#items_for()","rspec::core::filterableitemrepository::updateoptimized#items_for()","rspec::support::ruby#jruby?()","rspec::support::ruby#jruby_9000?()","rspec::support::ruby#jruby_version()","rspec::support::source::token#keyword?()","rspec::support::methodsignatureexpectation#keywords=()","rspec::mocks::argumentmatchers#kind_of()","rake::filelist#kind_of?()","rake::filelist#kind_of?()","rspec::mocks::anyinstance::proxy#klass()","rspec::support::objectformatter::uninspectableobjectinspector#klass()","rspec::support::rubyfeatures#kw_args_supported?()","rdoc::markup::list#last()","sdoc::github#last_commit_sha1()","rspec::matchers::last_description()","rdoc::toplevel#last_modified()","rspec::core::configuration#last_run_statuses()","diff::lcs::internals::lcs()","lcs#lcs()","lcs::lcs()","rspec::core::formatters::snippetextractor::least_indentation_from()","rdoc::markup::listitem#length()","rspec::core::memoizedhelpers::classmethods#let()","rspec::core::memoizedhelpers::classmethods#let!()","rspec::core::configuration#libs=()","rdoc::rd::blockparser#line_index()","rspec::core::formatters::snippetextractor#line_range_of_expression()","rspec::core::formatters::snippetextractor#line_range_of_location_nodes_in_expression()","rspec::support::source#lines()","rspec::core::formatters::htmlsnippetextractor#lines_around()","rdoc::markup::tohtmlcrossref#link()","rdoc::markdown#link_to()","rspec::matchers::englishphrasing::list()","rdoc::markup::tohtml#list_end_for()","rdoc::rdoc#list_files_in_directory()","rdoc::markdown#list_item_from()","rdoc::markup::tohtml#list_item_start()","rdoc::markup::tohtmlsnippet#list_item_start()","rdoc::ri::driver#list_known_classes()","rdoc::ri::driver#list_methods_matching()","testrakefileutils::badlink#ln()","rdoc::i18n::locale#load()","rake::defaultloader#load()","rdoc::store#load_all()","object#load_all_files()","rdoc::store#load_cache()","rdoc::store#load_class()","rdoc::store#load_class_data()","rspec::core::examplestatuspersister::load_from()","rdoc::ri::driver#load_method()","rdoc::store#load_method()","rdoc::ri::driver#load_methods_matching()","rdoc::rdoc#load_options()","rdoc::store#load_page()","testrakefiletask#load_phony()","rake::load_rakefile()","rake::application#load_rakefile()","rdoc::rubygemshook::load_rdoc()","rspec::core::configuration#load_spec_files()","rdoc::parser::c#load_variable_map()","rdoc::load_yaml()","rspec::support::source::node#location()","rspec::support::source::token#location()","rspec::core::formatters::snippetextractor#location_nodes_at_beginning_line()","rspec::core::example#location_rerun_argument()","rspec::core::metadata::location_tuple_from()","rspec::support::mutex#lock()","rdoc::parser::c#look_for_directives_in()","rdoc::parser::ruby#look_for_directives_in()","rake::taskmanager#lookup()","rdoc::ri::driver#lookup_method()","rdoc::store#main()","rdoc::store#main=()","rake::linkedlist::make()","rspec::core::formatters::htmlprinter#make_example_group_header_red()","rspec::core::formatters::htmlprinter#make_example_group_header_yellow()","rspec::core::formatters::htmlprinter#make_header_red()","rspec::core::formatters::htmlprinter#make_header_yellow()","rdoc::parser::ruby#make_message()","rdoc::store#make_variable_map()","lcs::spechelper#map_diffs()","lcs::spechelper#map_to_no_change()","rspec::core::pending::mark_fixed!()","rspec::core::pending::mark_pending!()","rspec::core::pending::mark_skipped!()","rdoc::text#markup()","rdoc::methodattr#markup_code()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::constant#marshal_dump()","rdoc::context::section#marshal_dump()","rdoc::toplevel#marshal_dump()","rspec::support::insubprocess#marshal_dump_with_unmarshable_object_handling()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::constant#marshal_load()","rdoc::context::section#marshal_load()","rdoc::markup::attributemanager#mask_protected_sequences()","lcs::defaultcallbacks::match()","lcs::defaultcallbacks::match()","lcs::defaultcallbacks::match()","lcs::diffcallbacks#match()","lcs::htmldiff::callbacks#match()","lcs::sdiffcallbacks#match()","rspec::matchers#match()","rspec::matchers::dsl::macros#match()","rspec::matchers#match_array()","rspec::matchers::dsl::macros::deprecated#match_for_should()","rspec::matchers::dsl::macros::deprecated#match_for_should_not()","rspec::matchers::builtin::basematcher#match_unless_raises()","rspec::matchers::dsl::macros#match_unless_raises()","rspec::matchers::dsl::macros#match_when_negated()","rspec::matchers::dsl#matcher()","rspec::support::matcher_definitions()","rspec::matchers::builtin::compound::nestedevaluator#matcher_matches?()","rspec::matchers::builtin::compound::sequentialevaluator#matcher_matches?()","rspec::matchers::builtin::basematcher::matcher_name()","rspec::matchers::builtin::basematcher#matcher_name()","rspec::matchers::aliasednegatedmatcher#matches?()","rspec::matchers::builtin::basematcher#matches?()","rspec::matchers::builtin::bebetween#matches?()","rspec::matchers::builtin::becomparedto#matches?()","rspec::matchers::builtin::bepredicate#matches?()","rspec::matchers::builtin::bewithin#matches?()","rspec::matchers::builtin::change#matches?()","rspec::matchers::builtin::changerelatively#matches?()","rspec::matchers::builtin::cover#matches?()","rspec::matchers::builtin::exist#matches?()","rspec::matchers::builtin::has#matches?()","rspec::matchers::builtin::haveattributes#matches?()","rspec::matchers::builtin::include#matches?()","rspec::matchers::builtin::output#matches?()","rspec::matchers::builtin::raiseerror#matches?()","rspec::matchers::builtin::respondto#matches?()","rspec::matchers::builtin::satisfy#matches?()","rspec::matchers::builtin::specificvalueschange#matches?()","rspec::matchers::builtin::throwsymbol#matches?()","rspec::matchers::builtin::yieldcontrol#matches?()","rspec::matchers::builtin::yieldsuccessiveargs#matches?()","rspec::matchers::builtin::yieldwithargs#matches?()","rspec::matchers::builtin::yieldwithnoargs#matches?()","rspec::mocks::matchers::havereceived#matches?()","rspec::mocks::matchers::receive#matches?()","rspec::mocks::matchers::receivemessagechain#matches?()","rspec::mocks::matchers::receivemessages#matches?()","rspec::mocks::messageexpectation::implementationdetails#matches?()","rspec::mocks::simplemessageexpectation#matches?()","rspec::mocks::anyinstance::chain#matches_args?()","rspec::mocks::messageexpectation::implementationdetails#matches_at_least_count?()","rspec::mocks::messageexpectation::implementationdetails#matches_at_most_count?()","rspec::mocks::messageexpectation::implementationdetails#matches_exact_count?()","rspec::mocks::messageexpectation::implementationdetails#matches_name_but_not_args()","rspec::support::encodedstring#matching_encoding()","rspec::core::hooks::hookcollections#matching_hooks_for()","rspec::support::methodsignatureexpectation#max_count=()","rspec::expectations::configuration#max_formatted_output_length=()","rake::invocationchain#member?()","rake::invocationchain::emptyinvocationchain#member?()","lcs::hunk#merge()","rdoc::classmodule#merge()","rdoc::generator::pot::poentry#merge()","rdoc::markup::document#merge()","rdoc::markup::raw#merge()","rspec::core::examplestatusmerger::merge()","rspec::core::examplestatusmerger#merge()","rspec::core::set#merge()","sdoc::merge#merge()","sdoc::merge#merge_search_index()","sdoc::merge#merge_tree()","rdoc::markup::document#merged?()","rspec::core::formatters::basetextformatter#message()","rspec::core::formatters::fallbackmessageformatter#message()","rspec::core::formatters::jsonformatter#message()","rspec::core::multipleexceptionerror#message()","rspec::core::reporter#message()","rspec::expectations::multipleexpectationsnotmeterror#message()","rake::rulerecursionoverflowerror#message()","rspec::mocks::methoddouble#message_expectation_class()","rspec::mocks::verifyingmethoddouble#message_expectation_class()","rspec::core::formatters::exceptionpresenter#message_lines()","rspec::core::notifications::failedexamplenotification#message_lines()","rspec::mocks::partialdoubleproxy#message_received()","rspec::mocks::proxy#message_received()","rspec::matchers::expectedsformultiplediffs#message_with_diff()","rspec::mocks::proxy#messages_arg_list()","rspec::core::anonymousexamplegroup::metadata()","rspec::core::examplegroup::metadata()","rspec::mocks::errorgenerator#method_call_args_description()","rspec::mocks::methodreference::method_defined_at_any_visibility?()","rdoc::ri::driver#method_document()","rspec::mocks::partialclassdoubleproxymethods#method_double_from_ancestor_for()","rspec::mocks::proxy#method_double_if_exists_for_message()","rdoc::store#method_file()","rspec::support::method_handle_for()","rspec::mocks::instancemethodstasher#method_is_stashed?()","rspec::core::outputwrapper#method_missing()","rspec::matchers::aliasedmatcher#method_missing()","rspec::matchers::matcherdelegator#method_missing()","rspec::mocks::anyinstance::fluentinterfaceproxy#method_missing()","rspec::mocks::verifyingdouble#method_missing()","rspec::mocks::verifyingdouble::silentio::method_missing()","rspec::support::stderrsplitter#method_missing()","rake::taskarguments#method_missing()","rspec::mocks::verifyingpartialdoubleproxy#method_reference()","rspec::mocks::verifyingproxy#method_reference()","rdoc::ri::driver#method_type()","rspec::mocks::methodreference::method_visibility_for()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","rspec::support::methodsignatureexpectation#min_count=()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher#missing_kw_args_from()","rspec::support::methodsignature#missing_kw_args_from()","rspec::support::directorymaker::mkdir_p()","rspec::core::configuration#mock_framework()","rspec::core::configuration#mock_framework=()","rspec::core::configuration#mock_with()","rspec::expectations::expectationhelper::modern_matcher_from()","rdoc::mixin#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","rdoc::store#module_names()","rspec::support::rubyfeatures#module_prepends_supported?()","rspec::support::rubyfeatures#module_refinement_supported?()","rdoc::context#modules()","rdoc::context#modules_hash()","rdoc::store#modules_hash()","rspec::core::formatters::htmlprinter#move_progress()","rspec::support::ruby#mri?()","rake::dsl#multitask()","rspec::mocks::constantmutator::mutate()","rspec::mocks::constantmutator::constanthider#mutate()","rspec::mocks::constantmutator::definedconstantreplacer#mutate()","rspec::mocks::constantmutator::undefinedconstantsetter#mutate()","rspec::mocks::constant#mutated?()","rdoc::anymethod#name()","rdoc::ri::driver::notfounderror#name()","rspec::core::bisect::forkrunner::name()","rspec::core::bisect::shellrunner::name()","rspec::matchers::builtin::capturestderr::name()","rspec::matchers::builtin::capturestdout::name()","rspec::matchers::builtin::nullcapture::name()","rspec::mocks::matchers::havereceived#name()","rspec::mocks::matchers::receive#name()","rspec::mocks::matchers::receivemessagechain#name()","rspec::mocks::matchers::receivemessages#name()","rake::task#name()","rdoc::classmodule#name=()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","rdoc::ri::driver#name_regexp()","rspec::matchers::builtin::reliablematchdata#names()","rake::dsl#namespace()","rspec::support::objectformatter::uninspectableobjectinspector#native_object_id()","rake::filecreationtask#needed?()","rake::filetask#needed?()","rake::task#needed?()","rspec::mocks::messageexpectation::implementationdetails#negative?()","rspec::mocks::messageexpectation::implementationdetails#negative_expectation_for?()","rspec::mocks::anyinstance::chain#never()","rspec::mocks::messageexpectation#never()","fourthdimensional::event::new()","lcs::block::new()","lcs::change::new()","lcs::contextchange::new()","lcs::diffcallbacks::new()","lcs::htmldiff::new()","lcs::htmldiff::callbacks::new()","lcs::hunk::new()","lcs::sdiffcallbacks::new()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::context::section::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::generator::darkfish::new()","rdoc::generator::jsonindex::new()","rdoc::generator::pot::messageextractor::new()","rdoc::generator::pot::po::new()","rdoc::generator::pot::poentry::new()","rdoc::generator::sdoc::new()","rdoc::i18n::locale::new()","rdoc::i18n::text::new()","rdoc::markdown::new()","rdoc::markup::new()","rdoc::markup::attrspan::new()","rdoc::markup::attributemanager::new()","rdoc::markup::attributes::new()","rdoc::markup::blankline::new()","rdoc::markup::document::new()","rdoc::markup::formatter::new()","rdoc::markup::hardbreak::new()","rdoc::markup::include::new()","rdoc::markup::indentedparagraph::new()","rdoc::markup::list::new()","rdoc::markup::listitem::new()","rdoc::markup::parser::new()","rdoc::markup::preprocess::new()","rdoc::markup::raw::new()","rdoc::markup::regexphandling::new()","rdoc::markup::toansi::new()","rdoc::markup::tobs::new()","rdoc::markup::tohtml::new()","rdoc::markup::tohtmlcrossref::new()","rdoc::markup::tohtmlsnippet::new()","rdoc::markup::tolabel::new()","rdoc::markup::tomarkdown::new()","rdoc::markup::tordoc::new()","rdoc::markup::tottonly::new()","rdoc::methodattr::new()","rdoc::mixin::new()","rdoc::parser::new()","rdoc::parser::c::new()","rdoc::parser::ripperstatelex::new()","rdoc::parser::ripperstatelex::innerstatelex::new()","rdoc::parser::ruby::new()","rdoc::parser::simple::new()","rdoc::rd::blockparser::new()","rdoc::rd::inline::new()","rdoc::rd::inlineparser::new()","rdoc::rdoc::new()","rdoc::ri::driver::new()","rdoc::ri::task::new()","rdoc::require::new()","rdoc::rubygemshook::new()","rdoc::servlet::new()","rdoc::stats::new()","rdoc::stats::quiet::new()","rdoc::store::new()","rdoc::store::missingfileerror::new()","rdoc::task::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","rspec::core::backtraceformatter::new()","rspec::core::bisect::channel::new()","rspec::core::bisect::coordinator::new()","rspec::core::bisect::exampleminimizer::new()","rspec::core::bisect::forkrunner::new()","rspec::core::bisect::forkrunner::rundispatcher::new()","rspec::core::bisect::notifier::new()","rspec::core::bisect::shellcommand::new()","rspec::core::bisect::shellrunner::new()","rspec::core::configuration::new()","rspec::core::configuration::deprecationreporterbuffer::new()","rspec::core::configurationoptions::new()","rspec::core::drboptions::new()","rspec::core::drbrunner::new()","rspec::core::example::new()","rspec::core::example::procsy::new()","rspec::core::examplegroup::new()","rspec::core::examplestatusdumper::new()","rspec::core::examplestatusmerger::new()","rspec::core::examplestatusparser::new()","rspec::core::examplestatuspersister::new()","rspec::core::filtermanager::new()","rspec::core::filterrules::new()","rspec::core::filterrules::new()","rspec::core::filterableitemrepository::queryoptimized::new()","rspec::core::filterableitemrepository::updateoptimized::new()","rspec::core::formatters::basebisectformatter::new()","rspec::core::formatters::baseformatter::new()","rspec::core::formatters::bisectdrbformatter::new()","rspec::core::formatters::bisectprogressformatter::new()","rspec::core::formatters::deprecationformatter::new()","rspec::core::formatters::deprecationformatter::delayedprinter::new()","rspec::core::formatters::deprecationformatter::filestream::new()","rspec::core::formatters::deprecationformatter::immediateprinter::new()","rspec::core::formatters::documentationformatter::new()","rspec::core::formatters::exceptionpresenter::new()","rspec::core::formatters::exceptionpresenter::factory::new()","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater::new()","rspec::core::formatters::fallbackmessageformatter::new()","rspec::core::formatters::htmlformatter::new()","rspec::core::formatters::htmlprinter::new()","rspec::core::formatters::jsonformatter::new()","rspec::core::formatters::loader::new()","rspec::core::formatters::profileformatter::new()","rspec::core::formatters::snippetextractor::new()","rspec::core::formatters::syntaxhighlighter::new()","rspec::core::hooks::hookcollections::new()","rspec::core::legacyexamplegrouphash::new()","rspec::core::memoizedhelpers::new()","rspec::core::memoizedhelpers::nonthreadsafememoized::new()","rspec::core::memoizedhelpers::threadsafememoized::new()","rspec::core::metadata::hashpopulator::new()","rspec::core::multipleexceptionerror::new()","rspec::core::notifications::examplesnotification::new()","rspec::core::notifications::failedexamplenotification::new()","rspec::core::notifications::profilenotification::new()","rspec::core::ordering::configurationmanager::new()","rspec::core::ordering::custom::new()","rspec::core::ordering::random::new()","rspec::core::ordering::registry::new()","rspec::core::outputwrapper::new()","rspec::core::parser::new()","rspec::core::pending::skipdeclaredinexample::new()","rspec::core::profiler::new()","rspec::core::projectinitializer::new()","rspec::core::raketask::new()","rspec::core::reporter::new()","rspec::core::runner::new()","rspec::core::set::new()","rspec::core::sharedexamplegroupinclusionstackframe::new()","rspec::core::sharedexamplegroupmodule::new()","rspec::core::suitehookcontext::new()","rspec::core::world::new()","rspec::expectations::blocksnippetextractor::new()","rspec::expectations::configuration::new()","rspec::expectations::expectationtarget::new()","rspec::expectations::failureaggregator::new()","rspec::expectations::legacymatcheradapter::new()","rspec::expectations::legacymatcheradapter::new()","rspec::expectations::multipleexpectationsnotmeterror::new()","rspec::matchers::aliasedmatcher::new()","rspec::matchers::builtin::all::new()","rspec::matchers::builtin::basematcher::new()","rspec::matchers::builtin::be::new()","rspec::matchers::builtin::bebetween::new()","rspec::matchers::builtin::becomparedto::new()","rspec::matchers::builtin::bepredicate::new()","rspec::matchers::builtin::bewithin::new()","rspec::matchers::builtin::change::new()","rspec::matchers::builtin::changedetails::new()","rspec::matchers::builtin::changefromvalue::new()","rspec::matchers::builtin::changerelatively::new()","rspec::matchers::builtin::changetovalue::new()","rspec::matchers::builtin::compound::new()","rspec::matchers::builtin::compound::nestedevaluator::new()","rspec::matchers::builtin::compound::sequentialevaluator::new()","rspec::matchers::builtin::containexactly::pairingsmaximizer::new()","rspec::matchers::builtin::cover::new()","rspec::matchers::builtin::exist::new()","rspec::matchers::builtin::has::new()","rspec::matchers::builtin::haveattributes::new()","rspec::matchers::builtin::include::new()","rspec::matchers::builtin::match::new()","rspec::matchers::builtin::operatormatcher::new()","rspec::matchers::builtin::output::new()","rspec::matchers::builtin::raiseerror::new()","rspec::matchers::builtin::reliablematchdata::new()","rspec::matchers::builtin::respondto::new()","rspec::matchers::builtin::satisfy::new()","rspec::matchers::builtin::specificvalueschange::new()","rspec::matchers::builtin::startorendwith::new()","rspec::matchers::builtin::startorendwith::new()","rspec::matchers::builtin::throwsymbol::new()","rspec::matchers::builtin::yieldcontrol::new()","rspec::matchers::builtin::yieldprobe::new()","rspec::matchers::builtin::yieldsuccessiveargs::new()","rspec::matchers::builtin::yieldwithargs::new()","rspec::matchers::dsl::matcher::new()","rspec::matchers::expectedsformultiplediffs::new()","rspec::matchers::matcherdelegator::new()","rspec::mocks::andreturnimplementation::new()","rspec::mocks::andwraporiginalimplementation::new()","rspec::mocks::andyieldimplementation::new()","rspec::mocks::anyinstance::chain::new()","rspec::mocks::anyinstance::expectchainchain::new()","rspec::mocks::anyinstance::expectationchain::new()","rspec::mocks::anyinstance::fluentinterfaceproxy::new()","rspec::mocks::anyinstance::messagechains::new()","rspec::mocks::anyinstance::proxy::new()","rspec::mocks::anyinstance::recorder::new()","rspec::mocks::anyinstance::stubchainchain::new()","rspec::mocks::argumentlistmatcher::new()","rspec::mocks::argumentmatchers::arrayincludingmatcher::new()","rspec::mocks::argumentmatchers::basehashmatcher::new()","rspec::mocks::argumentmatchers::ducktypematcher::new()","rspec::mocks::argumentmatchers::instanceof::new()","rspec::mocks::argumentmatchers::kindof::new()","rspec::mocks::configuration::new()","rspec::mocks::constant::new()","rspec::mocks::constantmutator::basemutator::new()","rspec::mocks::constantmutator::definedconstantreplacer::new()","rspec::mocks::directobjectreference::new()","rspec::mocks::errorgenerator::new()","rspec::mocks::instancemethodstasher::new()","rspec::mocks::matchers::expectationcustomization::new()","rspec::mocks::matchers::havereceived::new()","rspec::mocks::matchers::receive::new()","rspec::mocks::matchers::receive::defaultdescribable::new()","rspec::mocks::matchers::receivemessagechain::new()","rspec::mocks::matchers::receivemessages::new()","rspec::mocks::messagechain::new()","rspec::mocks::messageexpectation::implementationdetails::new()","rspec::mocks::methoddouble::new()","rspec::mocks::methodreference::new()","rspec::mocks::namedobjectreference::new()","rspec::mocks::nestedspace::new()","rspec::mocks::ordergroup::new()","rspec::mocks::partialclassdoubleproxymethods::new()","rspec::mocks::proxy::new()","rspec::mocks::proxyfornil::new()","rspec::mocks::simplemessageexpectation::new()","rspec::mocks::space::new()","rspec::mocks::targetbase::new()","rspec::mocks::testdouble::new()","rspec::mocks::verifyingdouble::new()","rspec::mocks::verifyingexistingmethoddouble::new()","rspec::mocks::verifyingmessageexpectation::new()","rspec::mocks::verifyingmethoddouble::new()","rspec::mocks::verifyingpartialdoubleproxy::new()","rspec::mocks::verifyingproxy::new()","rspec::support::comparableversion::new()","rspec::support::differ::new()","rspec::support::encodedstring::new()","rspec::support::hunkgenerator::new()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher::new()","rspec::support::methodsignature::new()","rspec::support::methodsignatureexpectation::new()","rspec::support::methodsignatureverifier::new()","rspec::support::methodsignatureverifier::new()","rspec::support::mutex::new()","rspec::support::objectformatter::new()","rspec::support::reentrantmutex::new()","rspec::support::source::new()","rspec::support::source::node::new()","rspec::support::source::token::new()","rspec::support::stderrsplitter::new()","rake::application::new()","rake::filelist::new()","rake::filelist::new()","rake::linkedlist::new()","rake::linkedlist::emptylinkedlist::new()","rake::namespace::new()","rake::packagetask::new()","rake::rulerecursionoverflowerror::new()","rake::task::new()","rake::taskarguments::new()","rake::testtask::new()","sdoc::merge::new()","testprivateattrs::sample::new()","testrakefileutils::badlink::new()","testtraceoutput::printspy::new()","rdoc::parser::ruby#new_comment()","rspec::mocks::methoddouble#new_rspec_prepended_module()","rspec::mocks::rootspace#new_scope()","rspec::mocks::space#new_scope()","rake::taskarguments#new_scope()","rspec::core::examplegroup::next_runnable_index_for()","rdoc::rd::inlineparser#next_token()","rdoc::rd::inlineparser#next_words_on_error()","rspec::mocks::argumentmatchers#no_args()","rspec::support::source#nodes_by_line_number()","rdoc::stats::verbose#nodoc()","rdoc::classmodule#non_aliases()","rspec::core::world::null::non_example_failure()","rspec::core::world::null::non_example_failure=()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher#non_kw_args_arity_description()","rspec::support::methodsignature#non_kw_args_arity_description()","rspec::support::ruby#non_mri?()","rdoc::comment#normalize()","rdoc::markup::verbatim#normalize()","rdoc::text#normalize_comment()","rspec::support::recursiveconstmethods#normalize_const_name()","rdoc::rdoc#normalized_file_list()","rdoc::servlet#not_found()","object#not_to()","rspec::expectations::blockexpectationtarget#not_to()","rspec::expectations::expectationtarget::instancemethods#not_to()","rdoc::markdown#note()","rdoc::markdown#note_for()","rdoc::markdown#notes()","rspec::core::notifications::examplesnotification#notifications()","rspec::core::reporter#notify()","rspec::support::notify_failure()","rspec::core::reporter#notify_non_example_exception()","rspec::mocks::anyinstance::recorder#notify_received_message()","rspec::core::formatters::bisectdrbformatter#notify_results()","fakedate::now()","rake::fileutilsext#nowrite()","rake::fileutilsext#nowrite()","rspec::mocks::proxy#null_object?()","rspec::mocks::syntax#null_object?()","rspec::mocks::testdouble#null_object?()","rspec::core::world#num_example_groups_defined_in()","rdoc::toplevel#object_class()","rspec::mocks::examplemethods#object_double()","rspec::mocks::methoddouble#object_singleton_class()","rspec::mocks::examplemethods#object_spy()","rspec::matchers::builtin::bewithin#of()","rdoc::markup::formatter#off_tags()","rdoc::markup::tohtmlsnippet#off_tags()","rdoc::parser::ripperstatelex::innerstatelex#on_char()","rdoc::parser::ripperstatelex::innerstatelex#on_backref()","rdoc::parser::ripperstatelex::innerstatelex#on_comma()","rdoc::parser::ripperstatelex::innerstatelex#on_comment()","rdoc::parser::ripperstatelex::innerstatelex#on_const()","rdoc::parser::ripperstatelex::innerstatelex#on_cvar()","rdoc::parser::ripperstatelex::innerstatelex#on_default()","rdoc::rd::blockparser#on_error()","rdoc::rd::inlineparser#on_error()","rspec::core::configuration#on_example_group_definition()","rspec::core::configuration#on_example_group_definition_callbacks()","rdoc::parser::ripperstatelex::innerstatelex#on_float()","rdoc::parser::ripperstatelex::innerstatelex#on_gvar()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_heredoc_end()","rdoc::parser::ripperstatelex::innerstatelex#on_ident()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_ignored_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_imaginary()","rdoc::parser::ripperstatelex::innerstatelex#on_int()","rdoc::parser::ripperstatelex::innerstatelex#on_ivar()","rdoc::parser::ripperstatelex::innerstatelex#on_kw()","rdoc::parser::ripperstatelex::innerstatelex#on_lbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_lbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_lparen()","rdoc::parser::ripperstatelex::innerstatelex#on_nl()","rdoc::parser::ripperstatelex::innerstatelex#on_op()","rdoc::parser::ripperstatelex::innerstatelex#on_period()","rspec::expectations::configuration#on_potential_false_positives=()","rdoc::parser::ripperstatelex::innerstatelex#on_rational()","rdoc::parser::ripperstatelex::innerstatelex#on_rbrace()","rdoc::parser::ripperstatelex::innerstatelex#on_rbracket()","rdoc::parser::ripperstatelex::innerstatelex#on_rparen()","rdoc::parser::ripperstatelex::innerstatelex#on_sp()","rdoc::parser::ripperstatelex::innerstatelex#on_symbeg()","rdoc::markup::formatter#on_tags()","rdoc::markup::tohtmlsnippet#on_tags()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_beg()","rdoc::parser::ripperstatelex::innerstatelex#on_tstring_end()","rspec::matchers::builtin::yieldcontrol#once()","rspec::mocks::messageexpectation#once()","rdoc::context#ongoing_visibility=()","rspec::core::configuration#only_failures_but_not_configured?()","lcs::block#op()","rspec::support::source::token#opening?()","rspec::expectations::negativeexpectationhandler::opposite_should_method()","rspec::expectations::positiveexpectationhandler::opposite_should_method()","rdoc::task#option_list()","rdoc::task#option_list()","rspec::support::rubyfeatures#optional_and_splat_args_supported?()","rdoc::codeobject#options()","rspec::core::drboptions#options()","rake::application#options()","rspec::mocks::errorgenerator#opts()","rspec::matchers::composable#or()","rspec::core::ordering::custom#order()","rspec::core::ordering::identity#order()","rspec::core::ordering::random#order()","rspec::core::ordering::configurationmanager#order=()","rspec::mocks::messageexpectation#ordered()","rspec::mocks::messageexpectation::implementationdetails#ordered?()","rspec::core::world#ordered_example_groups()","rspec::core::examplegroup::ordering_strategy()","rspec::core::formatters::helpers::organize_ids()","rdoc::markdown#orig_initialize()","rspec::mocks::constant::original()","rake::original_dir()","rspec::mocks::methoddouble#original_implementation_callable()","rspec::core::bisect::shellcommand#original_locations()","rspec::mocks::methoddouble#original_method()","rspec::mocks::partialclassdoubleproxymethods#original_method_handle_for()","rspec::mocks::partialdoubleproxy#original_method_handle_for()","rspec::mocks::proxy#original_method_handle_for()","rspec::core::bisect::forkrunner#original_results()","rspec::core::bisect::shellrunner#original_results()","rspec::mocks::partialclassdoubleproxymethods#original_unbound_method_handle_from_ancestor_for()","rspec::expectations::failureaggregator#other_errors()","rspec::expectations::multipleexpectationsnotmeterror#other_errors()","rspec::matchers#output()","rspec::support::stderrsplitter#output()","rdoc::rdoc#output_flag_file()","rdoc::methodattr#output_name()","rspec::core::configuration#output_stream=()","lcs::hunk#overlaps?()","rake::packagetask#package_dir_path()","rake::packagetask#package_name()","rdoc::ri::driver#page()","rdoc::store#page()","rdoc::store#page_file()","rdoc::toplevel#page_name()","rdoc::ri::driver#paging?()","rdoc::markdown#paragraph()","rdoc::rd::blockparser#paragraph()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","rdoc::codeobject#parent()","rdoc::codeobject#parent_file_name()","rspec::core::examplegroup::parent_groups()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::context::section#parse()","rdoc::markdown::parse()","rdoc::markdown#parse()","rdoc::markup::parse()","rdoc::markup::parser::parse()","rdoc::markup::parser#parse()","rdoc::options#parse()","rdoc::parser::ripperstatelex::parse()","rdoc::rd::parse()","rdoc::rd::blockparser#parse()","rdoc::rd::inlineparser#parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","rspec::core::examplestatusparser::parse()","rspec::core::examplestatusparser#parse()","rspec::core::parser::parse()","rspec::core::parser#parse()","rdoc::parser::ruby#parse_alias()","rdoc::parser::ruby#parse_attr()","rdoc::parser::ruby#parse_attr_accessor()","rdoc::parser::ruby#parse_call_parameters()","rdoc::parser::ruby#parse_class()","rdoc::parser::ruby#parse_comment()","rdoc::parser::ruby#parse_comment_tomdoc()","rdoc::parser::ruby#parse_constant()","rdoc::parser::ruby#parse_constant_visibility()","rdoc::rdoc#parse_dot_doc_file()","rdoc::parser::changelog#parse_entries()","rdoc::rdoc#parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","rspec::core::example::parse_id()","rdoc::parser::ruby#parse_meta_attr()","rdoc::parser::ruby#parse_meta_method()","rdoc::parser::ruby#parse_method()","rdoc::parser::ruby#parse_method_dummy()","rdoc::parser::ruby#parse_method_or_yield_parameters()","rdoc::parser::ruby#parse_method_parameters()","rdoc::parser::ruby#parse_method_params_and_body()","rdoc::parser::ruby#parse_module()","rdoc::ri::driver#parse_name()","sdoc::merge#parse_options()","rdoc::parser::ruby#parse_require()","rdoc::parser::ruby#parse_rescue()","rdoc::parser::ruby#parse_statements()","rdoc::parser::ruby#parse_symbol_arg()","rdoc::parser::ruby#parse_symbol_in_arg()","rdoc::parser::ruby#parse_top_level_statements()","rdoc::markup::formatter#parse_url()","rdoc::parser::ruby#parse_visibility()","rdoc::parser::ruby#parse_yield()","rdoc::markup::tohtml#parseable?()","rdoc::toplevel#parser=()","lcs#patch()","lcs::patch()","lcs#patch!()","lcs::patch!()","rspec::mocks::marshalextension::patch!()","rspec::mocks::configuration#patch_marshal_to_support_partial_doubles=()","lcs#patch_me()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::ri::paths::path()","rdoc::toplevel#path()","sdoc::github#path_relative_to_repository()","rspec::core::path_to_executable()","sdoc::github#path_to_git_dir()","pathname#pathmap()","rake::filelist#pathmap()","rake::filelist#pathmap()","string#pathmap()","string#pathmap_explode()","string#pathmap_partial()","string#pathmap_replace()","rspec::core::configuration#pattern=()","rdoc::parser::rubytools#peek_read()","rdoc::parser::rubytools#peek_tk()","rdoc::markup::parser#peek_token()","rdoc::markdown#peg_parse()","rspec::core::pending#pending()","rspec::core::notifications::summarynotification#pending_count()","rspec::core::notifications::examplesnotification#pending_examples()","rspec::core::notifications::examplesnotification#pending_notifications()","rdoc::stats#percent_doc()","rspec::matchers::builtin::bewithin#percent_of()","rspec::core::notifications::profilenotification#percentage()","rspec::core::runner::perform_at_exit()","rspec::matchers::builtin::changedetails#perform_change()","rspec::core::examplestatuspersister::persist()","rspec::core::examplestatuspersister#persist()","rspec::support::encodedstring::pick_encoding()","rdoc::context::section#plain_html()","rspec::core::configuration::deprecationreporterbuffer#play_onto()","rspec::mocks::anyinstance::chain#playback!()","rspec::mocks::anyinstance::expectchainchain#playback!()","rspec::mocks::anyinstance::messagechains#playback!()","rspec::mocks::anyinstance::recorder#playback!()","rspec::mocks::matchers::expectationcustomization#playback_onto()","rspec::core::formatters::helpers::pluralize()","rdoc::tokenstream#pop_token()","rspec::core::metadata::hashpopulator#populate()","rdoc::markup::preprocess::post_process()","rspec::core::formatters::htmlsnippetextractor#post_process()","rdoc::markup::preprocess::post_processors()","rspec::core::world#preceding_declaration_line()","rspec::support::objectformatter#prepare_array()","rspec::core::formatters::loader#prepare_default()","rspec::core::reporter#prepare_default()","rspec::support::objectformatter#prepare_element()","rspec::core::world#prepare_example_filtering()","rspec::support::objectformatter::prepare_for_inspection()","rspec::support::objectformatter#prepare_for_inspection()","rspec::support::objectformatter#prepare_hash()","rspec::core::configuration#prepend()","rspec::core::filterableitemrepository::queryoptimized#prepend()","rspec::core::filterableitemrepository::updateoptimized#prepend()","rspec::core::configuration#prepend_after()","rspec::core::hooks#prepend_after()","rspec::core::configuration#prepend_before()","rspec::core::hooks#prepend_before()","rspec::mocks::proxy::prepended_modules_of()","rspec::mocks::proxy#prepended_modules_of_singleton_class()","rake::task#prerequisite_tasks()","rspec::mocks::andwraporiginalimplementation#present?()","rspec::mocks::implementation#present?()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","rdoc::rd::inlineparser#prev_words_on_error()","rspec::mocks::constant#previously_defined?()","testtraceoutput::printspy#print()","rdoc::stats::quiet#print_alias()","rdoc::stats::quiet#print_attribute()","rdoc::stats::quiet#print_class()","rdoc::stats::quiet#print_constant()","rspec::core::formatters::deprecationformatter::delayedprinter#print_deferred_deprecation_warnings()","rspec::core::formatters::deprecationformatter::delayedprinter#print_deprecation_message()","rspec::core::formatters::deprecationformatter::immediateprinter#print_deprecation_message()","rspec::core::formatters::htmlprinter#print_example_failed()","rspec::core::formatters::htmlprinter#print_example_group_end()","rspec::core::formatters::htmlprinter#print_example_group_start()","rspec::core::formatters::htmlprinter#print_example_passed()","rspec::core::formatters::htmlprinter#print_example_pending()","rdoc::stats::normal#print_file()","rdoc::stats::quiet#print_file()","rspec::core::formatters::htmlprinter#print_html_start()","rdoc::stats::quiet#print_method()","rdoc::stats::quiet#print_module()","rspec::core::formatters::htmlprinter#print_summary()","rspec::core::formatters::deprecationformatter#printer()","rspec::matchers::builtin::yieldprobe::probe()","rspec::matchers::builtin::yieldprobe#probe()","rdoc::ri::driver::process_args()","rspec::core::hooks::hookcollections#processable_hooks_for()","rspec::core::configuration#profile_examples()","rspec::mocks::nestedspace#proxies_of()","rspec::mocks::space#proxies_of()","rspec::mocks::rootspace#proxy_for()","rspec::mocks::space#proxy_for()","rspec::mocks::methoddouble#proxy_method_invoked()","rspec::mocks::verifyingmethoddouble#proxy_method_invoked()","rspec::core::filtermanager#prune()","rspec::core::bisect::notifier#publish()","rspec::core::reporter#publish()","rdoc::markup::document#push()","rdoc::markup::list#push()","rdoc::markup::listitem#push()","rdoc::markup::raw#push()","rspec::core::formatters::deprecationformatter::filestream#puts()","rspec::core::formatters::deprecationformatter::raiseerrorstream#puts()","rdoc::options#quiet()","rdoc::options#quiet=()","rspec::core::shellescape#quote()","rspec::mocks::errorgenerator#raise_already_invoked_error()","rspec::mocks::errorgenerator#raise_cant_constrain_count_for_negated_have_received_error()","rspec::mocks::anyinstance::errorgenerator#raise_does_not_implement_error()","rspec::mocks::errorgenerator#raise_double_negation_error()","rspec::matchers#raise_error()","rspec::core::configuration#raise_errors_for_deprecations!()","rspec::matchers#raise_exception()","rspec::mocks::errorgenerator#raise_expectation_error()","rspec::mocks::errorgenerator#raise_expectation_on_mocked_method()","rspec::mocks::errorgenerator#raise_expectation_on_nil_error()","rspec::mocks::errorgenerator#raise_expectation_on_unstubbed_method()","rspec::mocks::errorgenerator#raise_expired_test_double_error()","rspec::mocks::errorgenerator#raise_have_received_disallowed()","rspec::mocks::errorgenerator#raise_invalid_arguments_error()","rspec::mocks::anyinstance::errorgenerator#raise_message_already_received_by_other_instance_error()","rspec::mocks::errorgenerator#raise_method_not_stubbed_error()","rspec::mocks::methoddouble#raise_method_not_stubbed_error()","rspec::mocks::errorgenerator#raise_missing_block_error()","rspec::mocks::errorgenerator#raise_missing_default_stub_error()","rspec::mocks::proxy#raise_missing_default_stub_error()","rspec::mocks::errorgenerator#raise_non_public_error()","rspec::mocks::anyinstance::errorgenerator#raise_not_supported_with_prepend_error()","rspec::mocks::constantmutator::raise_on_invalid_const()","rspec::core::configuration#raise_on_warning=()","rspec::mocks::errorgenerator#raise_only_valid_on_a_partial_double()","rspec::mocks::errorgenerator#raise_out_of_order_error()","rspec::mocks::messageexpectation::implementationdetails#raise_out_of_order_error()","rspec::mocks::anyinstance::errorgenerator#raise_second_instance_received_message_error()","rspec::mocks::errorgenerator#raise_similar_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_args_error()","rspec::mocks::messageexpectation::implementationdetails#raise_unexpected_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_error()","rspec::mocks::proxy#raise_unexpected_message_error()","rspec::mocks::errorgenerator#raise_unimplemented_error()","rspec::mocks::errorgenerator#raise_verifying_double_not_defined_error()","rspec::mocks::errorgenerator#raise_wrong_arity_error()","rubyrunner#rake()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_check_options()","rake::fileutilsext#rake_merge_option()","rake::fileutilsext#rake_merge_option()","rake::fileutilsext#rake_output_message()","rake::fileutilsext#rake_output_message()","rake::testcase#rake_system_dir()","rake::testcase#rakefile()","rakefiledefinitions#rakefile_access()","rakefiledefinitions#rakefile_chains()","rakefiledefinitions#rakefile_comments()","rakefiledefinitions#rakefile_default()","rakefiledefinitions#rakefile_dryrun()","rakefiledefinitions#rakefile_extra()","rakefiledefinitions#rakefile_failing_test_task()","rakefiledefinitions#rakefile_file_creation()","rakefiledefinitions#rakefile_imports()","rakefiledefinitions#rakefile_multidesc()","rakefiledefinitions#rakefile_namespace()","rakefiledefinitions#rakefile_nosearch()","rakefiledefinitions#rakefile_rakelib()","rakefiledefinitions#rakefile_rbext()","rakefiledefinitions#rakefile_regenerate_imports()","rakefiledefinitions#rakefile_stand_alone_filelist()","rakefiledefinitions#rakefile_test_signal()","rakefiledefinitions#rakefile_test_task()","rakefiledefinitions#rakefile_unittest()","rakefiledefinitions#rakefile_verbose()","rdoc::ri::paths::raw_path()","rdoc::parser::c#rb_scan_args()","rspec::support::ruby#rbx?()","rdoc::rubygemshook#rdoc_installed?()","rdoc::task#rdoc_task_description()","rdoc::task#rdoc_task_description()","rdoc::parser::ruby#read_directive()","rdoc::parser::ruby#read_documentation_modifiers()","rdoc::encoding::read_file()","rspec::mocks::ordergroup#ready_for?()","rspec::core::bisect::channel#receive()","rspec::mocks::syntax#receive()","rspec::mocks::syntax#receive_message_chain()","rspec::mocks::syntax#receive_messages()","rspec::mocks::anyinstance::messagechains#received_expected_message!()","rspec::mocks::proxy#received_message?()","rspec::mocks::syntax#received_message?()","rspec::core::sharedcontext::record()","rspec::core::world#record()","rspec::mocks::anyinstance::chain::customizations::record()","rspec::core::example::executionresult#record_finished()","rdoc::codeobject#record_location()","rdoc::context#record_location()","rspec::mocks::proxy#record_message_received()","rspec::support::recursiveconstmethods#recursive_const_defined?()","rspec::support::recursiveconstmethods#recursive_const_get()","rspec::support::objectformatter#recursive_structure?()","rake::task#reenable()","rdoc::markdown#reference()","rdoc::markup::preprocess::register()","rspec::core::formatters::register()","rspec::core::hooks::hookcollections#register()","rspec::core::ordering::registry#register()","rspec::matchers::builtin::operatormatcher::register()","rspec::mocks::ordergroup#register()","rspec::mocks::rootspace#register_constant_mutator()","rspec::mocks::space#register_constant_mutator()","rspec::core::hooks::hookcollections#register_global_singleton_context_hooks()","rspec::core::hooks::hookcollections#register_globals()","rspec::core::reporter#register_listener()","rspec::support::register_matcher_definition()","rspec::core::ordering::configurationmanager#register_ordering()","rdoc::markup::preprocess::registered()","rspec::mocks::nestedspace#registered?()","rspec::mocks::rootspace#registered?()","rspec::mocks::space#registered?()","rspec::core::world#registered_example_group_files()","rspec::core::world::null::registered_example_group_files()","rspec::core::reporter#registered_listeners()","rspec::matchers::builtin::operatormatcher::registry()","rspec::core::metadata::relative_path()","rspec::core::metadata::relative_path_regex()","rdoc::rubygemshook#remove()","rspec::examplegroups::remove_all_constants()","rdoc::parser::simple#remove_coding_comment()","rdoc::context::section#remove_comment()","rdoc::parser::c#remove_commented_out_lines()","rspec::core::examplegroup::remove_example()","rdoc::context#remove_from_documentation?()","rdoc::encoding::remove_frozen_string_literal()","rspec::core::dsl::remove_globally!()","rspec::core::sharedexamplegroup::topleveldsl::remove_globally!()","rspec::support::encodedstring#remove_invalid_bytes()","rdoc::context#remove_invisible()","rdoc::encoding::remove_magic_comment()","rdoc::parser::remove_modeline()","rdoc::store#remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","rdoc::comment#remove_private()","rdoc::parser::simple#remove_private_comment()","rdoc::rdoc#remove_siginfo_handler()","rspec::mocks::methoddouble#remove_stub()","rspec::mocks::proxy#remove_stub()","rspec::mocks::anyinstance::messagechains#remove_stub_chains_for!()","rspec::mocks::methoddouble#remove_stub_if_present()","rspec::mocks::proxy#remove_stub_if_present()","rdoc::parser::rubytools#remove_token_listener()","rdoc::rdoc#remove_unparseable()","rdoc::generator::darkfish#render()","rdoc::generator::darkfish#render_template()","sdoc::templatable#render_template()","rspec::support::stderrsplitter#reopen()","testrakefileutils#replace_ruby()","rspec::mocks::proxy#replay_received_message_on()","rdoc::stats#report()","rspec::core::reporter#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rspec::core::world#report_filter_message()","rdoc::stats#report_methods()","rspec::core::configuration#reporter()","rspec::core::world#reporter()","sdoc::github#repository_url()","rspec::core::bisect::exampleminimizer#repro_command_for_currently_needed_ids()","rspec::core::bisect::shellcommand#repro_command_from()","object#require_do()","rspec::support::rubyfeatures#required_kw_args_supported?()","rspec::core::configuration#requires=()","rdoc::task#rerdoc_task_description()","rdoc::task#rerdoc_task_description()","rspec::core::example#rerun_argument()","rdoc::markup::preprocess::reset()","rdoc::parser::ripperstatelex::innerstatelex#reset()","rdoc::parser::rubytools#reset()","rspec::reset()","rspec::core::configuration#reset()","rspec::core::world#reset()","rspec::mocks::constantmutator::constanthider#reset()","rspec::mocks::constantmutator::definedconstantreplacer#reset()","rspec::mocks::constantmutator::undefinedconstantsetter#reset()","rspec::mocks::methoddouble#reset()","rspec::mocks::partialdoubleproxy#reset()","rspec::mocks::proxy#reset()","rspec::mocks::testdoubleproxy#reset()","rspec::support::stderrsplitter#reset!()","rspec::mocks::rootspace#reset_all()","rspec::mocks::space#reset_all()","rspec::core::configuration#reset_filters()","rspec::core::examplegroup::reset_memoized()","rspec::core::configuration#reset_reporter()","rspec::expectations::configuration#reset_syntaxes_to_default()","rspec::mocks::configuration#reset_syntaxes_to_default()","rdoc::crossreference#resolve()","rake::filelist#resolve()","rake::filelist#resolve()","rdoc::context#resolve_aliases()","rake::taskmanager#resolve_args()","rspec::mocks::argumentlistmatcher#resolve_expected_args_based_on()","rspec::matchers#respond_to()","rspec::core::outputwrapper#respond_to?()","rspec::matchers::dsl::matcher#respond_to?()","rspec::matchers::matcherdelegator#respond_to?()","rspec::mocks::anyinstance::fluentinterfaceproxy#respond_to?()","rspec::mocks::testdouble#respond_to?()","rspec::mocks::verifyingdouble#respond_to?()","rspec::mocks::verifyingdouble::silentio::respond_to?()","rspec::matchers::dsl::matcher#respond_to_missing?()","rspec::matchers::matcherdelegator#respond_to_missing?()","rspec::mocks::anyinstance::fluentinterfaceproxy#respond_to_missing?()","rspec::mocks::instancemethodstasher#restore()","rspec::mocks::methoddouble#restore_original_method()","rspec::mocks::methoddouble#restore_original_visibility()","rdoc::parser::ruby#retrieve_comment_body()","lcs::spechelper#reverse_sdiff()","rdoc::rubygemshook#ri_installed?()","rdoc::servlet#ri_paths()","rspec::support::rubyfeatures#ripper_supported?()","rdoc::servlet#root()","rspec::core::rubyproject::root()","rdoc::servlet#root_search()","rspec::support::rspec_description_for_object()","fileutils#ruby()","rubyrunner#ruby()","rdoc::markup::verbatim#ruby?()","rake::dsl#rule()","lcs::htmldiff#run()","rdoc::ri::driver::run()","rdoc::ri::driver#run()","rspec::core::bisect::forkrunner#run()","rspec::core::bisect::server::run()","rspec::core::bisect::shellrunner#run()","rspec::core::drbrunner#run()","rspec::core::example#run()","rspec::core::example::procsy#run()","rspec::core::examplegroup::run()","rspec::core::hooks::aftercontexthook#run()","rspec::core::hooks::afterhook#run()","rspec::core::hooks::beforehook#run()","rspec::core::hooks::hookcollections#run()","rspec::core::projectinitializer#run()","rspec::core::runner::run()","rspec::core::runner#run()","rake::application#run()","rspec::core::examplegroup::run_after_context_hooks()","rspec::core::examplegroup::run_before_context_hooks()","rspec::core::examplegroup::run_examples()","rspec::core::hooks::hookcollections#run_owned_hooks_for()","rubyrunner#run_ruby()","rspec::support::shellout#run_ruby_with_current_load_path()","rspec::core::runner#run_specs()","rspec::core::raketask#run_task()","rake::application#run_with_threads()","rspec::core::runner::running_in_drb?()","rspec::mocks::messageexpectation::implementationdetails#safe_invoke()","fileutils#safe_ln()","rspec::core::sandbox::sandboxed()","rdoc::options#sanitize_path()","rspec::matchers#satisfy()","rdoc::store#save()","rdoc::store#save_cache()","rdoc::store#save_class()","rdoc::store#save_method()","rspec::mocks::methoddouble#save_original_implementation_callable!()","rdoc::store#save_page()","rdoc::parser::c#scan()","rdoc::parser::changelog#scan()","rdoc::parser::markdown#scan()","rdoc::parser::rd#scan()","rdoc::parser::ruby#scan()","rdoc::parser::simple#scan()","rake::namespace#scope()","rake::task::scope_name()","lcs#sdiff()","lcs::sdiff()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","rdoc::generator::jsonindex#search_string()","rdoc::codeobject#section()","rdoc::context#section_contents()","rdoc::context#sections()","rdoc::methodattr#see()","rspec::core::formatters::basetextformatter#seed()","rspec::core::formatters::jsonformatter#seed()","rspec::core::ordering::configurationmanager#seed=()","rspec::core::notifications::seednotification#seed_used?()","rspec::core::ordering::configurationmanager#seed_used?()","rspec::support::comparableversion#segments()","rspec::core::bisect::channel#send()","rspec::mocks::verifyingdouble#send()","lcs::spechelper#seq1()","lcs::spechelper#seq2()","rdoc::context::section#sequence()","rspec::core::example#set_aggregate_failures_exception()","rake::task#set_arg_names()","rdoc::markup::attrspan#set_attrs()","rdoc::context#set_constant_visibility_for()","rdoc::context#set_current_section()","rdoc::erbio#set_eoutvar()","rdoc::erbpartial#set_eoutvar()","rspec::core::example#set_exception()","rspec::core::suitehookcontext#set_exception()","rspec::core::examplegroup::set_it_up()","rspec::core::examplegroup::set_ivars()","rdoc::context#set_visibility_for()","rdoc::generator::darkfish#setup()","rdoc::markup::formattertestcase#setup()","rdoc::rubygemshook#setup()","rspec::core::runner#setup()","rspec::mocks::setup()","rake::testcase#setup()","testprivateattrs#setup()","testrakeapplication#setup()","testrakeapplicationoptions#setup()","testrakebacktrace#setup()","testrakecpucounter#setup()","testrakecpucounter::testclassmethod#setup()","testrakedefinitions#setup()","testrakedsl#setup()","testrakefilecreationtask#setup()","testrakefilelist#setup()","testrakefiletask#setup()","testrakefileutils#setup()","testrakeftpfile#setup()","testrakefunctional#setup()","testrakeinvocationchain#setup()","testrakemultitask#setup()","testrakepathmapexplode#setup()","testrakerules#setup()","testraketask#setup()","testraketaskargumentparsing#setup()","testraketaskmanager#setup()","testraketaskwitharguments#setup()","testraketoplevelfunctions#setup()","testthreadhistorydisplay#setup()","rspec::mocks::matchers::havereceived#setup_allowance()","rspec::mocks::matchers::receive#setup_allowance()","rspec::mocks::matchers::receivemessagechain#setup_allowance()","rspec::mocks::matchers::receivemessages#setup_allowance()","rspec::mocks::matchers::havereceived#setup_any_instance_allowance()","rspec::mocks::matchers::receive#setup_any_instance_allowance()","rspec::mocks::matchers::receivemessagechain#setup_any_instance_allowance()","rspec::mocks::matchers::receivemessages#setup_any_instance_allowance()","rspec::mocks::matchers::havereceived#setup_any_instance_expectation()","rspec::mocks::matchers::receive#setup_any_instance_expectation()","rspec::mocks::matchers::receivemessagechain#setup_any_instance_expectation()","rspec::mocks::matchers::receivemessages#setup_any_instance_expectation()","rspec::mocks::matchers::havereceived#setup_any_instance_negative_expectation()","rspec::mocks::matchers::receive#setup_any_instance_negative_expectation()","rspec::mocks::messagechain#setup_chain()","testrakeapplication#setup_command_line()","rspec::core::formatters::loader#setup_default()","rspec::mocks::matchers::havereceived#setup_expectation()","rspec::mocks::matchers::receive#setup_expectation()","rspec::mocks::matchers::receivemessagechain#setup_expectation()","rspec::mocks::matchers::receivemessages#setup_expectation()","rdoc::options#setup_generator()","rspec::core::mockingadapters::flexmock#setup_mocks_for_rspec()","rspec::core::mockingadapters::mocha#setup_mocks_for_rspec()","rspec::core::mockingadapters::null#setup_mocks_for_rspec()","rspec::core::mockingadapters::rr#setup_mocks_for_rspec()","rspec::core::mockingadapters::rspec#setup_mocks_for_rspec()","sdoc::merge#setup_names()","rspec::mocks::matchers::havereceived#setup_negative_expectation()","rspec::mocks::matchers::receive#setup_negative_expectation()","rspec::mocks::matchers::receivemessagechain#setup_negative_expectation()","rspec::mocks::matchers::receivemessages#setup_negative_expectation()","rdoc::generator::sdoc::setup_options()","rdoc::rdoc#setup_output_dir()","sdoc::merge#setup_output_dir()","rdoc::ri::driver#setup_pager()","rdoc::markup::parser#setup_scanner()","rspec::mocks::methoddouble#setup_simple_method_double()","rspec::support::spec::setup_simplecov()","rspec::support::source::node::sexp?()","fileutils#sh()","rspec::core::sharedexamplegroup#shared_context()","rspec::core::configuration#shared_context_metadata_behavior=()","rspec::core::sharedexamplegroupinclusionstackframe::shared_example_group_inclusions()","rspec::core::world#shared_example_group_registry()","rspec::core::sharedexamplegroup#shared_examples()","rspec::core::sharedexamplegroup::topleveldsl#shared_examples()","rspec::core::sharedexamplegroup#shared_examples_for()","rspec::core::shellescape#shell_allows_unquoted_ids?()","rspec::support::shellout#shell_out()","testrakefileutils#shellcommand()","rspec::core::memoizedhelpers#should()","rspec::expectations::syntax#should()","rspec::expectations::syntax#should_enabled?()","rspec::mocks::syntax::should_enabled?()","rspec::matchers::composable::should_enumerate?()","rspec::expectations::negativeexpectationhandler::should_method()","rspec::expectations::positiveexpectationhandler::should_method()","rspec::core::memoizedhelpers#should_not()","rspec::expectations::syntax#should_not()","rspec::mocks::anyinstance::proxy#should_not_receive()","rspec::mocks::anyinstance::recorder#should_not_receive()","rspec::mocks::syntax#should_not_receive()","rspec::mocks::anyinstance::proxy#should_receive()","rspec::mocks::anyinstance::recorder#should_receive()","rspec::mocks::syntax#should_receive()","rspec::mocks::constantmutator::definedconstantreplacer#should_transfer_nested_constants?()","rdoc::servlet#show_documentation()","rspec::mocks::methoddouble#show_frozen_warning()","rspec::core::bisect::forkrunner#shutdown()","rdoc::tomdoc::signature()","rspec::core::metadatafilter::silence_metadata_example_group_deprecations()","rspec::mocks::messageexpectation::implementationdetails#similar_messages()","lcs::spechelper#simple_callback()","lcs::spechelper#simple_callback_no_finishers()","lcs::contextchange::simplify()","rspec::matchers::builtin::yieldprobe#single_yield_args()","rspec::core::examplegroup#singleton_class()","rdoc::ri::paths::site_dir()","rdoc::markup::parser#skip()","rspec::core::pending#skip()","rdoc::parser::ruby#skip_for_variable()","rdoc::parser::ruby#skip_method()","rdoc::parser::ruby#skip_optional_do_after_expression()","rdoc::parser::rubytools#skip_tkspace()","rdoc::parser::ruby#skip_tkspace_comment()","rdoc::parser::rubytools#skip_tkspace_without_nl()","rspec::core::example#skip_with_exception()","lcs::spechelper#skipped_seq1()","lcs::spechelper#skipped_seq2()","rspec::core::notifications::profilenotification#slow_duration()","rspec::core::notifications::profilenotification#slowest_examples()","rspec::core::notifications::profilenotification#slowest_groups()","rdoc::text#snippet()","rspec::core::formatters::htmlsnippetextractor#snippet()","rspec::core::formatters::htmlsnippetextractor#snippet_for()","rspec::support::objectformatter#sort_hash_keys()","rdoc::context#sort_sections()","rdoc::store#source()","rake::task#source()","rspec::core::formatters::snippetextractor::source_from_file()","rspec::core::world#source_from_file()","rake::task#sources()","rspec::core::configuration#spec_files_with_failures()","rspec::core::bisect::shellcommand#spec_opts_without_bisect()","rspec::support::encodedstring#split()","fileutils#split_all()","rspec::core::inclusionrules#split_file_scoped_rules()","rdoc::markup::attributemanager#split_into_flow()","rspec::matchers::englishphrasing::split_words()","rspec::mocks::examplemethods#spy()","rspec::core::inclusionrules#standalone?()","rspec::core::bisect::forkrunner::start()","rspec::core::bisect::server#start()","rspec::core::bisect::shellrunner::start()","rspec::core::formatters::baseformatter#start()","rspec::core::formatters::htmlformatter#start()","rspec::core::reporter#start()","rdoc::markup::toansi#start_accepting()","rdoc::markup::tohtml#start_accepting()","rdoc::markup::tohtmlsnippet#start_accepting()","rdoc::markup::tordoc#start_accepting()","rdoc::markup::totableofcontents#start_accepting()","rdoc::markup::tottonly#start_accepting()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","rspec::core::formatters::basebisectformatter#start_dump()","rspec::core::formatters::htmlformatter#start_dump()","rspec::core::formatters::progressformatter#start_dump()","rdoc::ri::driver#start_server()","rspec::matchers#start_with()","rspec::mocks::instancemethodstasher#stash()","rspec::core::formatters::deprecationformatter::delayedprinter#stash_deprecation_message()","rspec::mocks::instancemethodstasher#stashed_method_name()","rspec::core::bisect::server#stop()","rspec::core::formatters::jsonformatter#stop()","rspec::core::reporter#stop()","rspec::mocks::anyinstance::recorder#stop_all_observation!()","rdoc::codeobject#stop_doc()","rspec::mocks::anyinstance::recorder#stop_observing!()","rdoc::anymethod#store=()","rdoc::classmodule#store=()","rdoc::codeobject#store=()","rdoc::constant#store=()","rdoc::methodattr#store=()","rdoc::mixin#store=()","rdoc::rdoc#store=()","rspec::core::examplegroup::store_before_context_ivars()","rdoc::servlet#store_for()","rdoc::markdown#strike()","rspec::support::source::token#string()","rdoc::text#strip_hashes()","rspec::support::shellout#strip_known_warnings()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","sdoc::helpers#strip_tags()","rdoc::markdown#strong()","rspec::mocks::anyinstance::proxy#stub()","rspec::mocks::anyinstance::recorder#stub()","rspec::mocks::constantmutator::stub()","rspec::mocks::syntax#stub()","rspec::mocks::anyinstance::proxy#stub_chain()","rspec::mocks::anyinstance::recorder#stub_chain()","rspec::mocks::syntax#stub_chain()","rspec::mocks::stubchain::stub_chain_on()","rspec::mocks::examplemethods#stub_const()","rspec::mocks::constant#stubbed?()","rake::filelist#sub()","rake::filelist#sub()","rake::filelist#sub!()","rake::filelist#sub!()","rspec::core::examplegroup::subclass()","rspec::core::memoizedhelpers#subject()","rspec::core::memoizedhelpers::classmethods#subject()","rspec::core::memoizedhelpers::classmethods#subject!()","rspec::core::formatters::deprecationformatter::filestream#summarize()","rspec::core::formatters::deprecationformatter::raiseerrorstream#summarize()","rdoc::stats#summary()","rspec::core::multipleexceptionerror#summary()","rspec::expectations::multipleexpectationsnotmeterror#summary()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rspec::core::examplegroup::superclass_before_context_ivars()","rspec::core::examplegroup::superclass_metadata()","rdoc::anymethod#superclass_method()","rspec::mocks::partialclassdoubleproxymethods#superclass_proxy()","rspec::mocks::rootspace#superclass_proxy_for()","rspec::mocks::space#superclass_proxy_for()","rspec::matchers::dsl::macros#supports_block_expectations()","rspec::matchers::builtin::basematcher#supports_block_expectations?()","rspec::matchers::builtin::change#supports_block_expectations?()","rspec::matchers::builtin::changerelatively#supports_block_expectations?()","rspec::matchers::builtin::compound#supports_block_expectations?()","rspec::matchers::builtin::output#supports_block_expectations?()","rspec::matchers::builtin::raiseerror#supports_block_expectations?()","rspec::matchers::builtin::specificvalueschange#supports_block_expectations?()","rspec::matchers::builtin::throwsymbol#supports_block_expectations?()","rspec::matchers::builtin::yieldcontrol#supports_block_expectations?()","rspec::matchers::builtin::yieldsuccessiveargs#supports_block_expectations?()","rspec::matchers::builtin::yieldwithargs#supports_block_expectations?()","rspec::matchers::builtin::yieldwithnoargs#supports_block_expectations?()","rspec::matchers::dsl::defaultimplementations#supports_block_expectations?()","rspec::support::rubyfeatures#supports_exception_cause?()","rspec::support::rubyfeatures#supports_rebinding_module_methods?()","rdoc::codeobject#suppress()","rdoc::codeobject#suppressed?()","rdoc::markup::totableofcontents#suppressed?()","rspec::matchers::composable::surface_descriptions_in()","rspec::support::mutex#synchronize()","rspec::support::reentrantmutex#synchronize()","rspec::expectations::configuration#syntax()","rspec::mocks::configuration#syntax()","rspec::expectations::configuration#syntax=()","rspec::mocks::configuration#syntax=()","rspec::core::world#syntax_highlighter()","rdoc::ri::paths::system_dir()","rdoc::markup::document#table_of_contents()","rake::packagetask#tar_bz2_file()","rake::packagetask#tar_gz_file()","rspec::mocks::directobjectreference#target()","rspec::mocks::namedobjectreference#target()","rake::dsl#task()","testraketaskmanagerargumentresolution#task()","rake::task::task_defined?()","rake::namespace#tasks()","rake::task::tasks()","rake::taskmanager#tasks()","rake::taskmanager#tasks_in_scope()","rspec::mocks::teardown()","rake::testcase#teardown()","testrakeapplicationoptions#teardown()","testrakefileutils#teardown()","testrakemultitask#teardown()","testrakepathmapexplode#teardown()","testraketask#teardown()","testraketaskarguments#teardown()","testraketaskwitharguments#teardown()","rspec::core::mockingadapters::flexmock#teardown_mocks_for_rspec()","rspec::core::mockingadapters::mocha#teardown_mocks_for_rspec()","rspec::core::mockingadapters::null#teardown_mocks_for_rspec()","rspec::core::mockingadapters::rr#teardown_mocks_for_rspec()","rspec::core::mockingadapters::rspec#teardown_mocks_for_rspec()","rdoc::options#template_dir_for()","rdoc::generator::darkfish#template_for()","rdoc::generator::darkfish#template_result()","rspec::mocks::andwraporiginalimplementation#terminal_action=()","testrakepathmap#test_9d_returns_partial_dirname()","rdoc::markup::formattertestcase#test_accept_blank_line()","rdoc::markup::formattertestcase#test_accept_block_quote()","rdoc::markup::formattertestcase#test_accept_document()","rdoc::markup::formattertestcase#test_accept_heading()","rdoc::markup::formattertestcase#test_accept_heading_1()","rdoc::markup::formattertestcase#test_accept_heading_2()","rdoc::markup::formattertestcase#test_accept_heading_3()","rdoc::markup::formattertestcase#test_accept_heading_4()","rdoc::markup::formattertestcase#test_accept_heading_b()","rdoc::markup::textformattertestcase#test_accept_heading_indent()","rdoc::markup::formattertestcase#test_accept_heading_suppressed_crossref()","rdoc::markup::formattertestcase#test_accept_list_end_bullet()","rdoc::markup::formattertestcase#test_accept_list_end_label()","rdoc::markup::formattertestcase#test_accept_list_end_lalpha()","rdoc::markup::formattertestcase#test_accept_list_end_note()","rdoc::markup::formattertestcase#test_accept_list_end_number()","rdoc::markup::formattertestcase#test_accept_list_end_ualpha()","rdoc::markup::formattertestcase#test_accept_list_item_end_bullet()","rdoc::markup::formattertestcase#test_accept_list_item_end_label()","rdoc::markup::formattertestcase#test_accept_list_item_end_lalpha()","rdoc::markup::formattertestcase#test_accept_list_item_end_note()","rdoc::markup::formattertestcase#test_accept_list_item_end_number()","rdoc::markup::formattertestcase#test_accept_list_item_end_ualpha()","rdoc::markup::formattertestcase#test_accept_list_item_start_bullet()","rdoc::markup::formattertestcase#test_accept_list_item_start_label()","rdoc::markup::formattertestcase#test_accept_list_item_start_lalpha()","rdoc::markup::formattertestcase#test_accept_list_item_start_note()","rdoc::markup::formattertestcase#test_accept_list_item_start_note_2()","rdoc::markup::formattertestcase#test_accept_list_item_start_note_multi_description()","rdoc::markup::formattertestcase#test_accept_list_item_start_note_multi_label()","rdoc::markup::formattertestcase#test_accept_list_item_start_number()","rdoc::markup::formattertestcase#test_accept_list_item_start_ualpha()","rdoc::markup::formattertestcase#test_accept_list_start_bullet()","rdoc::markup::formattertestcase#test_accept_list_start_label()","rdoc::markup::formattertestcase#test_accept_list_start_lalpha()","rdoc::markup::formattertestcase#test_accept_list_start_note()","rdoc::markup::formattertestcase#test_accept_list_start_number()","rdoc::markup::formattertestcase#test_accept_list_start_ualpha()","rdoc::markup::formattertestcase#test_accept_paragraph()","rdoc::markup::formattertestcase#test_accept_paragraph_b()","rdoc::markup::formattertestcase#test_accept_paragraph_br()","rdoc::markup::formattertestcase#test_accept_paragraph_break()","rdoc::markup::formattertestcase#test_accept_paragraph_i()","rdoc::markup::textformattertestcase#test_accept_paragraph_indent()","rdoc::markup::formattertestcase#test_accept_paragraph_plus()","rdoc::markup::formattertestcase#test_accept_paragraph_star()","rdoc::markup::formattertestcase#test_accept_paragraph_underscore()","rdoc::markup::textformattertestcase#test_accept_paragraph_wrap()","rdoc::markup::formattertestcase#test_accept_raw()","rdoc::markup::formattertestcase#test_accept_rule()","rdoc::markup::textformattertestcase#test_accept_rule_indent()","rdoc::markup::formattertestcase#test_accept_verbatim()","rdoc::markup::textformattertestcase#test_accept_verbatim_big_indent()","rdoc::markup::textformattertestcase#test_accept_verbatim_indent()","testraketaskwitharguments#test_actions_of_various_arity_are_ok_with_args()","testrakefilelist#test_add_default_exclude_list()","testrakefilelist#test_add_many()","testrakefilelist#test_add_matching()","testrakefilelist#test_add_return()","testraketaskarguments#test_all_and_extra_arguments_with_named_arguments()","testraketaskarguments#test_all_and_extra_arguments_without_named_arguments()","testrakemultitask#test_all_multitasks_wait_on_slow_prerequisites()","testraketask#test_all_prerequisite_tasks_does_not_include_duplicates()","testraketask#test_all_prerequisite_tasks_includes_all_prerequisites()","testraketask#test_all_prerequisite_tasks_includes_self_on_cyclic_dependencies()","testraketask#test_always_multitask()","testraketaskmanager#test_anonymous_namespace()","testrakefunctional#test_anonymous_tasks_can_be_invoked_indirectly()","testrakefilelist#test_append()","testrakeinvocationchain#test_append_one_circular()","testrakefilelist#test_append_pathname()","testrakeinvocationchain#test_append_two_circular()","testrakeinvocationchain#test_append_with_one_argument()","testraketaskwitharguments#test_arg_list_is_empty_if_no_args_given()","testraketaskarguments#test_args_do_not_reference_env_values()","testraketaskwitharguments#test_args_given()","testraketaskarguments#test_args_knows_its_names()","testraketaskwitharguments#test_args_not_passed_if_no_arg_names()","testraketaskwitharguments#test_args_not_passed_if_no_prereq_names_on_multitask()","testraketaskwitharguments#test_args_not_passed_if_no_prereq_names_on_task()","testraketaskwitharguments#test_arguments_are_passed_to_all_blocks()","testraketaskwitharguments#test_arguments_are_passed_to_block()","testrakefilelist#test_array_comparisons()","testrakefilelist#test_array_equality()","testrakefilelist#test_array_operators()","testraketask#test_arrays_can_be_prerequisites()","rdoc::markup::textformattertestcase#test_attributes()","testrakeapplicationoptions#test_backtrace()","testrakeapplicationoptions#test_backtrace_with_error()","testrakeapplicationoptions#test_backtrace_with_following_task_name()","testrakeapplicationoptions#test_backtrace_with_stderr()","testrakeapplicationoptions#test_backtrace_with_stdout()","testrakeapplicationoptions#test_bad_option()","testrakeapplication#test_bad_run()","testrakeapplication#test_bad_run_includes_exception_name()","testrakeapplication#test_bad_run_with_backtrace()","testrakeapplication#test_bad_run_with_trace()","testthreadhistorydisplay#test_banner()","testrakefilelist#test_basic_array_functions()","testbacktracesuppression#test_bin_rake_suppressed()","testrakefunctional#test_block_verbose_false_should_not_show_command()","testrakefunctional#test_block_verbose_true_should_show_command()","testraketaskwitharguments#test_block_with_no_parameters_is_ok()","testrakeapplication#test_building_imported_files_on_demand()","testrakefunctional#test_by_default_rakelib_files_are_included()","testraketask#test_can_double_invoke_with_reenable()","testraketaskargumentparsing#test_can_handle_commas_in_args()","testraketaskargumentparsing#test_can_handle_spaces_between_args()","testrakefunctional#test_can_invoke_task_in_nested_namespace()","testrakefunctional#test_can_invoke_task_in_toplevel_namespace()","testrakerequire#test_can_load_rake_library()","testrake#test_can_override_application()","testrakedirectorytask#test_can_use_blocks()","testrakedirectorytask#test_can_use_pathname()","testraketaskarguments#test_child_hides_parent_arg_names()","testrakefilelist#test_claim_to_be_a_filelist_instance()","testrakefilelist#test_claim_to_be_a_kind_of_array()","testrakefilelist#test_claim_to_be_a_kind_of_filelist()","testrakeclean#test_clean()","testrakeclean#test_cleanup()","testrakeclean#test_cleanup_ignores_missing_files()","testraketask#test_clear()","testraketask#test_clear_actions()","testraketask#test_clear_comments()","testrakefilelist#test_clear_ignore_patterns()","testraketask#test_clear_prerequisites()","testrakepackagetask#test_clone()","testrakefilelist#test_clone_and_dup()","testrakefilelist#test_cloned_items_stay_frozen()","testrakeftpfile#test_close_date()","testrakerules#test_close_matches_on_name_do_not_trigger_rule()","testrakefunctional#test_comment_after_desc_is_ignored()","testrakefunctional#test_comment_before_desc_is_ignored()","testrakefunctional#test_comment_before_task_acts_like_desc()","testrakefunctional#test_comment_separated_from_task_by_blank_line_is_not_picked_up()","testraketask#test_comment_setting()","testraketask#test_comments_do_not_set()","testraketask#test_comments_is_nil()","testraketask#test_comments_with_decimal_points()","testraketask#test_comments_with_sentences()","testraketask#test_comments_with_tabbed_sentences()","testrakepathmap#test_complex_patterns()","testrakescope#test_conj_against_two_elements()","testrakeinvocationchain#test_conj_on_invocation_chains()","testlinkedlist#test_conjunction()","testthreadhistorydisplay#test_continue()","testlinkedlist#test_conversion_to_string()","testlinkedlist#test_conversion_with_inspect()","testrakefunctional#test_correct_number_of_tasks_reported()","testraketaskmanager#test_correctly_scoped_prerequisites_are_invoked()","testrakecpucounter#test_count()","testrakecpucounter::testclassmethod#test_count()","testrakecpucounter::testclassmethod#test_count_nil()","testrakecpucounter::testclassmethod#test_count_raise()","testrakecpucounter#test_count_with_default_nil()","testrakecpucounter#test_count_with_default_raise()","testrakeearlytime#test_create()","testrakefilelist#test_create()","testraketask#test_create()","testraketaskmanager#test_create_filetask_in_namespace()","testraketaskmanager#test_create_task_manager()","testrakefilelist#test_create_with_args()","testrakefilelist#test_create_with_block()","testrakefilelist#test_create_with_brackets()","testrakefilelist#test_create_with_brackets_and_filelist()","testrakefilelist#test_create_with_pathname()","testrakerules#test_create_with_source()","testraketaskarguments#test_creating_new_argument_scopes()","testrakefilelist#test_curly_bracket_pattern()","testrakepathmap#test_d_returns_dirname()","testrakefunctional#test_dash_f_with_no_arg_foils_rakefile_lookup()","testrakepathmap#test_dash_returns_empty_string()","testraketaskarguments#test_default_arguments_that_dont_match_names_are_ignored()","testraketaskarguments#test_default_arguments_values_can_be_merged()","testrakefilelist#test_default_exclude()","testrakeapplicationoptions#test_default_options()","testrakeapplicationoptions#test_default_task_collection()","testraketaskmanager#test_define_namespace_in_namespace()","testraketaskmanager#test_define_namespaced_task()","testraketaskmanager#test_define_task()","testraketask#test_defined()","testrakefilelist#test_delegating_methods_do_not_include_to_a_or_to_ary()","testrakeapplicationoptions#test_describe()","testrakeapplication#test_describe_tasks()","testrakeapplicationoptions#test_describe_with_pattern()","testrakedirectorytask#test_directory()","testrakefilecreationtask#test_directory()","testrakeftpfile#test_directory()","testrakedirectorytask#test_directory_colon()","testrakedirectorytask#test_directory_win32()","testrakeapplication#test_display_exception_details()","testrakeapplication#test_display_exception_details_cause()","testrakeapplication#test_display_exception_details_cause_loop()","testrakeapplication#test_display_prereqs()","testrakeapplication#test_display_task_run()","testrakeapplication#test_display_tasks()","testrakeapplication#test_display_tasks_with_long_comments()","testrakeapplication#test_display_tasks_with_long_comments_to_a_non_tty_shows_entire_comment()","testrakeapplication#test_display_tasks_with_task_name_wider_than_tty_display()","testrakeapplication#test_display_tasks_with_very_long_task_name_to_a_non_tty_shows_name_and_comment()","testrakefilelist#test_dont_claim_to_be_an_array_instance()","testrakefunctional#test_dot_rake_files_can_be_loaded_with_dash_r()","testrakeapplicationoptions#test_dry_run()","testrakefunctional#test_dry_run()","testrakefunctional#test_dry_run_bug()","testraketask#test_dry_run_prevents_actions()","testrakefilelist#test_dup_and_clone_replicate_taint()","testrakefilelist#test_duped_items_will_thaw()","testraketask#test_duplicate_comments()","testrake#test_each_dir_parent()","testrakefilelist#test_egrep_returns_0_if_no_matches()","testrakefilelist#test_egrep_with_block()","testrakefilelist#test_egrep_with_error()","testrakefilelist#test_egrep_with_output()","testraketaskarguments#test_empty_arg_list_is_empty()","testraketaskargumentparsing#test_empty_args()","testlinkedlist#test_empty_list()","rdoc::markup::formattertestcase#test_end_accepting()","testraketaskarguments#test_enumerable_behavior()","testrakefilelist#test_enumeration_methods()","testrakefunctional#test_env_available_at_task_scope()","testrakefunctional#test_env_available_at_top_scope()","testrakeapplicationoptions#test_environment_and_tasks_together()","testrakeapplicationoptions#test_environment_definition()","testrakeearlytime#test_equality()","testraketestthreadpool#test_exceptions()","testrakefilelist#test_exclude()","testrakefilelist#test_exclude_pathname()","testrakefilelist#test_exclude_return_on_create()","testrakefilelist#test_exclude_with_alternate_file_seps()","testrakefilelist#test_exclude_with_string_return_on_create()","testrakefilelist#test_excluding_via_block()","testrakeapplicationoptions#test_execute()","testrakeapplicationoptions#test_execute_and_continue()","testrakeapplicationoptions#test_execute_and_print()","testrakefilelist#test_existing()","testrakefilelist#test_existing!()","testrakefiletask#test_existing_file_depends_on_non_existing_file()","testrakepathmapexplode#test_explode()","testrakepathnameextensions#test_ext_works_on_pathnames()","testraketask#test_extended_comments()","testrakeextension#test_extension_complains_when_a_method_that_is_present()","testraketaskarguments#test_extra_args_with_less_than_named_arguments()","testraketaskarguments#test_extra_names_are_nil()","testraketaskwitharguments#test_extra_parameters_are_ignored()","testrakepathmap#test_f_returns_basename()","testrakefunctional#test_failing_test_sets_exit_status()","testrakedefinitions#test_falsey_dependencies()","testrakeftpfile#test_far_date()","testrakefunctional#test_file_creation_task()","testrakefiletask#test_file_depends_on_task_depend_on_file()","testraketesttask#test_file_list_env_test()","testrakefunctional#test_file_list_is_requirable_separately()","testrakefilelistpathmap#test_file_list_supports_pathmap()","testrakerules#test_file_names_beginning_with_dot_can_be_tricked_into_referring_to_file()","testrakerules#test_file_names_beginning_with_dot_can_be_wrapped_in_lambda()","testrakerules#test_file_names_containing_percent_can_be_wrapped_in_lambda()","testrakefiletask#test_file_need()","testrakefilecreationtask#test_file_needed()","testrakedefinitions#test_file_task()","testrakefunctional#test_file_task_are_not_scoped_by_namespaces()","testrakefunctional#test_file_task_dependencies_scoped_by_namespaces()","testrakefiletask#test_file_times_new_depend_on_regular_task_timestamps()","testrakefiletask#test_file_times_new_depends_on_old()","testrakefiletask#test_file_times_old_depends_on_new()","testrakefilelist#test_file_utils_can_use_filelists()","testrakefileutils#test_file_utils_methods_are_available_at_top_level()","testrakefilelist#test_filelist_ext()","testraketask#test_filelists_can_be_prerequisites()","rake::testtask#test_files=()","testrakefileutils#test_fileutils_methods_dont_leak()","testraketask#test_find()","testrakeapplication#test_finding_rakefile()","testrakefilelist#test_flatten()","testrakeftpfile#test_general()","testraketaskmanagerargumentresolution#test_good_arg_patterns()","testrakeapplication#test_good_run()","testrakefilelist#test_gsub()","testrakefilelist#test_gsub!()","testrakeapplication#test_handle_options_should_not_strip_options_from_argv()","testrakeapplication#test_handle_options_trace_default_is_stderr()","testrakeapplication#test_handle_options_trace_does_not_eat_following_task_names()","testrakeapplication#test_handle_options_trace_overrides_to_stdout()","testraketaskarguments#test_has_key()","testrakeapplicationoptions#test_help()","testrakefilelist#test_ignore_special()","testrakedefinitions#test_implicit_file_dependencies()","testrakefunctional#test_implicit_system()","testraketoplevelfunctions#test_import()","testrakefunctional#test_imports()","testrakefilelist#test_include_with_another_array()","testrakefilelist#test_include_with_another_filelist()","testrakefilelist#test_include_with_pathname()","testrakedefinitions#test_incremental_definitions()","testraketaskmanager#test_index()","testrakepackagetask#test_initialize()","testraketesttask#test_initialize()","testrakepackagetask#test_initialize_no_version()","testrakepackagetask#test_initialize_noversion()","testraketesttask#test_initialize_override()","testrakefunctional#test_inline_verbose_default_should_show_command()","testrakefunctional#test_inline_verbose_false_should_not_show_command()","testrakefunctional#test_inline_verbose_true_should_show_command()","testraketask#test_inspect()","testrakefilelist#test_inspect_pending()","testraketask#test_interspersed_duplicate_comments()","testrakefunctional#test_invalid_command_line_options()","testraketask#test_investigation_output()","testraketask#test_invoke()","testraketask#test_invoke_with_circular_dependencies()","testthreadhistorydisplay#test_item_dequeued()","testthreadhistorydisplay#test_item_queued()","testrakeapplicationoptions#test_jobs()","testraketaskargumentparsing#test_keeps_embedded_spaces()","testrakelatetime#test_late_time_comparisons()","testrakeapplicationoptions#test_libdir()","testraketesttask#test_libs_equals()","testraketesttask#test_libs_equals_empty()","rdoc::markup::formattertestcase#test_list_nested()","rdoc::markup::formattertestcase#test_list_verbatim()","testlinkedlist#test_list_with_one_item()","testlinkedlist#test_list_with_several_items()","testlinkedlist#test_lists_are_enumerable()","testlinkedlist#test_lists_are_structurally_equivalent()","testrakefileutils#test_ln()","testrakeapplication#test_load_from_calculated_system_rakefile()","testrakeapplication#test_load_from_system_rakefile()","testrakeapplication#test_load_rakefile()","testrakeapplication#test_load_rakefile_doesnt_print_rakefile_directory_from_same_dir()","testrakeapplication#test_load_rakefile_doesnt_print_rakefile_directory_from_subdir_if_silent()","testrakeapplication#test_load_rakefile_from_subdir()","testrakeapplication#test_load_rakefile_not_found()","testrakeapplication#test_load_rakefile_prints_rakefile_directory_from_subdir()","testrakeapplication#test_loading_imports()","testrakefunctional#test_long_description()","testraketaskmanager#test_lookup_with_explicit_scopes()","testrakeinvocationchain#test_make_on_invocation_chains()","testlinkedlist#test_make_with_no_arguments()","testlinkedlist#test_make_with_one_argument()","testlinkedlist#test_make_with_two_arguments()","testrakefilelist#test_match()","testrakeinvocationchain#test_member_eh_one()","testrakeinvocationchain#test_member_eh_two()","testrakeextension#test_methods_actually_exist()","testrakedefinitions#test_missing_dependencies()","testraketoplevelfunctions#test_missing_other_constant()","testrakeapplicationoptions#test_missing_require()","testrakebacktrace#test_multi_collapse()","testrakefunctional#test_multi_desc()","testraketask#test_multi_invocations()","testrakeapplicationoptions#test_multiline_environment_definition()","testraketask#test_multiple_comments()","testthreadhistorydisplay#test_multiple_items()","testrakefilelist#test_multiple_patterns()","testrakepathmap#test_multiple_patterns()","testrakerules#test_multiple_rules1()","testrakerules#test_multiple_rules2()","testraketaskarguments#test_multiple_values_in_args()","testrakeapplicationoptions#test_multitask()","testrakemultitask#test_multitasks_with_parameters()","testrakepathmap#test_n_returns_basename_without_extension()","testraketaskwitharguments#test_name_and_needs()","testraketaskwitharguments#test_name_args_and_prereqs()","testraketaskmanager#test_name_lookup()","testraketaskmanager#test_name_lookup_in_multiple_scopes()","testraketaskmanager#test_name_lookup_with_implicit_file_tasks()","testraketaskmanager#test_name_lookup_with_nonexistent_task()","testraketaskargumentparsing#test_name_only()","testraketaskwitharguments#test_name_with_args()","testraketaskarguments#test_named_args()","testraketaskwitharguments#test_named_args_are_passed_to_prereqs()","testraketoplevelfunctions#test_namespace()","testrakedsl#test_namespace_command()","testrakedsl#test_namespace_command_with_a_string_like_object()","testrakedsl#test_namespace_command_with_bad_name()","testrakenamespace#test_namespace_creation()","testrakenamespace#test_namespace_lookup()","testrakenamespace#test_namespace_reports_tasks_it_owns()","testraketaskmanager#test_namespace_task_create()","testraketaskmanager#test_namespace_yields_same_namespace_as_returned()","testbacktracesuppression#test_near_system_dir_isnt_suppressed()","testrakefiletask#test_needed_eh_build_all()","testrakefiletask#test_needed_eh_dependency()","testrakefiletask#test_needed_eh_exists()","testraketaskwitharguments#test_no_args_given()","testrakedsl#test_no_commands_constant()","testrakereducecompat#test_no_deprecated_dsl()","testrakeapplicationoptions#test_no_deprecated_messages()","testraketask#test_no_double_invoke()","testraketaskargumentparsing#test_no_rakeopt()","testrakefilecreationtask#test_no_retriggers_on_file_task()","testrakefilecreationtask#test_no_retriggers_on_filecreate_task()","testrakeapplicationoptions#test_no_search()","testrakeapplicationoptions#test_no_system()","testrakefunctional#test_no_system()","testrakeextension#test_no_warning_when_defining_ok_method()","testrakerules#test_non_extension_rule_name_refers_to_file()","testrakefunctional#test_nosearch_with_rakefile_uses_local_rakefile()","testrakefunctional#test_nosearch_without_rakefile_and_no_system_fails()","testrakefunctional#test_nosearch_without_rakefile_finds_system()","testrakeapplication#test_not_finding_rakefile()","testrakefileutils#test_nowrite()","testraketaskargumentparsing#test_one_argument()","testrake#test_original_dir_reports_current_dir()","testrakeearlytime#test_original_time_compare_is_not_messed_up()","testrakefilelist#test_other_array_returning_methods()","testrakepathmap#test_p_returns_entire_pathname()","testrakepackagetask#test_package_name()","testrakepackagetask#test_package_name_noversion()","testrakemakefileloader#test_parse()","testrakepathmap#test_partial_directory_selection_works_with_patterns()","testraketasklib#test_paste()","testrakescope#test_path_against_empty_scope()","testrakescope#test_path_against_one_element()","testrakescope#test_path_against_two_elements()","testrakepathnameextensions#test_path_map_works_on_pathnames()","testrakescope#test_path_with_task_name()","testrakescope#test_path_with_task_name_against_empty_scope()","testrakerules#test_pathmap_automatically_applies_to_name()","testrakepathmappartial#test_pathmap_partial()","testrakeraketestloader#test_pattern()","testrakepathmap#test_pattern_can_use_backreferences()","testraketesttask#test_pattern_equals()","testraketesttask#test_pattern_equals_test_files_equals()","testrakepathmap#test_pattern_returns_substitutions()","testrakepathmap#test_pattern_with_invalid_operator()","testrakepathmap#test_pattern_with_no_replacement_nor_block_substitutes_empty_string()","testrakepathmap#test_pattern_with_star_replacement_string_uses_block()","testrakepathmap#test_pattern_works_with_certain_valid_operators()","testrakepathmap#test_percent_percent_returns_percent()","testrakerules#test_plain_strings_are_just_filenames()","testrakerules#test_plain_strings_as_dependents_refer_to_files()","testraketestthreadpool#test_pool_creates_the_correct_number_of_threads()","testraketestthreadpool#test_pool_executes_in_current_thread_for_zero_threads()","testraketestthreadpool#test_pool_executes_in_other_thread_for_pool_of_size_one()","testraketestthreadpool#test_pool_executes_in_two_other_threads_for_pool_of_size_two()","testraketestthreadpool#test_pool_future_does_not_duplicate_arguments()","testraketestthreadpool#test_pool_join_empties_queue()","testraketestthreadpool#test_pool_prevents_deadlock()","testraketestthreadpool#test_pool_reports_correct_results()","testrakeapplicationoptions#test_prereqs()","testrakefiletask#test_prerequisite_can_be_pathname()","testraketask#test_prerequisite_tasks_fails_if_prerequisites_are_undefined()","testraketask#test_prerequisite_tasks_honors_namespaces()","testraketask#test_prerequisite_tasks_returns_tasks_not_strings()","testrakeapplication#test_printing_original_exception_cause()","testprivateattrs#test_private_reader_is_private()","testprivateattrs#test_private_reader_returns_data()","testrakerules#test_proc_returning_lists_are_flattened_into_prereqs()","testrakefunctional#test_proper_namespace_access()","testrakeapplicationoptions#test_quiet()","testrakefunctional#test_rake_default()","testrakeapplication#test_rake_error_excludes_exception_name()","testrakefunctional#test_rake_error_on_bad_task()","testrakeapplicationoptions#test_rake_explicit_task_library()","testrakefunctional#test_rake_namespace_refers_to_toplevel()","testrakeapplicationoptions#test_rakefile()","testrakeapplicationoptions#test_rakelib()","testraketaskargumentparsing#test_rakeopt_with_blank_options()","testraketaskargumentparsing#test_rakeopt_with_silent_options()","testrakefunctional#test_rbext()","testrakerules#test_recursive_rules_that_dont_terminate_will_overflow()","testrakerules#test_recursive_rules_will_work_as_long_as_they_terminate()","testrakefunctional#test_regenerate_imports()","testrakerules#test_regex_rule_with_args()","testrakerules#test_regex_rule_with_args_and_lambda_prereq()","testrakefilelist#test_reject()","testrakeapplicationoptions#test_require()","testrakepathmap#test_returns_self_with_no_args()","testrakefileutils#test_rm_filelist()","testrakefileutils#test_rm_one_file()","testrakefileutils#test_rm_two_files()","testrakefileutils#test_ruby_with_a_single_string_argument()","testrakefileutils#test_ruby_with_multiple_arguments()","testrakerules#test_rule_can_be_created_by_string()","testrakerules#test_rule_prereqs_can_be_created_by_string()","testrakerules#test_rule_rebuilds_obj_when_source_is_newer()","testrakerules#test_rule_runs_when_explicit_task_has_no_actions()","testrakerules#test_rule_with_method_prereq()","testrakerules#test_rule_with_one_arg_method_prereq()","testrakerules#test_rule_with_proc_dependent_will_trigger()","testrakerules#test_rule_with_two_sources_builds_both_sources()","testrakerules#test_rule_with_two_sources_but_one_missing_does_not_run()","testrakerules#test_rule_with_two_sources_runs_if_both_sources_are_present()","testrakefunctional#test_rules_chaining_to_file_task()","testrakerules#test_rules_with_bad_dependents_will_fail()","testraketesttask#test_run_code_direct()","testraketesttask#test_run_code_rake()","testraketesttask#test_run_code_rake_default_gem()","testraketesttask#test_run_code_testrb_ruby_1_8_2()","testraketesttask#test_run_code_testrb_ruby_1_8_6()","testrakeapplication#test_run_with_bad_options()","testrakemultitask#test_running_multitasks()","testrakepathmap#test_s_returns_file_separator()","testrakefileutils#test_safe_ln_failover_to_cp_on_not_implemented_error()","testrakefileutils#test_safe_ln_failover_to_cp_on_standard_error()","testrakefileutils#test_safe_ln_fails_on_script_error()","testrakenamespace#test_scope()","testrakerules#test_second_rule_doest_run_if_first_triggers()","testrakerules#test_second_rule_doest_run_if_first_triggers_with_reversed_rules()","testrakerules#test_second_rule_runs_when_first_rule_doesnt()","testrakefileutils#test_sh()","testrakefileutils#test_sh_bad_option()","testrakefileutils#test_sh_failure()","testrakefileutils#test_sh_noop()","testrakefileutils#test_sh_special_handling()","testrakefileutils#test_sh_verbose()","testrakefileutils#test_sh_verbose_false()","testrakefileutils#test_sh_verbose_flag_nil()","testrakefileutils#test_sh_with_a_single_string_argument()","testrakefileutils#test_sh_with_multiple_arguments()","testrakeapplication#test_show_lines()","testrakefunctional#test_signal_propagation_in_tests()","testrakeapplicationoptions#test_silent()","testrakebacktrace#test_single_collapse()","testrakerules#test_single_dependent()","testrakefiletask#test_source_is_first_prerequisite()","testraketask#test_source_is_first_prerequisite()","testrakefiletask#test_sources_is_all_prerequisites()","testrakefilelist#test_special_return_delegating_methods_object_type()","testrakefileutils#test_split_all()","testrakefilelist#test_square_bracket_pattern()","testrakefunctional#test_stand_alone_filelist()","testrakefunctional#test_standalone_verbose_false_should_not_show_command()","testrakefunctional#test_standalone_verbose_true_should_show_command()","testrakeapplication#test_standard_exception_handling_invalid_option()","testrakeapplication#test_standard_exception_handling_other()","testrakeapplication#test_standard_exception_handling_system_exit()","testrakeapplication#test_standard_exception_handling_system_exit_nonzero()","rdoc::markup::formattertestcase#test_start_accepting()","testrakefilelist#test_string_ext()","testrakerules#test_string_rule_with_args()","testrakerules#test_string_rule_with_args_and_lambda_prereq()","testraketask#test_strings_can_be_prerequisites()","testrakefilelist#test_sub()","testrakefilelist#test_sub!()","testrakefilelist#test_sub_with_block()","testrakebacktrace#test_suppress_option()","testraketask#test_symbols_can_be_prerequisites()","testrakeftpfile#test_symlink()","testrakeapplicationoptions#test_system()","testrakefunctional#test_system()","testbacktracesuppression#test_system_dir_suppressed()","testrakefunctional#test_system_excludes_rakelib_files_too()","testrakedefinitions#test_task()","testrakefiletask#test_task_can_be_pathname()","testrakeapplicationoptions#test_task_collection()","testraketask#test_task_gives_name_on_to_s()","testraketask#test_task_list()","testrakeapplicationoptions#test_tasks()","testraketaskwitharguments#test_tasks_can_access_arguments_as_hash()","testraketask#test_tasks_can_be_traced()","testrakefunctional#test_tasks_can_reference_task_in_other_namespaces()","testrakefunctional#test_tasks_can_reference_task_in_same_namespace()","testrakeapplication#test_terminal_columns()","testraketaskargumentparsing#test_terminal_width_using_env()","testraketaskargumentparsing#test_terminal_width_using_hardcoded_80()","testraketaskargumentparsing#test_terminal_width_using_stty()","testraketaskargumentparsing#test_terminal_width_using_tput()","testraketaskargumentparsing#test_terminal_width_with_failure()","testraketesttask#test_test_files_equals()","testrakefunctional#test_test_task_descriptions()","testthreadhistorydisplay#test_thread_created()","testthreadhistorydisplay#test_thread_deleted()","testrakerequire#test_throws_error_if_library_not_found()","testraketask#test_timestamp_returns_latest_prereq_timestamp()","testraketask#test_timestamp_returns_now_if_all_prereqs_have_no_times()","testrakefilelist#test_to_array()","testrakeearlytime#test_to_s()","testrakelatetime#test_to_s()","testraketaskarguments#test_to_s()","testrakeinvocationchain#test_to_s_empty()","testrakefilelist#test_to_s_pending()","testrakefilelist#test_to_string()","testrakeapplicationoptions#test_trace()","testrakefunctional#test_trace_bug()","testtraceoutput#test_trace_handles_nil_objects()","testtraceoutput#test_trace_issues_single_io_for_args_multiple_strings()","testtraceoutput#test_trace_issues_single_io_for_args_multiple_strings_and_alternate_sep()","testtraceoutput#test_trace_issues_single_io_for_args_with_empty_args()","testrakeapplicationoptions#test_trace_rules()","testrakeapplicationoptions#test_trace_with_error()","testrakeapplicationoptions#test_trace_with_following_task_name()","testrakeapplicationoptions#test_trace_with_stderr()","testrakeapplicationoptions#test_trace_with_stdout()","testraketaskargumentparsing#test_treat_blank_arg_as_empty_string()","testrakescope#test_trim()","testrakeapplication#test_truncating_comments_to_a_non_tty()","testraketaskargumentparsing#test_two_arguments()","testrakepathmap#test_undefined_percent_causes_error()","testrakefilelist#test_unique()","testraketaskwitharguments#test_values_at()","testrakeapplicationoptions#test_verbose()","testrakefileutils#test_verbose()","testrakeapplicationoptions#test_version()","testrakefilecreationtask#test_very_early_timestamp()","testthreadhistorydisplay#test_waiting()","testraketoplevelfunctions#test_when_not_writing()","testraketoplevelfunctions#test_when_writing()","testrakeapplicationoptions#test_where()","testrakewin32#test_win32_backtrace_with_different_case()","testrakewin32#test_win32_system_dir_fallback_to_userprofile_otherwise()","testrakewin32#test_win32_system_dir_nil_of_no_env_vars()","testrakewin32#test_win32_system_dir_uses_appdata_when_no_home_or_home_combo()","testrakewin32#test_win32_system_dir_uses_home_if_defined()","testrakewin32#test_win32_system_dir_uses_homedrive_homepath_when_no_home_defined()","testrakeapplication#test_windows()","testrakepseudostatus#test_with_99_exit_status()","testrakepseudostatus#test_with_zero_exit_status()","testrakerequire#test_wont_reload_rake_library()","testrakepathmap#test_works_with_windows_separators()","testrakepathmap#test_x_returns_everything_but_extension()","testrakepathmap#test_x_returns_extension()","rdoc::markup::indentedparagraph#text()","rdoc::markup::paragraph#text()","rdoc::markup::raw#text()","rdoc::markup::verbatim#text()","rdoc::comment#text=()","rdoc::toplevel#text?()","rake::packagetask#tgz_file()","rspec::support::thread_local_data()","rspec::matchers::builtin::yieldcontrol#thrice()","rspec::mocks::messageexpectation#thrice()","rspec::matchers#throw_symbol()","rdoc::generator::darkfish#time_delta_string()","rspec::matchers::builtin::yieldcontrol#times()","rspec::mocks::messageexpectation#times()","rake::filecreationtask#timestamp()","rake::filetask#timestamp()","rake::task#timestamp()","rdoc::store#title()","rdoc::store#title=()","rdoc::parser::ruby#tk_nl?()","object#to()","rspec::expectations::blockexpectationtarget#to()","rspec::expectations::expectationtarget::instancemethods#to()","rspec::matchers::builtin::change#to()","rspec::matchers::builtin::changefromvalue#to()","lcs::change#to_a()","lcs::contextchange#to_a()","rake::filelist#to_a()","rake::filelist#to_a()","rake::taskarguments#to_a()","rake::filelist#to_ary()","rake::filelist#to_ary()","rspec::mocks::constantmutator::basemutator#to_constant()","rspec::mocks::constantmutator::constanthider#to_constant()","rspec::mocks::constantmutator::definedconstantreplacer#to_constant()","rspec::mocks::constantmutator::undefinedconstantsetter#to_constant()","rspec::core::hashimitatable#to_h()","rspec::core::legacyexamplegrouphash#to_h()","rake::taskarguments#to_hash()","rdoc::markup::tohtml#to_html()","rdoc::text#to_html()","rdoc::tokenstream::to_html()","rspec::support::stderrsplitter#to_io()","object#to_not()","rspec::expectations::blockexpectationtarget#to_not()","rspec::expectations::expectationtarget::instancemethods#to_not()","rspec::core::example::procsy#to_proc()","rspec::matchers::builtin::yieldprobe#to_proc()","rdoc::generator::pot::po#to_s()","rdoc::generator::pot::poentry#to_s()","rspec::core::example#to_s()","rspec::core::sharedexamplegroupmodule#to_s()","rspec::mocks::constant#to_s()","rspec::mocks::messageexpectation#to_s()","rspec::mocks::testdouble#to_s()","rspec::support::encodedstring#to_s()","rake::filelist#to_s()","rake::filelist#to_s()","rake::invocationchain#to_s()","rake::invocationchain::emptyinvocationchain#to_s()","rake::latetime#to_s()","rake::linkedlist#to_s()","rake::task#to_s()","rspec::matchers::builtin::output#to_stderr()","rspec::matchers::builtin::output#to_stderr_from_any_process()","rspec::matchers::builtin::output#to_stdout()","rspec::matchers::builtin::output#to_stdout_from_any_process()","rspec::support::encodedstring#to_str()","rdoc::markup::totableofcontents::to_toc()","fakedate::today()","rdoc::parser::rubytools#token_listener()","rdoc::markup::parser#token_pos()","rdoc::tokenstream#token_stream()","rdoc::markup::parser::tokenize()","rdoc::markup::parser#tokenize()","rdoc::tomdoc#tokenize()","rspec::support::source#tokens()","rspec::support::source#tokens_by_line_number()","rspec::support::source::token::tokens_from_ripper_tokens()","rdoc::tokenstream#tokens_to_s()","rdoc::comment#tomdoc?()","rdoc::context#top_level()","rdoc::require#top_level()","rake::application#top_level()","rspec::core::examplegroup::top_level?()","rspec::core::examplegroup::top_level_description()","rspec::core::notifications::summarynotification#totals_line()","rspec::mocks::constantmutator::definedconstantreplacer#transfer_nested_constants()","rspec::mocks::configuration#transfer_nested_constants?()","rdoc::i18n::locale#translate()","rdoc::i18n::text#translate()","rspec::core::runner::trap_interrupt()","lcs#traverse_balanced()","lcs::traverse_balanced()","rspec::core::world#traverse_example_group_trees_until()","rspec::core::world::null::traverse_example_group_trees_until()","lcs#traverse_sequences()","lcs::traverse_sequences()","rspec::core::examplegroup::traverse_tree_until()","rspec::core::configuration#treat_symbols_as_metadata_keys_with_true_values=()","rdoc::markup::tohtmlsnippet#truncate()","sdoc::helpers#truncate()","rspec::expectations::blocksnippetextractor::try_extracting_single_line_body_of()","rdoc::markup::formatter#tt?()","rdoc::markup::tottonly#tt_sections()","rspec::matchers::builtin::yieldcontrol#twice()","rspec::mocks::messageexpectation#twice()","rdoc::classmodule#type()","rdoc::methodattr#type()","rspec::support::source::expressionsequencenode#type()","rspec::support::source::node#type()","rspec::support::source::token#type()","rspec::mocks::messageexpectation::implementationdetails#unadvise()","rspec::mocks::simplemessageexpectation#unadvise()","lcs::change#unchanged?()","rspec::core::formatters::snippetextractor#unclosed_tokens_in_line_range()","rdoc::stats#undoc_params()","rspec::mocks::anyinstance::messagechains#unfulfilled_expectations()","rdoc::markup::parser#unget()","rdoc::parser::rubytools#unget_tk()","rspec::mocks::methodreference#unimplemented?()","rspec::mocks::verifyingexistingmethoddouble#unimplemented?()","rdoc::store#unique_classes()","rdoc::store#unique_classes_and_modules()","rdoc::store#unique_modules()","rspec::support::methodsignature#unlimited_args?()","rspec::support::mutex#unlock()","rdoc::markup::attributemanager#unmask_protected_sequences()","rspec::mocks::constant::unmutated()","lcs#unpatch()","lcs#unpatch!()","lcs::unpatch!()","rspec::mocks::marshalextension::unpatch!()","lcs#unpatch_me()","rspec::matchers::composable::unreadable_io?()","rspec::matchers::builtin::operatormatcher::unregister()","lcs::hunk#unshift()","rspec::mocks::anyinstance::proxy#unstub()","rspec::mocks::anyinstance::recorder#unstub()","rspec::mocks::syntax#unstub()","rdoc::classmodule#update_aliases()","rdoc::classmodule#update_extends()","rdoc::classmodule#update_includes()","rspec::core::example#update_inherited_metadata()","rspec::core::examplegroup::update_inherited_metadata()","rdoc::rdoc#update_output_dir()","rdoc::store#update_parser_of_file()","rdoc::context#upgrade_to_class()","rspec::mocks::methoddouble#usable_rspec_prepended_module()","rspec::matchers::builtin::operatormatcher::use_custom_matcher_or_delegate()","rdoc::parser::use_markup()","rspec::core::filterrules#use_only()","rspec::core::filterrules#use_only()","rdoc::markup::tordoc#use_prefix()","rspec::core::ordering::random#used?()","rspec::core::ordering::registry#used_random_seed?()","testrakeapplication#util_loader()","rspec::support::methodsignatureverifier#valid?()","rspec::support::methodsignatureverifier#valid?()","lcs::change::valid_action?()","rspec::mocks::constant#valid_name?()","rspec::support::loosesignatureverifier::signaturewithkeywordargumentsmatcher#valid_non_kw_args?()","rspec::support::methodsignature#valid_non_kw_args?()","rspec::matchers::builtin::exist::existencetest#valid_test?()","rspec::mocks::verifyingmethoddouble#validate_arguments!()","rspec::mocks::verifyingproxy#validate_arguments!()","rspec::matchers::builtin::exist::existencetest#validity_message()","rspec::matchers::builtin::changedetails#value_representation()","rake::taskarguments#values_at()","rspec::support::fuzzymatcher::values_match?()","rspec::expectations::negativeexpectationhandler::verb()","rspec::expectations::positiveexpectationhandler::verb()","rake::fileutilsext#verbose()","rake::fileutilsext#verbose()","rspec::mocks::verify()","rspec::mocks::anyinstance::recorder#verify()","rspec::mocks::methoddouble#verify()","rspec::mocks::proxy#verify()","rspec::mocks::rootspace#verify_all()","rspec::mocks::space#verify_all()","rspec::mocks::constantmutator::definedconstantreplacer#verify_constants_to_transfer!()","rspec::mocks::configuration#verify_doubled_constant_names?()","rspec::mocks::ordergroup#verify_invocation_order()","rspec::mocks::messageexpectation::implementationdetails#verify_messages_received()","rspec::mocks::simplemessageexpectation#verify_messages_received()","rspec::core::mockingadapters::flexmock#verify_mocks_for_rspec()","rspec::core::mockingadapters::mocha#verify_mocks_for_rspec()","rspec::core::mockingadapters::null#verify_mocks_for_rspec()","rspec::core::mockingadapters::rr#verify_mocks_for_rspec()","rspec::core::mockingadapters::rspec#verify_mocks_for_rspec()","rspec::support::stderrsplitter#verify_no_warnings!()","rspec::mocks::configuration#verify_partial_doubles=()","rspec::mocks::configuration#verify_partial_doubles?()","rspec::mocks::configuration#verifying_double_callbacks()","rspec::mocks::methoddouble#visibility()","rspec::mocks::methodreference#visibility()","rdoc::options#visibility=()","rspec::mocks::partialdoubleproxy#visibility_for()","rspec::mocks::proxy#visibility_for()","rspec::mocks::verifyingproxy#visibility_for()","rdoc::options#warn()","rdoc::parser::ruby#warn()","rspec::mocks::matchers::receivemessages#warn_about_block()","rspec::expectations::configuration#warn_about_potential_false_positives=()","rspec::expectations::configuration#warn_about_potential_false_positives?()","rspec::expectations::syntax#warn_about_should!()","rspec::mocks::syntax::warn_about_should!()","rspec::expectations::syntax#warn_about_should_unless_configured()","rspec::core::warnings#warn_deprecation()","rspec::support::warnings#warn_deprecation()","rspec::mocks::syntax::warn_unless_should_configured()","rspec::core::warnings#warn_with()","rspec::support::warnings#warn_with()","rspec::support::warnings#warning()","rspec::support::warning_notifier()","rspec::core::configuration#warnings=()","rspec::core::configuration#warnings?()","rspec::mocks::configuration#when_declaring_verifying_double()","rspec::core::configuration#when_first_matching_example_defined()","rspec::mocks::directobjectreference#when_loaded()","rspec::mocks::namedobjectreference#when_loaded()","rake::fileutilsext#when_writing()","rake::fileutilsext#when_writing()","rspec::support::os#windows?()","testrakefileutils#windows?()","rspec::support::os#windows_file_path?()","rspec::matchers::builtin::respondto#with()","rspec::mocks::anyinstance::chain#with()","rspec::mocks::messageexpectation#with()","rspec::mocks::verifyingmessageexpectation#with()","rspec::matchers::builtin::respondto#with_any_keywords()","rspec::matchers::builtin::match#with_captures()","rake::taskarguments#with_defaults()","rdoc::classmodule#with_documentation?()","rspec::support::objectformatter#with_entering_structure()","rspec::support::shellout#with_env()","rspec::support::methodsignatureverifier#with_expectation()","rspec::support::methodsignatureverifier#with_expectation()","rspec::support::with_failure_notifier()","rspec::core::sharedexamplegroupinclusionstackframe::with_frame()","rspec::support::withisolatedstderr#with_isolated_stderr()","rspec::matchers::builtin::respondto#with_keywords()","rspec::expectations::expectationhelper::with_matcher()","rspec::matchers::builtin::raiseerror#with_message()","rspec::core::examplegroup::with_replaced_metadata()","rspec::mocks::classnewmethodreference#with_signature()","rspec::mocks::methodreference#with_signature()","rspec::mocks::verifyingexistingclassnewmethoddouble#with_signature()","rspec::mocks::verifyingexistingmethoddouble#with_signature()","rspec::core::configuration#with_suite_hooks()","rspec::mocks::with_temporary_scope()","rspec::core::formatters::exceptionpresenter::factory::commonbacktracetruncater#with_truncated_backtrace()","rspec::matchers::builtin::respondto#with_unlimited_arguments()","rspec::mocks::examplemethods#without_partial_double_verification()","lcs::spechelper#word_sequence()","rspec::world()","rdoc::markup::tordoc#wrap()","rdoc::text#wrap()","rspec::core::example::procsy#wrap()","rspec::core::formatters::consolecodes#wrap()","rspec::core::notifications::nullcolorizer#wrap()","rspec::expectations::legacymatcheradapter::wrap()","rspec::expectations::legacymatcheradapter::wrap()","rspec::support::stderrsplitter#write()","rdoc::options#write_options()","rdoc::generator::darkfish#write_style_sheet()","rspec::matchers#yield_control()","rspec::mocks::configuration#yield_receiver_to_any_instance_implementation_blocks?()","rspec::mocks::messageexpectation::implementationdetails#yield_receiver_to_implementation_block?()","rspec::matchers#yield_successive_args()","rspec::matchers#yield_with_args()","rspec::matchers#yield_with_no_args()","rspec::matchers::builtin::yieldprobe#yielded_once?()","rdoc::parser::zip?()","rake::packagetask#zip_file()","testrakefiletask#ztest_file_deletes_on_failure()","rspec::matchers::composable#|()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Array","","classes/Array.html","",""],["BasicObject","","classes/BasicObject.html","","<p>The legacy `:should` syntax adds the following methods directly to `BasicObject` so that they are available …\n"],["Class","","classes/Class.html","","<p>The legacy `:should` syntax adds the `any_instance` to `Class`. We generally recommend you use the newer …\n"],["Diff","","classes/Diff.html","",""],["Diff::LCS::Internals","","classes/Diff/LCS/Internals.html","",""],["Diff::LCS::Ldiff","","classes/Diff/LCS/Ldiff.html","",""],["FakeDate","","classes/FakeDate.html","",""],["FileCreation","","classes/FileCreation.html","",""],["FileUtils","","classes/FileUtils.html","",""],["FourthDimensional","","classes/FourthDimensional.html","",""],["FourthDimensional::Error","","classes/FourthDimensional/Error.html","",""],["FourthDimensional::Event","","classes/FourthDimensional/Event.html","","<p>FourthDimensional::Event\n<p>Events act as a log primarily focused around an aggregate. When persisted it …\n"],["LCS","","classes/LCS.html","","<p>How Diff Works (by Mark-Jason Dominus)\n<p>I once read an article written by the authors of <code>diff</code>; they said …\n"],["LCS::BalancedCallbacks","","classes/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which only returns the event itself. …\n"],["LCS::Block","","classes/LCS/Block.html","","<p>A block is an operation removing, adding, or changing a group of items. Basically, this is just a list …\n"],["LCS::Change","","classes/LCS/Change.html","","<p>Represents a simplistic (non-contextual) change. Represents the removal or addition of an element from …\n"],["LCS::ContextChange","","classes/LCS/ContextChange.html","","<p>Represents a contextual change. Contains the position and values of the elements in the old and the new …\n"],["LCS::ContextDiffCallbacks","","classes/LCS/ContextDiffCallbacks.html","","<p>This will produce a compound array of contextual diff change objects. Each element in the #diffs array …\n"],["LCS::DefaultCallbacks","","classes/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which only returns the event itself. …\n"],["LCS::DiffCallbacks","","classes/LCS/DiffCallbacks.html","","<p>This will produce a compound array of simple diff change objects. Each element in the #diffs array is …\n"],["LCS::HTMLDiff","","classes/LCS/HTMLDiff.html","",""],["LCS::HTMLDiff::Callbacks","","classes/LCS/HTMLDiff/Callbacks.html","",""],["LCS::Hunk","","classes/LCS/Hunk.html","","<p>A Hunk is a group of Blocks which overlap because of the context surrounding each block. (So if we&#39;re …\n"],["LCS::SDiffCallbacks","","classes/LCS/SDiffCallbacks.html","","<p>This will produce a simple array of diff change objects. Each element in the #diffs array is a single …\n"],["LCS::SequenceCallbacks","","classes/LCS/DefaultCallbacks.html","","<p>This callback object implements the default set of callback events, which only returns the event itself. …\n"],["LCS::SpecHelper","","classes/LCS/SpecHelper.html","",""],["LCS::SpecHelper::Matchers","","classes/LCS/SpecHelper/Matchers.html","",""],["Module","","classes/Module.html","",""],["Object","","classes/Object.html","",""],["Pathname","","classes/Pathname.html","",""],["RDoc","","classes/RDoc.html","","<p>RDoc produces documentation for Ruby source files by parsing the source and extracting the definition …\n"],["RDoc::Alias","","classes/RDoc/Alias.html","","<p>Represent an alias, which is an old_name/new_name pair associated with a particular context\n"],["RDoc::AnonClass","","classes/RDoc/AnonClass.html","","<p>An anonymous class like:\n\n<pre><code>c = Class.new do end\n</code></pre>\n<p>AnonClass is currently not used.\n"],["RDoc::AnyMethod","","classes/RDoc/AnyMethod.html","","<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","classes/RDoc/Attr.html","","<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n"],["RDoc::ClassModule","","classes/RDoc/ClassModule.html","","<p>ClassModule is the base class for objects representing either a class or a module.\n"],["RDoc::CodeObject","","classes/RDoc/CodeObject.html","","<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts (which are containers) and …\n"],["RDoc::Comment","","classes/RDoc/Comment.html","","<p>A comment holds the text comment for a RDoc::CodeObject and provides a unified way of cleaning it up …\n"],["RDoc::Constant","","classes/RDoc/Constant.html","","<p>A constant\n"],["RDoc::Context","","classes/RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes, aliases, requires, and includes. …\n"],["RDoc::Context::Section","","classes/RDoc/Context/Section.html","","<p>A section of documentation like:\n\n<pre><code># :section: The title\n# The body\n</code></pre>\n<p>Sections can be referenced multiple times …\n"],["RDoc::CrossReference","","classes/RDoc/CrossReference.html","","<p>RDoc::CrossReference is a reusable way to create cross references for names.\n"],["RDoc::ERBIO","","classes/RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson and Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::ERBPartial","","classes/RDoc/ERBPartial.html","","<p>Allows an ERB template to be rendered in the context (binding) of an existing ERB template evaluation. …\n"],["RDoc::Encoding","","classes/RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load files and convert them to the …\n"],["RDoc::Error","","classes/RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Extend","","classes/RDoc/Extend.html","","<p>A Module extension to a class with #extend\n\n<pre><code>RDoc::Extend.new &#39;Enumerable&#39;, &#39;comment ...&#39;\n</code></pre>\n"],["RDoc::Generator","","classes/RDoc/Generator.html","","<p>RDoc uses generators to turn parsed source code in the form of an RDoc::CodeObject tree into some form …\n"],["RDoc::Generator::Darkfish","","classes/RDoc/Generator/Darkfish.html","","<p>Darkfish RDoc HTML Generator\n<p>$Id: darkfish.rb 52 2009-01-07 02:08:11Z deveiant $\n<p>Author/s\n"],["RDoc::Generator::JsonIndex","","classes/RDoc/Generator/JsonIndex.html","","<p>The JsonIndex generator is designed to complement an HTML generator and produces a JSON search index. …\n"],["RDoc::Generator::Markup","","classes/RDoc/Generator/Markup.html","","<p>Handle common RDoc::Markup tasks for various CodeObjects\n<p>This module is loaded by generators.  It allows …\n"],["RDoc::Generator::POT","","classes/RDoc/Generator/POT.html","","<p>Generates a POT file.\n<p>Here is a translator work flow with the generator.\n<p>Create .pot\n"],["RDoc::Generator::POT::MessageExtractor","","classes/RDoc/Generator/POT/MessageExtractor.html","","<p>Extracts message from RDoc::Store\n"],["RDoc::Generator::POT::PO","","classes/RDoc/Generator/POT/PO.html","","<p>Generates a PO format text\n"],["RDoc::Generator::POT::POEntry","","classes/RDoc/Generator/POT/POEntry.html","","<p>A PO entry in PO\n"],["RDoc::Generator::RI","","classes/RDoc/Generator/RI.html","","<p>Generates ri data files\n"],["RDoc::Generator::SDoc","","classes/RDoc/Generator/SDoc.html","",""],["RDoc::Generator::SDoc::FilesTree","","classes/RDoc/Generator/SDoc/FilesTree.html","",""],["RDoc::GhostMethod","","classes/RDoc/GhostMethod.html","","<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::I18n","","classes/RDoc/I18n.html","","<p>This module provides i18n related features.\n"],["RDoc::I18n::Locale","","classes/RDoc/I18n/Locale.html","","<p>A message container for a locale.\n<p>This object provides the following two features:\n\n<pre><code>* Loads translated messages ...\n</code></pre>\n"],["RDoc::I18n::Text","","classes/RDoc/I18n/Text.html","","<p>An i18n supported text.\n<p>This object provides the following two features:\n\n<pre><code>* Extracts translation messages ...\n</code></pre>\n"],["RDoc::Include","","classes/RDoc/Include.html","","<p>A Module included in a class with #include\n\n<pre><code>RDoc::Include.new &#39;Enumerable&#39;, &#39;comment ...&#39;\n</code></pre>\n"],["RDoc::Markdown","","classes/RDoc/Markdown.html","","<p>RDoc::Markdown as described by the markdown syntax.\n<p>To choose Markdown as your only default format see …\n"],["RDoc::Markdown::Literals","","classes/RDoc/Markdown/Literals.html","",""],["RDoc::Markdown::Literals::MemoEntry","","classes/RDoc/Markdown/Literals/MemoEntry.html","",""],["RDoc::Markdown::Literals::ParseError","","classes/RDoc/Markdown/Literals/ParseError.html","",""],["RDoc::Markdown::Literals::RuleInfo","","classes/RDoc/Markdown/Literals/RuleInfo.html","",""],["RDoc::Markdown::MemoEntry","","classes/RDoc/Markdown/MemoEntry.html","",""],["RDoc::Markdown::ParseError","","classes/RDoc/Markdown/ParseError.html","",""],["RDoc::Markdown::RuleInfo","","classes/RDoc/Markdown/RuleInfo.html","",""],["RDoc::Markup","","classes/RDoc/Markup.html","","<p>RDoc::Markup parses plain text documents and attempts to decompose them into their constituent parts. …\n"],["RDoc::Markup::AttrChanger","","classes/RDoc/Markup/AttrChanger.html","","<p>An AttrChanger records a change in attributes. It contains a bitmap of the attributes to turn on, and …\n"],["RDoc::Markup::AttrSpan","","classes/RDoc/Markup/AttrSpan.html","","<p>An array of attributes which parallels the characters in a string.\n"],["RDoc::Markup::AttributeManager","","classes/RDoc/Markup/AttributeManager.html","","<p>Manages changes of attributes in a block of text\n"],["RDoc::Markup::Attributes","","classes/RDoc/Markup/Attributes.html","","<p>We manage a set of attributes.  Each attribute has a symbol name and a bit value.\n"],["RDoc::Markup::BlankLine","","classes/RDoc/Markup/BlankLine.html","","<p>An empty line.  This class is a singleton.\n"],["RDoc::Markup::BlockQuote","","classes/RDoc/Markup/BlockQuote.html","","<p>A quoted section which contains markup items.\n"],["RDoc::Markup::Document","","classes/RDoc/Markup/Document.html","","<p>A Document containing lists, headings, paragraphs, etc.\n"],["RDoc::Markup::Formatter","","classes/RDoc/Markup/Formatter.html","","<p>Base class for RDoc markup formatters\n<p>Formatters are a visitor that converts an RDoc::Markup tree (from …\n"],["RDoc::Markup::FormatterTestCase","","classes/RDoc/Markup/FormatterTestCase.html","","<p>Test case for creating new RDoc::Markup formatters.  See test/test_rdoc_markup_to_*.rb for examples. …\n"],["RDoc::Markup::HardBreak","","classes/RDoc/Markup/HardBreak.html","","<p>A hard-break in the middle of a paragraph.\n"],["RDoc::Markup::Include","","classes/RDoc/Markup/Include.html","","<p>A file included at generation time.  Objects of this class are created by RDoc::RD for an extension-less …\n"],["RDoc::Markup::IndentedParagraph","","classes/RDoc/Markup/IndentedParagraph.html","","<p>An Indented Paragraph of text\n"],["RDoc::Markup::List","","classes/RDoc/Markup/List.html","","<p>A List is a homogeneous set of ListItems.\n<p>The supported list types include:\n<p>:BULLET &mdash; An unordered list\n"],["RDoc::Markup::ListItem","","classes/RDoc/Markup/ListItem.html","","<p>An item within a List that contains paragraphs, headings, etc.\n<p>For BULLET, NUMBER, LALPHA and UALPHA lists, …\n"],["RDoc::Markup::Paragraph","","classes/RDoc/Markup/Paragraph.html","","<p>A Paragraph of text\n"],["RDoc::Markup::Parser","","classes/RDoc/Markup/Parser.html","","<p>A recursive-descent parser for RDoc markup.\n<p>The parser tokenizes an input string then parses the tokens …\n"],["RDoc::Markup::Parser::Error","","classes/RDoc/Markup/Parser/Error.html","","<p>Parser error subclass\n"],["RDoc::Markup::Parser::ParseError","","classes/RDoc/Markup/Parser/ParseError.html","","<p>Raised when the parser is unable to handle the given markup\n"],["RDoc::Markup::PreProcess","","classes/RDoc/Markup/PreProcess.html","","<p>Handle common directives that can occur in a block of text:\n\n<pre><code>:include: filename\n</code></pre>\n<p>Directives can be escaped …\n"],["RDoc::Markup::Raw","","classes/RDoc/Markup/Raw.html","","<p>A section of text that is added to the output document as-is\n"],["RDoc::Markup::RegexpHandling","","classes/RDoc/Markup/RegexpHandling.html","","<p>Hold details of a regexp handling sequence\n"],["RDoc::Markup::Rule","","classes/RDoc/Markup/Rule.html","","<p>A horizontal rule with a weight\n"],["RDoc::Markup::TextFormatterTestCase","","classes/RDoc/Markup/TextFormatterTestCase.html","","<p>Test case for creating new plain-text RDoc::Markup formatters.  See also RDoc::Markup::FormatterTestCase …\n"],["RDoc::Markup::ToAnsi","","classes/RDoc/Markup/ToAnsi.html","","<p>Outputs RDoc markup with vibrant ANSI color!\n"],["RDoc::Markup::ToBs","","classes/RDoc/Markup/ToBs.html","","<p>Outputs RDoc markup with hot backspace action!  You will probably need a pager to use this output format. …\n"],["RDoc::Markup::ToHtml","","classes/RDoc/Markup/ToHtml.html","","<p>Outputs RDoc markup as HTML.\n"],["RDoc::Markup::ToHtmlCrossref","","classes/RDoc/Markup/ToHtmlCrossref.html","","<p>Subclass of the RDoc::Markup::ToHtml class that supports looking up method names, classes, etc to create …\n"],["RDoc::Markup::ToHtmlSnippet","","classes/RDoc/Markup/ToHtmlSnippet.html","","<p>Outputs RDoc markup as paragraphs with inline markup only.\n"],["RDoc::Markup::ToJoinedParagraph","","classes/RDoc/Markup/ToJoinedParagraph.html","","<p>Joins the parts of an RDoc::Markup::Paragraph into a single String.\n<p>This allows for easier maintenance …\n"],["RDoc::Markup::ToLabel","","classes/RDoc/Markup/ToLabel.html","","<p>Creates HTML-safe labels suitable for use in id attributes.  Tidylinks are converted to their link part …\n"],["RDoc::Markup::ToMarkdown","","classes/RDoc/Markup/ToMarkdown.html","","<p>Outputs parsed markup as Markdown\n"],["RDoc::Markup::ToRdoc","","classes/RDoc/Markup/ToRdoc.html","","<p>Outputs RDoc markup as RDoc markup! (mostly)\n"],["RDoc::Markup::ToTableOfContents","","classes/RDoc/Markup/ToTableOfContents.html","","<p>Extracts just the RDoc::Markup::Heading elements from a RDoc::Markup::Document to help build a table …\n"],["RDoc::Markup::ToTest","","classes/RDoc/Markup/ToTest.html","","<p>This Markup outputter is used for testing purposes.\n"],["RDoc::Markup::ToTtOnly","","classes/RDoc/Markup/ToTtOnly.html","","<p>Extracts sections of text enclosed in plus, tt or code.  Used to discover undocumented parameters.\n"],["RDoc::Markup::Verbatim","","classes/RDoc/Markup/Verbatim.html","","<p>A section of verbatim text\n"],["RDoc::MetaMethod","","classes/RDoc/MetaMethod.html","","<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","classes/RDoc/MethodAttr.html","","<p>Abstract class representing either a method or an attribute.\n"],["RDoc::Mixin","","classes/RDoc/Mixin.html","","<p>A Mixin adds features from a module into another context.  RDoc::Include and RDoc::Extend are both mixins. …\n"],["RDoc::NormalClass","","classes/RDoc/NormalClass.html","","<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","classes/RDoc/NormalModule.html","","<p>A normal module, like NormalClass\n"],["RDoc::Options","","classes/RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Page","","classes/RDoc/Page.html","",""],["RDoc::Parser","","classes/RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements #scan to fill in an RDoc::TopLevel …\n"],["RDoc::Parser::C","","classes/RDoc/Parser/C.html","","<p>RDoc::Parser::C attempts to parse C extension files.  It looks for the standard patterns that you find …\n"],["RDoc::Parser::ChangeLog","","classes/RDoc/Parser/ChangeLog.html","","<p>A ChangeLog file parser.\n<p>This parser converts a ChangeLog into an RDoc::Markup::Document.  When viewed …\n"],["RDoc::Parser::Markdown","","classes/RDoc/Parser/Markdown.html","","<p>Parse a Markdown format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RD","","classes/RDoc/Parser/RD.html","","<p>Parse a RD format file.  The parsed RDoc::Markup::Document is attached as a file comment.\n"],["RDoc::Parser::RipperStateLex","","classes/RDoc/Parser/RipperStateLex.html","",""],["RDoc::Parser::RipperStateLex::InnerStateLex","","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html","",""],["RDoc::Parser::Ruby","","classes/RDoc/Parser/Ruby.html","",""],["RDoc::Parser::RubyTools","","classes/RDoc/Parser/RubyTools.html","","<p>Collection of methods for writing parsers\n"],["RDoc::Parser::Simple","","classes/RDoc/Parser/Simple.html","","<p>Parse a non-source file. We basically take the whole thing as one big comment.\n"],["RDoc::Parser::Text","","classes/RDoc/Parser/Text.html","","<p>Indicates this parser is text and doesn&#39;t contain code constructs.\n<p>Include this module in a RDoc::Parser …\n"],["RDoc::RD","","classes/RDoc/RD.html","","<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>To choose RD as your only default format see RDoc::Options@Saved+Options …\n"],["RDoc::RD::BlockParser","","classes/RDoc/RD/BlockParser.html","","<p>RD format parser for headings, paragraphs, lists, verbatim sections that exist as blocks.\n"],["RDoc::RD::Inline","","classes/RDoc/RD/Inline.html","","<p>Inline keeps track of markup and labels to create proper links.\n"],["RDoc::RD::InlineParser","","classes/RDoc/RD/InlineParser.html","","<p>RD format parser for inline markup such as emphasis, links, footnotes, etc.\n"],["RDoc::RDoc","","classes/RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It handles file parsing and generation of output.\n<p>To use …\n"],["RDoc::RI","","classes/RDoc/RI.html","","<p>Namespace for the ri command line tool&#39;s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Driver","","classes/RDoc/RI/Driver.html","","<p>The RI driver implements the command-line ri tool.\n<p>The driver supports:\n<p>loading RI data from:\n"],["RDoc::RI::Driver::Error","","classes/RDoc/RI/Driver/Error.html","","<p>Base Driver error class\n"],["RDoc::RI::Driver::NotFoundError","","classes/RDoc/RI/Driver/NotFoundError.html","","<p>Raised when a name isn&#39;t found in the ri data stores\n"],["RDoc::RI::Error","","classes/RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::RI::Paths","","classes/RDoc/RI/Paths.html","","<p>The directories where ri data lives.  Paths can be enumerated via ::each, or queried individually via …\n"],["RDoc::RI::Task","","classes/RDoc/RI/Task.html","","<p>RDoc::RI::Task creates ri data in <code>./.rdoc</code> for your project.\n<p>It contains the following tasks:\n<p>ri &mdash; Build ri …\n"],["RDoc::Require","","classes/RDoc/Require.html","","<p>A file loaded by #require\n"],["RDoc::RubygemsHook","","classes/RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems upon gem installation.\n<p>This …\n"],["RDoc::Servlet","","classes/RDoc/Servlet.html","","<p>This is a WEBrick servlet that allows you to browse ri documentation.\n<p>You can show documentation through …\n"],["RDoc::SingleClass","","classes/RDoc/SingleClass.html","","<p>A singleton class\n"],["RDoc::Stats","","classes/RDoc/Stats.html","","<p>RDoc statistics collector which prints a summary and report of a project&#39;s documentation totals. …\n"],["RDoc::Stats::Normal","","classes/RDoc/Stats/Normal.html","","<p>Stats printer that prints just the files being documented with a progress bar\n"],["RDoc::Stats::Quiet","","classes/RDoc/Stats/Quiet.html","","<p>Stats printer that prints nothing\n"],["RDoc::Stats::Verbose","","classes/RDoc/Stats/Verbose.html","","<p>Stats printer that prints everything documented, including the documented status\n"],["RDoc::Store","","classes/RDoc/Store.html","","<p>A set of rdoc data for a single project (gem, path, etc.).\n<p>The store manages reading and writing ri data …\n"],["RDoc::Store::Error","","classes/RDoc/Store/Error.html","","<p>Errors raised from loading or saving the store\n"],["RDoc::Store::MissingFileError","","classes/RDoc/Store/MissingFileError.html","","<p>Raised when a stored file for a class, module, page or method is missing.\n"],["RDoc::Task","","classes/RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc output:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::Text","","classes/RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","classes/RDoc/TokenStream.html","","<p>A TokenStream is a list of tokens, gathered during the parse of some entity (say a method). Entities …\n"],["RDoc::TomDoc","","classes/RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","classes/RDoc/TopLevel.html","","<p>A TopLevel context is a representation of the contents of a single file\n"],["RDocTask","","classes/RDocTask.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc output:\n<p>rdoc &mdash; Main task for this …\n"],["RSpec","","classes/RSpec.html","","<p>Namespace for all core RSpec code.\n<p>This is borrowed (slightly modified) from Scott Taylor&#39;s project_path …\n"],["RSpec::CallerFilter","","classes/RSpec/CallerFilter.html","","<p>Consistent implementation for “cleaning” the caller method to strip out non-rspec lines. This …\n"],["RSpec::Core","","classes/RSpec/Core.html","","<p>Namespace for the rspec-core code.\n"],["RSpec::Core::AnonymousExampleGroup","","classes/RSpec/Core/AnonymousExampleGroup.html","","<p>@private Unnamed example group used by `SuiteHookContext`.\n"],["RSpec::Core::BacktraceFormatter","","classes/RSpec/Core/BacktraceFormatter.html","","<p>@private\n"],["RSpec::Core::Bisect","","classes/RSpec/Core/Bisect.html","","<p>@private\n"],["RSpec::Core::Bisect::BisectFailedError","","classes/RSpec/Core/Bisect/BisectFailedError.html","","<p>@private\n"],["RSpec::Core::Bisect::Channel","","classes/RSpec/Core/Bisect/Channel.html","","<p>Wraps a pipe to support sending objects between a child and parent process. @private\n"],["RSpec::Core::Bisect::Coordinator","","classes/RSpec/Core/Bisect/Coordinator.html","","<p>The main entry point into the bisect logic. Coordinates among:\n\n<pre><code>- Bisect::ShellCommand: Generates shell ...\n</code></pre>\n"],["RSpec::Core::Bisect::ExampleMinimizer","","classes/RSpec/Core/Bisect/ExampleMinimizer.html","","<p>@private Contains the core bisect logic. Searches for examples we can ignore by repeatedly running different …\n"],["RSpec::Core::Bisect::ForkRunner","","classes/RSpec/Core/Bisect/ForkRunner.html","","<p>A Bisect runner that runs requested subsets of the suite by forking sub-processes. The master process …\n"],["RSpec::Core::Bisect::ForkRunner::CaptureFormatter","","classes/RSpec/Core/Bisect/ForkRunner/CaptureFormatter.html","",""],["RSpec::Core::Bisect::ForkRunner::RunDispatcher","","classes/RSpec/Core/Bisect/ForkRunner/RunDispatcher.html","","<p>@private\n"],["RSpec::Core::Bisect::Notifier","","classes/RSpec/Core/Bisect/Notifier.html","","<p>Wraps a `formatter` providing a simple means to notify it in place of an `RSpec::Core::Reporter`, without …\n"],["RSpec::Core::Bisect::Server","","classes/RSpec/Core/Bisect/Server.html","","<p>@private A DRb server that receives run results from a separate RSpec process started by the bisect process. …\n"],["RSpec::Core::Bisect::ShellCommand","","classes/RSpec/Core/Bisect/ShellCommand.html","","<p>Provides an API to generate shell commands to run the suite for a set of locations, using the given bisect …\n"],["RSpec::Core::Bisect::ShellRunner","","classes/RSpec/Core/Bisect/ShellRunner.html","","<p>Provides an API to run the suite for a set of locations, using the given bisect server to capture the …\n"],["RSpec::Core::Configuration","","classes/RSpec/Core/Configuration.html","","<p>Stores runtime configuration information.\n<p>Configuration options are loaded from multiple files and joined …\n"],["RSpec::Core::Configuration::DeprecationReporterBuffer","","classes/RSpec/Core/Configuration/DeprecationReporterBuffer.html","","<p>@private\n<p>This buffer is used to capture all messages sent to the reporter during reporter initialization. …\n"],["RSpec::Core::Configuration::ExposeCurrentExample","","classes/RSpec/Core/Configuration/ExposeCurrentExample.html","","<p>@private\n"],["RSpec::Core::Configuration::MustBeConfiguredBeforeExampleGroupsError","","classes/RSpec/Core/Configuration/MustBeConfiguredBeforeExampleGroupsError.html","","<p>@private\n"],["RSpec::Core::ConfigurationOptions","","classes/RSpec/Core/ConfigurationOptions.html","","<p>Responsible for utilizing externally provided configuration options, whether via the command line, `.rspec`, …\n"],["RSpec::Core::DRbOptions","","classes/RSpec/Core/DRbOptions.html","","<p>@private\n"],["RSpec::Core::DRbRunner","","classes/RSpec/Core/DRbRunner.html","","<p>@private\n"],["RSpec::Core::DSL","","classes/RSpec/Core/DSL.html","","<p>DSL defines methods to group examples, most notably `describe`, and exposes them as class methods of …\n"],["RSpec::Core::DSL::RSpec","","classes/RSpec/Core/DSL/RSpec.html","",""],["RSpec::Core::Example","","classes/RSpec/Core/Example.html","","<p>Wrapper for an instance of a subclass of {ExampleGroup}. An instance of `RSpec::Core::Example` is returned …\n"],["RSpec::Core::Example::ExecutionResult","","classes/RSpec/Core/Example/ExecutionResult.html","","<p>Represents the result of executing an example. Behaves like a hash for backwards compatibility.\n"],["RSpec::Core::Example::Procsy","","classes/RSpec/Core/Example/Procsy.html","","<p>Wraps both a `Proc` and an {Example} for use in {Hooks#around around} hooks. In around hooks we need …\n"],["RSpec::Core::ExampleGroup","","classes/RSpec/Core/ExampleGroup.html","","<p>ExampleGroup and {Example} are the main structural elements of rspec-core. Consider this example:\n\n<pre><code>describe ...\n</code></pre>\n"],["RSpec::Core::ExampleStatusDumper","","classes/RSpec/Core/ExampleStatusDumper.html","","<p>Dumps a list of hashes in a pretty, human readable format for later parsing. The hashes are expected …\n"],["RSpec::Core::ExampleStatusMerger","","classes/RSpec/Core/ExampleStatusMerger.html","","<p>Merges together a list of example statuses from this run and a list from previous runs (presumably loaded …\n"],["RSpec::Core::ExampleStatusParser","","classes/RSpec/Core/ExampleStatusParser.html","","<p>Parses a string that has been previously dumped by ExampleStatusDumper. Note that this parser is a bit …\n"],["RSpec::Core::ExampleStatusPersister","","classes/RSpec/Core/ExampleStatusPersister.html","","<p>Persists example ids and their statuses so that we can filter to just the ones that failed the last time …\n"],["RSpec::Core::ExclusionRules","","classes/RSpec/Core/FilterRules.html","","<p>@private\n"],["RSpec::Core::FilterManager","","classes/RSpec/Core/FilterManager.html","","<p>@private\n"],["RSpec::Core::FilterRules","","classes/RSpec/Core/FilterRules.html","","<p>@private\n"],["RSpec::Core::FilterableItemRepository","","classes/RSpec/Core/FilterableItemRepository.html","","<p>Tracks a collection of filterable items (e.g. modules, hooks, etc) and provides an optimized API to get …\n"],["RSpec::Core::FilterableItemRepository::QueryOptimized","","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html","","<p>This implementation is much more complex, and is optimized for rare (or hopefully no) updates once the …\n"],["RSpec::Core::FilterableItemRepository::UpdateOptimized","","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html","","<p>This implementation is simple, and is optimized for frequent updates but rare queries. `append` and `prepend` …\n"],["RSpec::Core::FlatMap","","classes/RSpec/Core/FlatMap.html","","<p>@private\n"],["RSpec::Core::Formatters","","classes/RSpec/Core/Formatters.html","","<p>## Built-in Formatters\n<p>progress (default) - Prints dots for passing examples, `F` for failures, `*`\n\n<pre><code>for ...\n</code></pre>\n"],["RSpec::Core::Formatters::BaseBisectFormatter","","classes/RSpec/Core/Formatters/BaseBisectFormatter.html","","<p>Contains common logic for formatters used by `–bisect` to communicate results back to the bisect runner. …\n"],["RSpec::Core::Formatters::BaseFormatter","","classes/RSpec/Core/Formatters/BaseFormatter.html","","<p>RSpec&#39;s built-in formatters are all subclasses of RSpec::Core::Formatters::BaseFormatter.\n<p>@see RSpec::Core::Formatters::BaseTextFormatter …\n"],["RSpec::Core::Formatters::BaseTextFormatter","","classes/RSpec/Core/Formatters/BaseTextFormatter.html","","<p>Base for all of RSpec&#39;s built-in formatters. See RSpec::Core::Formatters::BaseFormatter to learn …\n"],["RSpec::Core::Formatters::BisectDRbFormatter","","classes/RSpec/Core/Formatters/BisectDRbFormatter.html","","<p>Used by `–bisect`. When it shells out and runs a portion of the suite, it uses this formatter as a means …\n"],["RSpec::Core::Formatters::BisectDebugFormatter","","classes/RSpec/Core/Formatters/BisectDebugFormatter.html","","<p>@private Produces detailed debug output while bisecting. Used when bisect is performed with `–bisect=verbose`. …\n"],["RSpec::Core::Formatters::BisectProgressFormatter","","classes/RSpec/Core/Formatters/BisectProgressFormatter.html","","<p>@private Produces progress output while bisecting.\n"],["RSpec::Core::Formatters::ConsoleCodes","","classes/RSpec/Core/Formatters/ConsoleCodes.html","","<p>ConsoleCodes provides helpers for formatting console output with ANSI codes, e.g. color&#39;s and bold. …\n"],["RSpec::Core::Formatters::DeprecationFormatter","","classes/RSpec/Core/Formatters/DeprecationFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::FileStream","","classes/RSpec/Core/Formatters/DeprecationFormatter/FileStream.html","","<p>@private Wraps a File object and provides file-specific operations.\n"],["RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","","classes/RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","","classes/RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html","","<p>@private Not really a stream, but is usable in place of one.\n"],["RSpec::Core::Formatters::DocumentationFormatter","","classes/RSpec/Core/Formatters/DocumentationFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter","","classes/RSpec/Core/Formatters/ExceptionPresenter.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory","","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory.html","","<p>@private Configuring the `ExceptionPresenter` with the right set of options to handle pending vs failed …\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html","","<p>@private\n"],["RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter","","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory/EmptyBacktraceFormatter.html","","<p>@private Used to prevent a confusing backtrace from showing up from the `aggregate_failures` block declared …\n"],["RSpec::Core::Formatters::FallbackMessageFormatter","","classes/RSpec/Core/Formatters/FallbackMessageFormatter.html","","<p>@api private Formatter for providing message output as a fallback when no other profiler implements  …\n"],["RSpec::Core::Formatters::Helpers","","classes/RSpec/Core/Formatters/Helpers.html","","<p>Formatters helpers.\n"],["RSpec::Core::Formatters::HtmlFormatter","","classes/RSpec/Core/Formatters/HtmlFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlPrinter","","classes/RSpec/Core/Formatters/HtmlPrinter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor","","classes/RSpec/Core/Formatters/HtmlSnippetExtractor.html","","<p>@api private\n<p>Extracts code snippets by looking at the backtrace of the passed error and applies synax …\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor::CoderayConverter","","classes/RSpec/Core/Formatters/HtmlSnippetExtractor/CoderayConverter.html","","<p>@private\n"],["RSpec::Core::Formatters::HtmlSnippetExtractor::NullConverter","","classes/RSpec/Core/Formatters/HtmlSnippetExtractor/NullConverter.html","","<p>@private\n"],["RSpec::Core::Formatters::JsonFormatter","","classes/RSpec/Core/Formatters/JsonFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::Loader","","classes/RSpec/Core/Formatters/Loader.html","","<p>@api private\n<p>`RSpec::Core::Formatters::Loader` is an internal class for managing formatters used by a …\n"],["RSpec::Core::Formatters::ProfileFormatter","","classes/RSpec/Core/Formatters/ProfileFormatter.html","","<p>@api private Formatter for providing profile output.\n"],["RSpec::Core::Formatters::ProgressFormatter","","classes/RSpec/Core/Formatters/ProgressFormatter.html","","<p>@private\n"],["RSpec::Core::Formatters::Protocol","","classes/RSpec/Core/Formatters/Protocol.html","","<p>This class isn&#39;t loaded at runtime but serves to document all of the notifications implemented as …\n"],["RSpec::Core::Formatters::SnippetExtractor","","classes/RSpec/Core/Formatters/SnippetExtractor.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter","","classes/RSpec/Core/Formatters/SyntaxHighlighter.html","","<p>@private Provides terminal syntax highlighting of code snippets when coderay is available.\n"],["RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation","","classes/RSpec/Core/Formatters/SyntaxHighlighter/CodeRayImplementation.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","","classes/RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html","","<p>@private\n"],["RSpec::Core::Formatters::SyntaxHighlighter::WindowsImplementation","","classes/RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html","","<p>@private\n"],["RSpec::Core::HashImitatable","","classes/RSpec/Core/HashImitatable.html","","<p>Mixin that makes the including class imitate a hash for backwards compatibility. The including class …\n"],["RSpec::Core::HashImitatable::ClassMethods","","classes/RSpec/Core/HashImitatable/ClassMethods.html","","<p>@private\n"],["RSpec::Core::Hooks","","classes/RSpec/Core/Hooks.html","","<p>Provides `before`, `after` and `around` hooks as a means of supporting common setup and teardown. This …\n"],["RSpec::Core::Hooks::AfterContextHook","","classes/RSpec/Core/Hooks/AfterContextHook.html","","<p>@private\n"],["RSpec::Core::Hooks::AfterHook","","classes/RSpec/Core/Hooks/AfterHook.html","","<p>@private\n"],["RSpec::Core::Hooks::AroundHook","","classes/RSpec/Core/Hooks/AroundHook.html","","<p>@private\n"],["RSpec::Core::Hooks::BeforeHook","","classes/RSpec/Core/Hooks/BeforeHook.html","","<p>@private\n"],["RSpec::Core::Hooks::HookCollections","","classes/RSpec/Core/Hooks/HookCollections.html","","<p>@private\n<p>This provides the primary API used by other parts of rspec-core. By hiding all implementation …\n"],["RSpec::Core::InclusionRules","","classes/RSpec/Core/InclusionRules.html","","<p>@private\n"],["RSpec::Core::Invocations","","classes/RSpec/Core/Invocations.html","","<p>@private\n"],["RSpec::Core::Invocations::Bisect","","classes/RSpec/Core/Invocations/Bisect.html","","<p>@private\n"],["RSpec::Core::Invocations::DRbWithFallback","","classes/RSpec/Core/Invocations/DRbWithFallback.html","","<p>@private\n"],["RSpec::Core::Invocations::InitializeProject","","classes/RSpec/Core/Invocations/InitializeProject.html","","<p>@private\n"],["RSpec::Core::Invocations::PrintVersion","","classes/RSpec/Core/Invocations/PrintVersion.html","","<p>@private\n"],["RSpec::Core::LegacyExampleGroupHash","","classes/RSpec/Core/LegacyExampleGroupHash.html","","<p>@private Together with the example group metadata hash default block, provides backwards compatibility …\n"],["RSpec::Core::MemoizedHelpers","","classes/RSpec/Core/MemoizedHelpers.html","","<p>This module is included in {ExampleGroup}, making the methods available to be called from within example …\n"],["RSpec::Core::MemoizedHelpers::ClassMethods","","classes/RSpec/Core/MemoizedHelpers/ClassMethods.html","","<p>This module is extended onto {ExampleGroup}, making the methods available to be called from within example …\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized","","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized.html","","<p>Used internally to customize the behavior of the memoized hash when used in a `before(:context)` hook. …\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","","classes/RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html","","<p>@private\n"],["RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","","classes/RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html","","<p>@private\n"],["RSpec::Core::Metadata","","classes/RSpec/Core/Metadata.html","","<p>Each ExampleGroup class and Example instance owns an instance of Metadata, which is Hash extended to …\n"],["RSpec::Core::Metadata::ExampleGroupHash","","classes/RSpec/Core/Metadata/ExampleGroupHash.html","","<p>@private\n"],["RSpec::Core::Metadata::ExampleHash","","classes/RSpec/Core/Metadata/ExampleHash.html","","<p>@private\n"],["RSpec::Core::Metadata::HashPopulator","","classes/RSpec/Core/Metadata/HashPopulator.html","","<p>@private Used internally to populate metadata hashes with computed keys managed by RSpec.\n"],["RSpec::Core::MetadataFilter","","classes/RSpec/Core/MetadataFilter.html","","<p>Contains metadata filtering logic. This has been extracted from the metadata classes because it operates …\n"],["RSpec::Core::MinitestAssertionsAdapter","","classes/RSpec/Core/MinitestAssertionsAdapter.html","","<p>@private\n"],["RSpec::Core::MockingAdapters","","classes/RSpec/Core/MockingAdapters.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Flexmock","","classes/RSpec/Core/MockingAdapters/Flexmock.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Mocha","","classes/RSpec/Core/MockingAdapters/Mocha.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::Null","","classes/RSpec/Core/MockingAdapters/Null.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::RR","","classes/RSpec/Core/MockingAdapters/RR.html","","<p>@private\n"],["RSpec::Core::MockingAdapters::RSpec","","classes/RSpec/Core/MockingAdapters/RSpec.html","","<p>@private\n"],["RSpec::Core::MultipleExceptionError","","classes/RSpec/Core/MultipleExceptionError.html","","<p>Provides a single exception instance that provides access to multiple sub-exceptions. This is used in …\n"],["RSpec::Core::MultipleExceptionError::InterfaceTag","","classes/RSpec/Core/MultipleExceptionError/InterfaceTag.html","","<p>@private Used so there is a common module in the ancestor chain of this class and `RSpec::Expectations::MultipleExpectationsNotMetError`, …\n"],["RSpec::Core::Notifications","","classes/RSpec/Core/Notifications.html","","<p>Notifications are value objects passed to formatters to provide them with information about a particular …\n"],["RSpec::Core::Notifications::CustomNotification","","classes/RSpec/Core/Notifications/CustomNotification.html","","<p>`CustomNotification` is used when sending custom events to formatters / other registered listeners, it …\n"],["RSpec::Core::Notifications::DeprecationNotification","","classes/RSpec/Core/Notifications/DeprecationNotification.html","",""],["RSpec::Core::Notifications::ExampleNotification","","classes/RSpec/Core/Notifications/ExampleNotification.html","",""],["RSpec::Core::Notifications::ExamplesNotification","","classes/RSpec/Core/Notifications/ExamplesNotification.html","","<p>The `ExamplesNotification` represents notifications sent by the reporter which contain information about …\n"],["RSpec::Core::Notifications::FailedExampleNotification","","classes/RSpec/Core/Notifications/FailedExampleNotification.html","","<p>The `FailedExampleNotification` extends `ExampleNotification` with things useful for examples that have …\n"],["RSpec::Core::Notifications::NullColorizer","","classes/RSpec/Core/Notifications/NullColorizer.html","","<p>@private\n"],["RSpec::Core::Notifications::NullNotification","","classes/RSpec/Core/Notifications/NullNotification.html","","<p>`NullNotification` represents a placeholder value for notifications that currently require no information, …\n"],["RSpec::Core::Notifications::PendingExampleFailedAsExpectedNotification","","classes/RSpec/Core/Notifications/PendingExampleFailedAsExpectedNotification.html","","<p>@deprecated Use {FailedExampleNotification} instead.\n"],["RSpec::Core::Notifications::PendingExampleFixedNotification","","classes/RSpec/Core/Notifications/PendingExampleFixedNotification.html","","<p>@deprecated Use {FailedExampleNotification} instead.\n"],["RSpec::Core::Notifications::ProfileNotification","","classes/RSpec/Core/Notifications/ProfileNotification.html","","<p>The `ProfileNotification` holds information about the results of running a test suite when profiling …\n"],["RSpec::Core::Notifications::SeedNotification","","classes/RSpec/Core/Notifications/SeedNotification.html","",""],["RSpec::Core::Notifications::SkippedExampleNotification","","classes/RSpec/Core/Notifications/SkippedExampleNotification.html","","<p>The `SkippedExampleNotification` extends `ExampleNotification` with things useful for specs that are …\n"],["RSpec::Core::Notifications::SummaryNotification","","classes/RSpec/Core/Notifications/SummaryNotification.html","",""],["RSpec::Core::NullReporter","","classes/RSpec/Core/NullReporter.html","","<p>@private # Used in place of a {Reporter} for situations where we don&#39;t want reporting output.\n"],["RSpec::Core::Ordering","","classes/RSpec/Core/Ordering.html","","<p>@private\n"],["RSpec::Core::Ordering::ConfigurationManager","","classes/RSpec/Core/Ordering/ConfigurationManager.html","","<p>@private Manages ordering configuration.\n<p>@note This is not intended to be used externally. Use\n\n<pre><code>the APIs ...\n</code></pre>\n"],["RSpec::Core::Ordering::Custom","","classes/RSpec/Core/Ordering/Custom.html","","<p>@private Orders items based on a custom block.\n"],["RSpec::Core::Ordering::Identity","","classes/RSpec/Core/Ordering/Identity.html","","<p>@private The default global ordering (defined order).\n"],["RSpec::Core::Ordering::Random","","classes/RSpec/Core/Ordering/Random.html","","<p>@private Orders items randomly.\n"],["RSpec::Core::Ordering::Registry","","classes/RSpec/Core/Ordering/Registry.html","","<p>@private Stores the different ordering strategies.\n"],["RSpec::Core::OutputWrapper","","classes/RSpec/Core/OutputWrapper.html","","<p>@private\n"],["RSpec::Core::Parser","","classes/RSpec/Core/Parser.html","","<p>@private\n"],["RSpec::Core::Pending","","classes/RSpec/Core/Pending.html","","<p>Provides methods to mark examples as pending. These methods are available to be called from within any …\n"],["RSpec::Core::Pending::PendingExampleFixedError","","classes/RSpec/Core/Pending/PendingExampleFixedError.html","",""],["RSpec::Core::Pending::SkipDeclaredInExample","","classes/RSpec/Core/Pending/SkipDeclaredInExample.html","","<p>Raised in the middle of an example to indicate that it should be marked as skipped.\n"],["RSpec::Core::Profiler","","classes/RSpec/Core/Profiler.html","","<p>@private\n"],["RSpec::Core::ProjectInitializer","","classes/RSpec/Core/ProjectInitializer.html","","<p>@private Generates conventional files for an RSpec project.\n"],["RSpec::Core::RakeTask","","classes/RSpec/Core/RakeTask.html","","<p>RSpec rake task\n<p>@see Rakefile\n"],["RSpec::Core::Reporter","","classes/RSpec/Core/Reporter.html","","<p>A reporter will send notifications to listeners, usually formatters for the spec suite run.\n"],["RSpec::Core::RubyProject","","classes/RSpec/Core/RubyProject.html","","<p>@private\n"],["RSpec::Core::Runner","","classes/RSpec/Core/Runner.html","","<p>Provides the main entry point to run a suite of RSpec examples.\n"],["RSpec::Core::Sandbox","","classes/RSpec/Core/Sandbox.html","","<p>A sandbox isolates the enclosed code into an environment that looks &#39;new&#39; meaning globally accessed …\n"],["RSpec::Core::Set","","classes/RSpec/Core/Set.html","","<p>@private\n<p>We use this to replace `::Set` so we can have the advantage of constant time key lookups for …\n"],["RSpec::Core::SharedContext","","classes/RSpec/Core/SharedContext.html","","<p>Exposes {ExampleGroup}-level methods to a module, so you can include that module in an {ExampleGroup}. …\n"],["RSpec::Core::SharedExampleGroup","","classes/RSpec/Core/SharedExampleGroup.html","","<p>Shared example groups let you define common context and/or common examples that you wish to use in multiple …\n"],["RSpec::Core::SharedExampleGroup::Registry","","classes/RSpec/Core/SharedExampleGroup/Registry.html","","<p>@private\n"],["RSpec::Core::SharedExampleGroup::TopLevelDSL","","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html","","<p>@api private\n<p>Shared examples top level DSL.\n"],["RSpec::Core::SharedExampleGroupInclusionStackFrame","","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html","","<p>Contains information about the inclusion site of a shared example group.\n"],["RSpec::Core::SharedExampleGroupModule","","classes/RSpec/Core/SharedExampleGroupModule.html","","<p>Represents some functionality that is shared with multiple example groups. The functionality is defined …\n"],["RSpec::Core::ShellEscape","","classes/RSpec/Core/ShellEscape.html","","<p>@private Deals with the fact that `shellwords` only works on POSIX systems.\n"],["RSpec::Core::SuiteHookContext","","classes/RSpec/Core/SuiteHookContext.html","","<p>@private Provides an execution context for before/after :suite hooks.\n"],["RSpec::Core::TestUnitAssertionsAdapter","","classes/RSpec/Core/TestUnitAssertionsAdapter.html","","<p>@private\n"],["RSpec::Core::Time","","classes/RSpec/Core/Time.html","","<p>@private This avoids issues with reporting time caused by examples that change the value/meaning of  …\n"],["RSpec::Core::Version","","classes/RSpec/Core/Version.html","","<p>Version information for RSpec Core.\n"],["RSpec::Core::Warnings","","classes/RSpec/Core/Warnings.html","","<p>@private\n"],["RSpec::Core::World","","classes/RSpec/Core/World.html","","<p>@api private\n<p>Internal container for global non-configuration data.\n"],["RSpec::Core::World::Null","","classes/RSpec/Core/World/Null.html","","<p>@private Provides a null implementation for initial use by configuration.\n"],["RSpec::ExampleGroups","","classes/RSpec/ExampleGroups.html","","<p>@private\n<p>Namespace for the example group subclasses generated by top-level `describe`.\n"],["RSpec::Expectations","","classes/RSpec/Expectations.html","","<p>RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. …\n"],["RSpec::Expectations::BlockExpectationTarget","","classes/RSpec/Expectations/BlockExpectationTarget.html","","<p>@private Validates the provided matcher to ensure it supports block expectations, in order to avoid user …\n"],["RSpec::Expectations::BlockSnippetExtractor","","classes/RSpec/Expectations/BlockSnippetExtractor.html","","<p>@private\n"],["RSpec::Expectations::Configuration","","classes/RSpec/Expectations/Configuration.html","","<p>Provides configuration options for rspec-expectations. If you are using rspec-core, you can access this …\n"],["RSpec::Expectations::Differ","","classes/RSpec/Expectations/Differ.html","","<p>@private\n"],["RSpec::Expectations::ExpectationHelper","","classes/RSpec/Expectations/ExpectationHelper.html","","<p>@private\n"],["RSpec::Expectations::ExpectationNotMetError","","classes/RSpec/Expectations/ExpectationNotMetError.html","","<p>Exception raised when an expectation fails.\n<p>@note We subclass Exception so that in a stub implementation …\n"],["RSpec::Expectations::ExpectationTarget","","classes/RSpec/Expectations/ExpectationTarget.html","","<p>Wraps the target of an expectation.\n<p>@example\n\n<pre><code>expect(something)       # =&gt; ExpectationTarget wrapping something ...\n</code></pre>\n"],["RSpec::Expectations::ExpectationTarget::InstanceMethods","","classes/RSpec/Expectations/ExpectationTarget/InstanceMethods.html","","<p>Defines instance {ExpectationTarget} instance methods. These are defined in a module so we can include …\n"],["RSpec::Expectations::FailureAggregator","","classes/RSpec/Expectations/FailureAggregator.html","","<p>@private\n"],["RSpec::Expectations::LegacyMacherAdapter","","classes/RSpec/Expectations/LegacyMatcherAdapter.html","","<p>Wraps a matcher written against one of the legacy protocols in order to present the current protocol. …\n"],["RSpec::Expectations::LegacyMatcherAdapter","","classes/RSpec/Expectations/LegacyMatcherAdapter.html","","<p>Wraps a matcher written against one of the legacy protocols in order to present the current protocol. …\n"],["RSpec::Expectations::LegacyMatcherAdapter::RSpec1","","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html","","<p>Before RSpec 1.2, the failure message protocol was:\n\n<pre><code>* `failure_message`\n* `negative_failure_message`\n</code></pre>\n<p>@private …\n"],["RSpec::Expectations::LegacyMatcherAdapter::RSpec2","","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html","","<p>Starting in RSpec 1.2 (and continuing through all 2.x releases), the failure message protocol was:\n\n<pre><code>* `failure_message_for_should` ...\n</code></pre>\n"],["RSpec::Expectations::MultipleExpectationsNotMetError","","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html","","<p>Exception raised from `aggregate_failures` when multiple expectations fail.\n<p>@note The constant is defined …\n"],["RSpec::Expectations::NegativeExpectationHandler","","classes/RSpec/Expectations/NegativeExpectationHandler.html","","<p>@private\n"],["RSpec::Expectations::PositiveExpectationHandler","","classes/RSpec/Expectations/PositiveExpectationHandler.html","","<p>@private\n"],["RSpec::Expectations::Syntax","","classes/RSpec/Expectations/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available syntaxes provided by rspec-expectations. …\n"],["RSpec::Expectations::Version","","classes/RSpec/Expectations/Version.html","","<p>@private\n"],["RSpec::Matchers","","classes/RSpec/Matchers.html","","<p>RSpec::Matchers provides a number of useful matchers we use to define expectations. Any object that implements …\n"],["RSpec::Matchers::AliasedMatcher","","classes/RSpec/Matchers/AliasedMatcher.html","","<p>Decorator that wraps a matcher and overrides `description` using the provided block in order to support …\n"],["RSpec::Matchers::AliasedMatcherWithOperatorSupport","","classes/RSpec/Matchers/AliasedMatcherWithOperatorSupport.html","","<p>Decorator used for matchers that have special implementations of operators like `==` and `===`. @private …\n"],["RSpec::Matchers::AliasedNegatedMatcher","","classes/RSpec/Matchers/AliasedNegatedMatcher.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn","","classes/RSpec/Matchers/BuiltIn.html","","<p>Container module for all built-in matchers. The matcher classes are here (rather than directly under …\n"],["RSpec::Matchers::BuiltIn::All","","classes/RSpec/Matchers/BuiltIn/All.html","","<p>@api private Provides the implementation for `all`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BaseMatcher","","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html","","<p>@api private\n<p>Used <em>internally</em> as a base class for matchers that ship with rspec-expectations and rspec-rails. …\n"],["RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","","classes/RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html","","<p>@api private Provides default implementations of failure messages, based on the `description`.\n"],["RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting","","classes/RSpec/Matchers/BuiltIn/BaseMatcher/HashFormatting.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::Be","","classes/RSpec/Matchers/BuiltIn/Be.html","","<p>@api private Provides the implementation for `be`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeAKindOf","","classes/RSpec/Matchers/BuiltIn/BeAKindOf.html","","<p>@api private Provides the implementation for `be_a_kind_of`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeAnInstanceOf","","classes/RSpec/Matchers/BuiltIn/BeAnInstanceOf.html","","<p>@api private Provides the implementation for `be_an_instance_of`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeBetween","","classes/RSpec/Matchers/BuiltIn/BeBetween.html","","<p>@api private Provides the implementation for `be_between`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeComparedTo","","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html","","<p>@api private Provides the implementation of `be &lt;operator&gt; value`. Not intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::BeFalsey","","classes/RSpec/Matchers/BuiltIn/BeFalsey.html","","<p>@api private Provides the implementation for `be_falsey`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeHelpers","","classes/RSpec/Matchers/BuiltIn/BeHelpers.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::BeNil","","classes/RSpec/Matchers/BuiltIn/BeNil.html","","<p>@api private Provides the implementation for `be_nil`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BePredicate","","classes/RSpec/Matchers/BuiltIn/BePredicate.html","","<p>@api private Provides the implementation of `be_&lt;predicate&gt;`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeTruthy","","classes/RSpec/Matchers/BuiltIn/BeTruthy.html","","<p>@api private Provides the implementation for `be_truthy`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeWithin","","classes/RSpec/Matchers/BuiltIn/BeWithin.html","","<p>@api private Provides the implementation for `be_within`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::CaptureStderr","","classes/RSpec/Matchers/BuiltIn/CaptureStderr.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::CaptureStdout","","classes/RSpec/Matchers/BuiltIn/CaptureStdout.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::CaptureStreamToTempfile","","classes/RSpec/Matchers/BuiltIn/CaptureStreamToTempfile.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::Change","","classes/RSpec/Matchers/BuiltIn/Change.html","","<p>@api private Provides the implementation for `change`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::ChangeDetails","","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html","","<p>@private Encapsulates the details of the before/after values.\n<p>Note that this class exposes the `actual_after` …\n"],["RSpec::Matchers::BuiltIn::ChangeFromValue","","classes/RSpec/Matchers/BuiltIn/ChangeFromValue.html","","<p>@api private Used to specify a change from a specific value (and, optionally, to a specific value).\n"],["RSpec::Matchers::BuiltIn::ChangeRelatively","","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html","","<p>Used to specify a relative change. @api private\n"],["RSpec::Matchers::BuiltIn::ChangeToValue","","classes/RSpec/Matchers/BuiltIn/ChangeToValue.html","","<p>@api private Used to specify a change to a specific value (and, optionally, from a specific value).\n"],["RSpec::Matchers::BuiltIn::Compound","","classes/RSpec/Matchers/BuiltIn/Compound.html","","<p>@api private Base class for `and` and `or` compound matchers.\n"],["RSpec::Matchers::BuiltIn::Compound::And","","classes/RSpec/Matchers/BuiltIn/Compound/And.html","","<p>@api public Matcher used to represent a compound `and` expectation.\n"],["RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","","classes/RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html","","<p>Normally, we evaluate the matching sequentially. For an expression like `expect(x).to foo.and bar`, this …\n"],["RSpec::Matchers::BuiltIn::Compound::Or","","classes/RSpec/Matchers/BuiltIn/Compound/Or.html","","<p>@api public Matcher used to represent a compound `or` expectation.\n"],["RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","","classes/RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html","","<p>For value expectations, we can evaluate the matchers sequentially.\n"],["RSpec::Matchers::BuiltIn::ContainExactly","","classes/RSpec/Matchers/BuiltIn/ContainExactly.html","","<p>rubocop:disable ClassLength @api private Provides the implementation for `contain_exactly` and `match_array`. …\n"],["RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","","classes/RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html","","<p>Once we started supporting composing matchers, the algorithm for this matcher got much more complicated. …\n"],["RSpec::Matchers::BuiltIn::Cover","","classes/RSpec/Matchers/BuiltIn/Cover.html","","<p>@api private Provides the implementation for `cover`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::EndWith","","classes/RSpec/Matchers/BuiltIn/EndWith.html","","<p>@api private Provides the implementation for `end_with`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Eq","","classes/RSpec/Matchers/BuiltIn/Eq.html","","<p>@api private Provides the implementation for `eq`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Eql","","classes/RSpec/Matchers/BuiltIn/Eql.html","","<p>@api private Provides the implementation for `eql`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Equal","","classes/RSpec/Matchers/BuiltIn/Equal.html","","<p>@api private Provides the implementation for `equal`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Exist","","classes/RSpec/Matchers/BuiltIn/Exist.html","","<p>@api private Provides the implementation for `exist`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Exist::ExistenceTest","","classes/RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html","","<p>@api private Simple class for memoizing actual/expected for this matcher and examining the match\n"],["RSpec::Matchers::BuiltIn::Has","","classes/RSpec/Matchers/BuiltIn/Has.html","","<p>@api private Provides the implementation for `has_&lt;predicate&gt;`. Not intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::HaveAttributes","","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html","","<p>@api private Provides the implementation for `have_attributes`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::Include","","classes/RSpec/Matchers/BuiltIn/Include.html","","<p>@api private Provides the implementation for `include`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::Match","","classes/RSpec/Matchers/BuiltIn/Match.html","","<p>@api private Provides the implementation for `match`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::NegativeOperatorMatcher","","classes/RSpec/Matchers/BuiltIn/NegativeOperatorMatcher.html","","<p>@private Handles operator matcher for `should_not`.\n"],["RSpec::Matchers::BuiltIn::NullCapture","","classes/RSpec/Matchers/BuiltIn/NullCapture.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::OperatorMatcher","","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html","","<p>@api private Provides the implementation for operator matchers. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::Output","","classes/RSpec/Matchers/BuiltIn/Output.html","","<p>@api private Provides the implementation for `output`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::PositiveOperatorMatcher","","classes/RSpec/Matchers/BuiltIn/PositiveOperatorMatcher.html","","<p>@private Handles operator matcher for `should`.\n"],["RSpec::Matchers::BuiltIn::RaiseError","","classes/RSpec/Matchers/BuiltIn/RaiseError.html","","<p>@api private Provides the implementation for `raise_error`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::ReliableMatchData","","classes/RSpec/Matchers/BuiltIn/ReliableMatchData.html","","<p>@api private Used to wrap match data and make it reliable for 1.8.7\n"],["RSpec::Matchers::BuiltIn::RespondTo","","classes/RSpec/Matchers/BuiltIn/RespondTo.html","","<p>@api private Provides the implementation for `respond_to`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::Satisfy","","classes/RSpec/Matchers/BuiltIn/Satisfy.html","","<p>@api private Provides the implementation for `satisfy`. Not intended to be instantiated directly.\n"],["RSpec::Matchers::BuiltIn::SpecificValuesChange","","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html","","<p>@api private Base class for specifying a change from and/or to specific values.\n"],["RSpec::Matchers::BuiltIn::StartAndEndWith","","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html","","<p>@api private Base class for the `end_with` and `start_with` matchers. Not intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::StartOrEndWith","","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html","","<p>@api private Base class for the `end_with` and `start_with` matchers. Not intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::StartWith","","classes/RSpec/Matchers/BuiltIn/StartWith.html","","<p>@api private Provides the implementation for `start_with`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::ThrowSymbol","","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html","","<p>@api private Provides the implementation for `throw_symbol`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::YieldControl","","classes/RSpec/Matchers/BuiltIn/YieldControl.html","","<p>@api private Provides the implementation for `yield_control`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::YieldProbe","","classes/RSpec/Matchers/BuiltIn/YieldProbe.html","","<p>@private Object that is yielded to `expect` when one of the yield matchers is used. Provides information …\n"],["RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html","","<p>@api private Provides the implementation for `yield_successive_args`. Not intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::YieldWithArgs","","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html","","<p>@api private Provides the implementation for `yield_with_args`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::YieldWithNoArgs","","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html","","<p>@api private Provides the implementation for `yield_with_no_args`. Not intended to be instantiated directly. …\n"],["RSpec::Matchers::Composable","","classes/RSpec/Matchers/Composable.html","","<p>Mixin designed to support the composable matcher features of RSpec 3+. Mix it into your custom matcher …\n"],["RSpec::Matchers::DSL","","classes/RSpec/Matchers/DSL.html","","<p>Defines the custom matcher DSL.\n"],["RSpec::Matchers::DSL::DefaultImplementations","","classes/RSpec/Matchers/DSL/DefaultImplementations.html","","<p>Defines default implementations of the matcher protocol methods for custom matchers. You can override …\n"],["RSpec::Matchers::DSL::Macros","","classes/RSpec/Matchers/DSL/Macros.html","","<p>Contains the methods that are available from within the `RSpec::Matchers.define` DSL for creating custom …\n"],["RSpec::Matchers::DSL::Macros::Deprecated","","classes/RSpec/Matchers/DSL/Macros/Deprecated.html","","<p>Defines deprecated macro methods from RSpec 2 for backwards compatibility. @deprecated Use the methods …\n"],["RSpec::Matchers::DSL::Matcher","","classes/RSpec/Matchers/DSL/Matcher.html","","<p>The class used for custom matchers. The block passed to `RSpec::Matchers.define` will be evaluated in …\n"],["RSpec::Matchers::EnglishPhrasing","","classes/RSpec/Matchers/EnglishPhrasing.html","","<p>Facilitates converting ruby objects to English phrases.\n"],["RSpec::Matchers::ExpectedsForMultipleDiffs","","classes/RSpec/Matchers/ExpectedsForMultipleDiffs.html","","<p>@api private Handles list of expected values when there is a need to render multiple diffs. Also can …\n"],["RSpec::Matchers::FailMatchers","","classes/RSpec/Matchers/FailMatchers.html","","<p>Matchers for testing RSpec matchers. Include them with:\n\n<pre><code>require &#39;rspec/matchers/fail_matchers&#39;\nRSpec.configure ...\n</code></pre>\n"],["RSpec::Matchers::MatcherDelegator","","classes/RSpec/Matchers/MatcherDelegator.html","","<p>Provides the necessary plumbing to wrap a matcher with a decorator. @private\n"],["RSpec::Matchers::MatcherProtocol","","classes/RSpec/Matchers/MatcherProtocol.html","","<p>rspec-expectations can work with any matcher object that implements this protocol.\n<p>@note This class is …\n"],["RSpec::Mocks","","classes/RSpec/Mocks.html","","<p>Contains top-level utility methods. While this contains a few public methods, these are not generally …\n"],["RSpec::Mocks::AllowanceTarget","","classes/RSpec/Mocks/AllowanceTarget.html","","<p>@private\n"],["RSpec::Mocks::AndReturnImplementation","","classes/RSpec/Mocks/AndReturnImplementation.html","","<p>Handles the implementation of an `and_return` implementation. @private\n"],["RSpec::Mocks::AndWrapOriginalImplementation","","classes/RSpec/Mocks/AndWrapOriginalImplementation.html","","<p>Represents an `and_call_original` implementation. @private\n"],["RSpec::Mocks::AndYieldImplementation","","classes/RSpec/Mocks/AndYieldImplementation.html","","<p>Handles the implementation of an `and_yield` declaration. @private\n"],["RSpec::Mocks::AnyInstance","","classes/RSpec/Mocks/AnyInstance.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Chain","","classes/RSpec/Mocks/AnyInstance/Chain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Chain::Customizations","","classes/RSpec/Mocks/AnyInstance/Chain/Customizations.html","","<p>@private\n<p>Provides convenience methods for recording customizations on message expectations.\n"],["RSpec::Mocks::AnyInstance::ErrorGenerator","","classes/RSpec/Mocks/AnyInstance/ErrorGenerator.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::ExpectChainChain","","classes/RSpec/Mocks/AnyInstance/ExpectChainChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::ExpectationChain","","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::FluentInterfaceProxy","","classes/RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html","","<p>@private Delegates messages to each of the given targets in order to provide the fluent interface that …\n"],["RSpec::Mocks::AnyInstance::MessageChains","","classes/RSpec/Mocks/AnyInstance/MessageChains.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::PositiveExpectationChain","","classes/RSpec/Mocks/AnyInstance/PositiveExpectationChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Proxy","","classes/RSpec/Mocks/AnyInstance/Proxy.html","","<p>@private The `AnyInstance::Recorder` is responsible for redefining the klass&#39;s instance method in …\n"],["RSpec::Mocks::AnyInstance::Recorder","","classes/RSpec/Mocks/AnyInstance/Recorder.html","","<p>Given a class `TheClass`, `TheClass.any_instance` returns a `Recorder`, which records stubs and message …\n"],["RSpec::Mocks::AnyInstance::StubChain","","classes/RSpec/Mocks/AnyInstance/StubChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::StubChainChain","","classes/RSpec/Mocks/AnyInstance/StubChainChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstanceAllowanceTarget","","classes/RSpec/Mocks/AnyInstanceAllowanceTarget.html","","<p>@private\n"],["RSpec::Mocks::AnyInstanceExpectationTarget","","classes/RSpec/Mocks/AnyInstanceExpectationTarget.html","","<p>@private\n"],["RSpec::Mocks::ArgumentListMatcher","","classes/RSpec/Mocks/ArgumentListMatcher.html","","<p>Wrapper for matching arguments against a list of expected values. Used by the `with` method on a `MessageExpectation`: …\n"],["RSpec::Mocks::ArgumentMatchers","","classes/RSpec/Mocks/ArgumentMatchers.html","","<p>ArgumentMatchers are placeholders that you can include in message expectations to match arguments against …\n"],["RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","","classes/RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","","classes/RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","","classes/RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::BooleanMatcher","","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::InstanceOf","","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::KindOf","","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","","classes/RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::SingletonMatcher","","classes/RSpec/Mocks/ArgumentMatchers/SingletonMatcher.html","","<p>Intended to be subclassed by stateless, immutable argument matchers. Provides a `&lt;klass name&gt;::INSTANCE` …\n"],["RSpec::Mocks::CallbackInvocationStrategy","","classes/RSpec/Mocks/CallbackInvocationStrategy.html","","<p>@private\n"],["RSpec::Mocks::ClassNewMethodReference","","classes/RSpec/Mocks/ClassNewMethodReference.html","","<p>When a class&#39;s `.new` method is stubbed, we want to use the method signature from `#initialize` because …\n"],["RSpec::Mocks::ClassVerifyingDouble","","classes/RSpec/Mocks/ClassVerifyingDouble.html","","<p>Effectively the same as an ObjectVerifyingDouble (since a class is a type of object), except with Module …\n"],["RSpec::Mocks::Configuration","","classes/RSpec/Mocks/Configuration.html","","<p>Provides configuration options for rspec-mocks.\n"],["RSpec::Mocks::Constant","","classes/RSpec/Mocks/Constant.html","","<p>Provides information about constants that may (or may not) have been mutated by rspec-mocks.\n"],["RSpec::Mocks::ConstantMutator","","classes/RSpec/Mocks/ConstantMutator.html","","<p>Provides a means to stub constants.\n"],["RSpec::Mocks::ConstantMutator::BaseMutator","","classes/RSpec/Mocks/ConstantMutator/BaseMutator.html","","<p>Contains common functionality used by all of the constant mutators.\n<p>@private\n"],["RSpec::Mocks::ConstantMutator::ConstantHider","","classes/RSpec/Mocks/ConstantMutator/ConstantHider.html","","<p>Hides a defined constant for the duration of an example.\n<p>@private\n"],["RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html","","<p>Replaces a defined constant for the duration of an example.\n<p>@private\n"],["RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","","classes/RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html","","<p>Sets an undefined constant for the duration of an example.\n<p>@private\n"],["RSpec::Mocks::DirectObjectReference","","classes/RSpec/Mocks/DirectObjectReference.html","","<p>An implementation of rspec-mocks&#39; reference interface. Used when an object is passed to {ExampleMethods#object_double}, …\n"],["RSpec::Mocks::Double","","classes/RSpec/Mocks/Double.html","","<p>A generic test double object. `double`, `instance_double` and friends return an instance of this.\n"],["RSpec::Mocks::ErrorGenerator","","classes/RSpec/Mocks/ErrorGenerator.html","","<p>@private\n"],["RSpec::Mocks::ExampleMethods","","classes/RSpec/Mocks/ExampleMethods.html","","<p>Contains methods intended to be used from within code examples. Mix this in to your test context (such …\n"],["RSpec::Mocks::ExampleMethods::ExpectHost","","classes/RSpec/Mocks/ExampleMethods/ExpectHost.html","","<p>This module exists to host the `expect` method for cases where rspec-mocks is used w/o rspec-expectations. …\n"],["RSpec::Mocks::ExpectChain","","classes/RSpec/Mocks/ExpectChain.html","","<p>@private\n"],["RSpec::Mocks::ExpectationTarget","","classes/RSpec/Mocks/ExpectationTarget.html","","<p>@private\n"],["RSpec::Mocks::ExpectationTargetMethods","","classes/RSpec/Mocks/ExpectationTargetMethods.html","","<p>@private\n"],["RSpec::Mocks::Implementation","","classes/RSpec/Mocks/Implementation.html","","<p>Represents a configured implementation. Takes into account any number of sub-implementations. @private …\n"],["RSpec::Mocks::InstanceMethodReference","","classes/RSpec/Mocks/InstanceMethodReference.html","","<p>@private\n"],["RSpec::Mocks::InstanceMethodStasher","","classes/RSpec/Mocks/InstanceMethodStasher.html","","<p>@private\n"],["RSpec::Mocks::InstanceVerifyingDouble","","classes/RSpec/Mocks/InstanceVerifyingDouble.html","","<p>A mock providing a custom proxy that can verify the validity of any method stubs or expectations against …\n"],["RSpec::Mocks::MarshalExtension","","classes/RSpec/Mocks/MarshalExtension.html","","<p>Support for `patch_marshal_to_support_partial_doubles` configuration.\n<p>@private\n"],["RSpec::Mocks::Matchers","","classes/RSpec/Mocks/Matchers.html","","<p>Namespace for mock-related matchers.\n"],["RSpec::Mocks::Matchers::ExpectationCustomization","","classes/RSpec/Mocks/Matchers/ExpectationCustomization.html","","<p>@private\n"],["RSpec::Mocks::Matchers::HaveReceived","","classes/RSpec/Mocks/Matchers/HaveReceived.html","","<p>@private\n"],["RSpec::Mocks::Matchers::Matcher","","classes/RSpec/Mocks/Matchers/Matcher.html","","<p>@private just a “tag” for rspec-mock matchers detection\n"],["RSpec::Mocks::Matchers::Receive","","classes/RSpec/Mocks/Matchers/Receive.html","","<p>@private\n"],["RSpec::Mocks::Matchers::Receive::DefaultDescribable","","classes/RSpec/Mocks/Matchers/Receive/DefaultDescribable.html","","<p>MessageExpectation objects are able to describe themselves in detail. We use this as a fall back when …\n"],["RSpec::Mocks::Matchers::ReceiveMessageChain","","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html","","<p>@private\n"],["RSpec::Mocks::Matchers::ReceiveMessages","","classes/RSpec/Mocks/Matchers/ReceiveMessages.html","","<p>@private\n"],["RSpec::Mocks::MessageChain","","classes/RSpec/Mocks/MessageChain.html","","<p>@private\n"],["RSpec::Mocks::MessageExpectation","","classes/RSpec/Mocks/MessageExpectation.html","","<p>Represents an individual method stub or message expectation. The methods defined here can be used to …\n"],["RSpec::Mocks::MessageExpectation::ImplementationDetails","","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html","","<p>@private Contains the parts of `MessageExpectation` that aren&#39;t part of rspec-mocks&#39; public  …\n"],["RSpec::Mocks::MethodDouble","","classes/RSpec/Mocks/MethodDouble.html","","<p>@private\n"],["RSpec::Mocks::MethodReference","","classes/RSpec/Mocks/MethodReference.html","","<p>Represents a method on an object that may or may not be defined. The method may be an instance method …\n"],["RSpec::Mocks::MinitestIntegration","","classes/RSpec/Mocks/MinitestIntegration.html","","<p>@private\n"],["RSpec::Mocks::NamedObjectReference","","classes/RSpec/Mocks/NamedObjectReference.html","","<p>An implementation of rspec-mocks&#39; reference interface. Used when a string is passed to {ExampleMethods#object_double}, …\n"],["RSpec::Mocks::NestedSpace","","classes/RSpec/Mocks/NestedSpace.html","","<p>@private\n"],["RSpec::Mocks::NoCallbackInvocationStrategy","","classes/RSpec/Mocks/NoCallbackInvocationStrategy.html","","<p>@private\n"],["RSpec::Mocks::ObjectMethodReference","","classes/RSpec/Mocks/ObjectMethodReference.html","","<p>@private\n"],["RSpec::Mocks::ObjectReference","","classes/RSpec/Mocks/ObjectReference.html","","<p>@private\n"],["RSpec::Mocks::ObjectVerifyingDouble","","classes/RSpec/Mocks/ObjectVerifyingDouble.html","","<p>Similar to an InstanceVerifyingDouble, except that it verifies against public methods of the given object. …\n"],["RSpec::Mocks::ObjectVerifyingDoubleMethods","","classes/RSpec/Mocks/ObjectVerifyingDoubleMethods.html","","<p>An awkward module necessary because we cannot otherwise have ClassVerifyingDouble inherit from Module …\n"],["RSpec::Mocks::OrderGroup","","classes/RSpec/Mocks/OrderGroup.html","","<p>@private\n"],["RSpec::Mocks::PartialClassDoubleProxy","","classes/RSpec/Mocks/PartialClassDoubleProxy.html","","<p>@private\n"],["RSpec::Mocks::PartialClassDoubleProxyMethods","","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html","","<p>@private When we mock or stub a method on a class, we have to treat it a bit different, because normally …\n"],["RSpec::Mocks::PartialDoubleProxy","","classes/RSpec/Mocks/PartialDoubleProxy.html","","<p>@private\n"],["RSpec::Mocks::Proxy","","classes/RSpec/Mocks/Proxy.html","","<p>@private\n"],["RSpec::Mocks::ProxyForNil","","classes/RSpec/Mocks/ProxyForNil.html","","<p>@private\n"],["RSpec::Mocks::RootSpace","","classes/RSpec/Mocks/RootSpace.html","","<p>@private Provides a default space implementation for outside the scope of an example. Called “root” …\n"],["RSpec::Mocks::SimpleMessageExpectation","","classes/RSpec/Mocks/SimpleMessageExpectation.html","","<p>A message expectation that only allows concrete return values to be set for a message. While this same …\n"],["RSpec::Mocks::Space","","classes/RSpec/Mocks/Space.html","","<p>@private\n"],["RSpec::Mocks::StubChain","","classes/RSpec/Mocks/StubChain.html","","<p>@private\n"],["RSpec::Mocks::Syntax","","classes/RSpec/Mocks/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available syntaxes provided by rspec-mocks. …\n"],["RSpec::Mocks::TargetBase","","classes/RSpec/Mocks/TargetBase.html","","<p>@private\n"],["RSpec::Mocks::TargetDelegationClassMethods","","classes/RSpec/Mocks/TargetDelegationClassMethods.html","","<p>@private\n"],["RSpec::Mocks::TargetDelegationInstanceMethods","","classes/RSpec/Mocks/TargetDelegationInstanceMethods.html","","<p>@private\n"],["RSpec::Mocks::TestDouble","","classes/RSpec/Mocks/TestDouble.html","","<p>Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and …\n"],["RSpec::Mocks::TestDoubleFormatter","","classes/RSpec/Mocks/TestDoubleFormatter.html","","<p>@private\n"],["RSpec::Mocks::TestDoubleProxy","","classes/RSpec/Mocks/TestDoubleProxy.html","","<p>@private\n"],["RSpec::Mocks::VerifyingDouble","","classes/RSpec/Mocks/VerifyingDouble.html","","<p>@private\n"],["RSpec::Mocks::VerifyingDouble::SilentIO","","classes/RSpec/Mocks/VerifyingDouble/SilentIO.html","","<p>@private\n"],["RSpec::Mocks::VerifyingExistingClassNewMethodDouble","","classes/RSpec/Mocks/VerifyingExistingClassNewMethodDouble.html","","<p>Used in place of a `VerifyingExistingMethodDouble` for the specific case of mocking or stubbing a `new` …\n"],["RSpec::Mocks::VerifyingExistingMethodDouble","","classes/RSpec/Mocks/VerifyingExistingMethodDouble.html","","<p>A VerifyingMethodDouble fetches the method to verify against from the original object, using a MethodReference …\n"],["RSpec::Mocks::VerifyingMessageExpectation","","classes/RSpec/Mocks/VerifyingMessageExpectation.html","","<p>A message expectation that knows about the real implementation of the message being expected, so that …\n"],["RSpec::Mocks::VerifyingMethodDouble","","classes/RSpec/Mocks/VerifyingMethodDouble.html","","<p>@private\n"],["RSpec::Mocks::VerifyingPartialClassDoubleProxy","","classes/RSpec/Mocks/VerifyingPartialClassDoubleProxy.html","","<p>@private\n"],["RSpec::Mocks::VerifyingPartialDoubleProxy","","classes/RSpec/Mocks/VerifyingPartialDoubleProxy.html","","<p>@private\n"],["RSpec::Mocks::VerifyingProxy","","classes/RSpec/Mocks/VerifyingProxy.html","","<p>A verifying proxy mostly acts like a normal proxy, except that it contains extra logic to try and determine …\n"],["RSpec::Mocks::VerifyingProxyMethods","","classes/RSpec/Mocks/VerifyingProxyMethods.html","","<p>@private\n"],["RSpec::Mocks::Version","","classes/RSpec/Mocks/Version.html","","<p>Version information for RSpec mocks.\n"],["RSpec::Support","","classes/RSpec/Support.html","",""],["RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue","","classes/RSpec/Support/AllExceptionsExceptOnesWeMustNotRescue.html","","<p>@private\n"],["RSpec::Support::BlockSignature","","classes/RSpec/Support/BlockSignature.html","","<p>Deals with the slightly different semantics of block arguments. For methods, arguments are required unless …\n"],["RSpec::Support::ComparableVersion","","classes/RSpec/Support/ComparableVersion.html","","<p>@private\n"],["RSpec::Support::Differ","","classes/RSpec/Support/Differ.html","","<p>rubocop:disable ClassLength\n"],["RSpec::Support::DirectoryMaker","","classes/RSpec/Support/DirectoryMaker.html","","<p>@api private\n<p>Replacement for fileutils#mkdir_p because we don&#39;t want to require parts of stdlib in …\n"],["RSpec::Support::EncodedString","","classes/RSpec/Support/EncodedString.html","","<p>@private\n"],["RSpec::Support::FormattingSupport","","classes/RSpec/Support/FormattingSupport.html","",""],["RSpec::Support::FuzzyMatcher","","classes/RSpec/Support/FuzzyMatcher.html","","<p>Provides a means to fuzzy-match between two arbitrary objects. Understands array/hash nesting. Uses `===` …\n"],["RSpec::Support::HunkGenerator","","classes/RSpec/Support/HunkGenerator.html","","<p>@private\n"],["RSpec::Support::InSubProcess","","classes/RSpec/Support/InSubProcess.html","",""],["RSpec::Support::LooseSignatureVerifier","","classes/RSpec/Support/LooseSignatureVerifier.html","","<p>Allows matchers to be used instead of providing keyword arguments. In practice, when this happens only …\n"],["RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html","","<p>If a matcher is used in a signature in place of keyword arguments, all keyword argument validation needs …\n"],["RSpec::Support::MethodSignature","","classes/RSpec/Support/MethodSignature.html","","<p>Extracts info about the number of arguments and allowed/required keyword args of a given method.\n<p>@private …\n"],["RSpec::Support::MethodSignatureExpectation","","classes/RSpec/Support/MethodSignatureExpectation.html","","<p>Encapsulates expectations about the number of arguments and allowed/required keyword args of a given …\n"],["RSpec::Support::MethodSignatureVerifier","","classes/RSpec/Support/MethodSignatureVerifier.html","","<p>Abstract base class for signature verifiers.\n<p>@api private\n"],["RSpec::Support::Mutex","","classes/RSpec/Support/Mutex.html","","<p>On 1.8.7, it&#39;s in the stdlib. We don&#39;t want to load the stdlib, b/c this is a test tool, and …\n"],["RSpec::Support::OS","","classes/RSpec/Support/OS.html","","<p>@api private\n<p>Provides query methods for different OS or OS features.\n"],["RSpec::Support::ObjectFormatter","","classes/RSpec/Support/ObjectFormatter.html","","<p>Provide additional output details beyond what `inspect` provides when printing Time, DateTime, or BigDecimal …\n"],["RSpec::Support::ObjectFormatter::BigDecimalInspector","","classes/RSpec/Support/ObjectFormatter/BigDecimalInspector.html","",""],["RSpec::Support::ObjectFormatter::DateTimeInspector","","classes/RSpec/Support/ObjectFormatter/DateTimeInspector.html","",""],["RSpec::Support::ObjectFormatter::DelegatorInspector","","classes/RSpec/Support/ObjectFormatter/DelegatorInspector.html","",""],["RSpec::Support::ObjectFormatter::DescribableMatcherInspector","","classes/RSpec/Support/ObjectFormatter/DescribableMatcherInspector.html","",""],["RSpec::Support::ObjectFormatter::InspectableObjectInspector","","classes/RSpec/Support/ObjectFormatter/InspectableObjectInspector.html","",""],["RSpec::Support::ObjectFormatter::TimeInspector","","classes/RSpec/Support/ObjectFormatter/TimeInspector.html","",""],["RSpec::Support::ObjectFormatter::UninspectableObjectInspector","","classes/RSpec/Support/ObjectFormatter/UninspectableObjectInspector.html","",""],["RSpec::Support::RecursiveConstMethods","","classes/RSpec/Support/RecursiveConstMethods.html","","<p>Provides recursive constant lookup methods useful for constant stubbing.\n"],["RSpec::Support::ReentrantMutex","","classes/RSpec/Support/ReentrantMutex.html","","<p>Allows a thread to lock out other threads from a critical section of code, while allowing the thread …\n"],["RSpec::Support::Ruby","","classes/RSpec/Support/Ruby.html","","<p>@api private\n<p>Provides query methods for different rubies\n"],["RSpec::Support::RubyFeatures","","classes/RSpec/Support/RubyFeatures.html","","<p>@api private\n<p>Provides query methods for ruby features that differ among implementations.\n"],["RSpec::Support::ShellOut","","classes/RSpec/Support/ShellOut.html","",""],["RSpec::Support::Source","","classes/RSpec/Support/Source.html","","<p>@private Represents a Ruby source file and provides access to AST and tokens.\n"],["RSpec::Support::Source::ExpressionSequenceNode","","classes/RSpec/Support/Source/ExpressionSequenceNode.html","","<p>@private Basically `Ripper.sexp` generates arrays whose first element is a symbol (type of sexp), but …\n"],["RSpec::Support::Source::Node","","classes/RSpec/Support/Source/Node.html","","<p>@private A wrapper for Ripper AST node which is generated with `Ripper.sexp`.\n"],["RSpec::Support::Source::Token","","classes/RSpec/Support/Source/Token.html","","<p>@private A wrapper for Ripper token which is generated with `Ripper.lex`.\n"],["RSpec::Support::Spec","","classes/RSpec/Support/Spec.html","",""],["RSpec::Support::StdErrSplitter","","classes/RSpec/Support/StdErrSplitter.html","",""],["RSpec::Support::StrictSignatureVerifier","","classes/RSpec/Support/MethodSignatureVerifier.html","","<p>Abstract base class for signature verifiers.\n<p>@api private\n"],["RSpec::Support::Version","","classes/RSpec/Support/Version.html","",""],["RSpec::Support::Warnings","","classes/RSpec/Support/Warnings.html","",""],["RSpec::Support::WhitespaceChecks","","classes/RSpec/Support/WhitespaceChecks.html","",""],["RSpec::Support::WithIsolatedStdErr","","classes/RSpec/Support/WithIsolatedStdErr.html","",""],["RSpecHelpers","","classes/RSpecHelpers.html","",""],["Rake","","classes/Rake.html","",""],["Rake::Application","","classes/Rake/Application.html","","<p>Rake main application object.  When invoking <code>rake</code> from the command line, a Rake::Application object is …\n"],["Rake::Cleaner","","classes/Rake/Cleaner.html","",""],["Rake::DSL","","classes/Rake/DSL.html","","<p>DSL is a module that provides #task, #desc, #namespace, etc.  Use this when you&#39;d like to use rake …\n"],["Rake::DefaultLoader","","classes/Rake/DefaultLoader.html","","<p>Default Rakefile loader used by <code>import</code>.\n"],["Rake::EarlyTime","","classes/Rake/EarlyTime.html","","<p>EarlyTime is a fake timestamp that occurs <em>before</em> any other time value.\n"],["Rake::FileCreationTask","","classes/Rake/FileCreationTask.html","","<p>A FileCreationTask is a file task that when used as a dependency will be needed if and only if the file …\n"],["Rake::FileList","","classes/Rake/FileList.html","","<p>A FileList is essentially an array with a few helper methods defined to make file manipulation a bit …\n"],["Rake::FileTask","","classes/Rake/FileTask.html","","<p>A FileTask is a task that includes time based dependencies.  If any of a FileTask&#39;s prerequisites …\n"],["Rake::FileUtilsExt","","classes/Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::InvocationChain","","classes/Rake/InvocationChain.html","","<p>InvocationChain tracks the chain of task invocations to detect circular dependencies.\n"],["Rake::InvocationChain::EmptyInvocationChain","","classes/Rake/InvocationChain/EmptyInvocationChain.html","","<p>Null object for an empty chain.\n"],["Rake::InvocationExceptionMixin","","classes/Rake/InvocationExceptionMixin.html","",""],["Rake::LateTime","","classes/Rake/LateTime.html","","<p>LateTime is a fake timestamp that occurs <em>after</em> any other time value.\n"],["Rake::LinkedList","","classes/Rake/LinkedList.html","","<p>Polylithic linked list structure used to implement several data structures in Rake.\n"],["Rake::LinkedList::EmptyLinkedList","","classes/Rake/LinkedList/EmptyLinkedList.html","","<p>Represent an empty list, using the Null Object Pattern.\n<p>When inheriting from the LinkedList class, you …\n"],["Rake::MakefileLoader","","classes/Rake/MakefileLoader.html","","<p>Makefile loader to be used with the import file loader.  Use this to import dependencies from make dependency …\n"],["Rake::MultiTask","","classes/Rake/MultiTask.html","","<p>Same as a regular task, but the immediate prerequisites are done in parallel using Ruby threads.\n"],["Rake::NameSpace","","classes/Rake/NameSpace.html","","<p>The NameSpace class will lookup task names in the scope defined by a <code>namespace</code> command.\n"],["Rake::PackageTask","","classes/Rake/PackageTask.html","","<p>Create a packaging task that will package the project into distributable files (e.g zip archive or tar …\n"],["Rake::PrivateReader","","classes/Rake/PrivateReader.html","",""],["Rake::PrivateReader::ClassMethods","","classes/Rake/PrivateReader/ClassMethods.html","",""],["Rake::RakeFileUtils","","classes/Rake/FileUtilsExt.html","","<p>FileUtilsExt provides a custom version of the FileUtils methods that respond to the <code>verbose</code> and <code>nowrite</code> …\n"],["Rake::RuleRecursionOverflowError","","classes/Rake/RuleRecursionOverflowError.html","","<p>Error indicating a recursion overflow error in task selection.\n"],["Rake::Scope","","classes/Rake/Scope.html","",""],["Rake::Scope::EmptyScope","","classes/Rake/Scope/EmptyScope.html","",""],["Rake::Task","","classes/Rake/Task.html","","<p>A Task is the basic unit of work in a Rakefile.  Tasks have associated actions (possibly more than one) …\n"],["Rake::TaskArgumentError","","classes/Rake/TaskArgumentError.html","","<p>Error indicating an ill-formed task declaration.\n"],["Rake::TaskArguments","","classes/Rake/TaskArguments.html","","<p>TaskArguments manage the arguments passed to a task.\n"],["Rake::TaskLib","","classes/Rake/TaskLib.html","","<p>Base class for Task Libraries.\n"],["Rake::TaskManager","","classes/Rake/TaskManager.html","","<p>The TaskManager module is a mixin for managing tasks.\n"],["Rake::TestCase","","classes/Rake/TestCase.html","",""],["Rake::TestCase::TaskManager","","classes/Rake/TestCase/TaskManager.html","",""],["Rake::TestTask","","classes/Rake/TestTask.html","","<p>Create a task that runs a set of tests.\n<p>Example:\n\n<pre><code>require &quot;rake/testtask&quot;\n\nRake::TestTask.new do |t|\n  t.libs ...\n</code></pre>\n"],["Rake::Win32","","classes/Rake/Win32.html","",""],["Rake::Win32::Win32HomeError","","classes/Rake/Win32/Win32HomeError.html","",""],["RakefileDefinitions","","classes/RakefileDefinitions.html","",""],["RubyRunner","","classes/RubyRunner.html","",""],["SDoc","","classes/SDoc.html","",""],["SDoc::GitHub","","classes/SDoc/GitHub.html","",""],["SDoc::Helpers","","classes/SDoc/Helpers.html","",""],["SDoc::Merge","","classes/SDoc/Merge.html","",""],["SDoc::Templatable","","classes/SDoc/Templatable.html","",""],["String","","classes/String.html","",""],["TestBacktraceSuppression","","classes/TestBacktraceSuppression.html","",""],["TestLinkedList","","classes/TestLinkedList.html","",""],["TestPrivateAttrs","","classes/TestPrivateAttrs.html","",""],["TestPrivateAttrs::Sample","","classes/TestPrivateAttrs/Sample.html","",""],["TestRake","","classes/TestRake.html","",""],["TestRakeApplication","","classes/TestRakeApplication.html","",""],["TestRakeApplicationOptions","","classes/TestRakeApplicationOptions.html","",""],["TestRakeBacktrace","","classes/TestRakeBacktrace.html","",""],["TestRakeClean","","classes/TestRakeClean.html","",""],["TestRakeCpuCounter","","classes/TestRakeCpuCounter.html","",""],["TestRakeCpuCounter::TestClassMethod","","classes/TestRakeCpuCounter/TestClassMethod.html","",""],["TestRakeDefinitions","","classes/TestRakeDefinitions.html","",""],["TestRakeDirectoryTask","","classes/TestRakeDirectoryTask.html","",""],["TestRakeDsl","","classes/TestRakeDsl.html","",""],["TestRakeEarlyTime","","classes/TestRakeEarlyTime.html","",""],["TestRakeExtension","","classes/TestRakeExtension.html","",""],["TestRakeExtension::Redirect","","classes/TestRakeExtension/Redirect.html","",""],["TestRakeExtension::Sample","","classes/TestRakeExtension/Sample.html","",""],["TestRakeFileCreationTask","","classes/TestRakeFileCreationTask.html","",""],["TestRakeFileList","","classes/TestRakeFileList.html","",""],["TestRakeFileList::FileList","","classes/Rake/FileList.html","","<p>A FileList is essentially an array with a few helper methods defined to make file manipulation a bit …\n"],["TestRakeFileListPathMap","","classes/TestRakeFileListPathMap.html","",""],["TestRakeFileTask","","classes/TestRakeFileTask.html","",""],["TestRakeFileUtils","","classes/TestRakeFileUtils.html","",""],["TestRakeFileUtils::BadLink","","classes/TestRakeFileUtils/BadLink.html","",""],["TestRakeFtpFile","","classes/TestRakeFtpFile.html","",""],["TestRakeFunctional","","classes/TestRakeFunctional.html","",""],["TestRakeInvocationChain","","classes/TestRakeInvocationChain.html","",""],["TestRakeLateTime","","classes/TestRakeLateTime.html","",""],["TestRakeMakefileLoader","","classes/TestRakeMakefileLoader.html","",""],["TestRakeMultiTask","","classes/TestRakeMultiTask.html","",""],["TestRakeNameSpace","","classes/TestRakeNameSpace.html","",""],["TestRakeNameSpace::TM","","classes/TestRakeNameSpace/TM.html","",""],["TestRakePackageTask","","classes/TestRakePackageTask.html","",""],["TestRakePathMap","","classes/TestRakePathMap.html","",""],["TestRakePathMapExplode","","classes/TestRakePathMapExplode.html","",""],["TestRakePathMapPartial","","classes/TestRakePathMapPartial.html","",""],["TestRakePathnameExtensions","","classes/TestRakePathnameExtensions.html","",""],["TestRakePseudoStatus","","classes/TestRakePseudoStatus.html","",""],["TestRakeRakeTestLoader","","classes/TestRakeRakeTestLoader.html","",""],["TestRakeReduceCompat","","classes/TestRakeReduceCompat.html","",""],["TestRakeRequire","","classes/TestRakeRequire.html","",""],["TestRakeRules","","classes/TestRakeRules.html","",""],["TestRakeScope","","classes/TestRakeScope.html","",""],["TestRakeTask","","classes/TestRakeTask.html","",""],["TestRakeTaskArgumentParsing","","classes/TestRakeTaskArgumentParsing.html","",""],["TestRakeTaskArguments","","classes/TestRakeTaskArguments.html","",""],["TestRakeTaskLib","","classes/TestRakeTaskLib.html","",""],["TestRakeTaskManager","","classes/TestRakeTaskManager.html","",""],["TestRakeTaskManagerArgumentResolution","","classes/TestRakeTaskManagerArgumentResolution.html","",""],["TestRakeTaskWithArguments","","classes/TestRakeTaskWithArguments.html","",""],["TestRakeTestTask","","classes/TestRakeTestTask.html","",""],["TestRakeTestThreadPool","","classes/TestRakeTestThreadPool.html","",""],["TestRakeTopLevelFunctions","","classes/TestRakeTopLevelFunctions.html","",""],["TestRakeWin32","","classes/TestRakeWin32.html","",""],["TestRakeWin32::Win32","","classes/Rake/Win32.html","",""],["TestThreadHistoryDisplay","","classes/TestThreadHistoryDisplay.html","",""],["TestTraceOutput","","classes/TestTraceOutput.html","",""],["TestTraceOutput::PrintSpy","","classes/TestTraceOutput/PrintSpy.html","",""],["&","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-i-26","(matcher)",""],["*","Rake::FileList","classes/Rake/FileList.html#method-i-2A","(other)","<p>Redefine * to return either a string or a new file list.\n"],["*","Rake::FileList","classes/Rake/FileList.html#method-i-2A","(other)","<p>Redefine * to return either a string or a new file list.\n"],["<<","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the document\n"],["<<","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-3C-3C","(item)","<p>Appends <code>item</code> to the list\n"],["<<","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-3C-3C","(part)","<p>Appends <code>part</code> to the ListItem\n"],["<<","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-3C-3C","(text)","<p>Appends <code>text</code>\n"],["<<","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-3C-3C","(key)",""],["<<","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-3C-3C","(string)",""],["<<","Rake::FileList","classes/Rake/FileList.html#method-i-3C-3C","(obj)",""],["<<","Rake::FileList","classes/Rake/FileList.html#method-i-3C-3C","(obj)",""],["<=>","LCS::Change","classes/LCS/Change.html#method-i-3C-3D-3E","(other)",""],["<=>","LCS::ContextChange","classes/LCS/ContextChange.html#method-i-3C-3D-3E","(other)",""],["<=>","RDoc::Alias","classes/RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","classes/RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","classes/RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-3C-3D-3E","(other)","<p>Mixins are sorted by name\n"],["<=>","RSpec::Support::ComparableVersion","classes/RSpec/Support/ComparableVersion.html#method-i-3C-3D-3E","(other)",""],["<=>","Rake::EarlyTime","classes/Rake/EarlyTime.html#method-i-3C-3D-3E","(other)","<p>The EarlyTime always comes before <code>other</code>!\n"],["<=>","Rake::LateTime","classes/Rake/LateTime.html#method-i-3C-3D-3E","(other)",""],["==","LCS::Change","classes/LCS/Change.html#method-i-3D-3D","(other)",""],["==","LCS::ContextChange","classes/LCS/ContextChange.html#method-i-3D-3D","(other)",""],["==","RDoc::Attr","classes/RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","classes/RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-3D-3D","(other)","<p>Sections are equal when they have the same #title\n"],["==","RDoc::Markup::RegexpHandling","classes/RDoc/Markup/RegexpHandling.html#method-i-3D-3D","(o)","<p>Regexp handlings are equal when the have the same text and type\n"],["==","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same relative_name\n"],["==","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-3D-3D","(other)","<p>This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy …\n"],["==","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-3D-3D","(other)",""],["==","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-3D-3D","(other)",""],["==","Rake::FileList","classes/Rake/FileList.html#method-i-3D-3D","(array)","<p>A FileList is equal through array equality.\n"],["==","Rake::FileList","classes/Rake/FileList.html#method-i-3D-3D","(array)","<p>A FileList is equal through array equality.\n"],["==","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-3D-3D","(other)","<p>Lists are structurally equivalent.\n"],["===","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-i-3D-3D-3D","(value)","<p>Delegates to `#matches?`. Allows matchers to be used in composable fashion and also supports using matchers …\n"],["===","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-i-3D-3D-3D","(_other)",""],["===","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","classes/RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-i-3D-3D-3D","(predicate, actual)",""],["===","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-i-3D-3D-3D","(value)",""],["===","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-i-3D-3D-3D","(value)",""],["===","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::InstanceOf","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::KindOf","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Support::AllExceptionsExceptOnesWeMustNotRescue","classes/RSpec/Support/AllExceptionsExceptOnesWeMustNotRescue.html#method-c-3D-3D-3D","(exception)",""],["Array","RSpec::Matchers::EnglishPhrasing","classes/RSpec/Matchers/EnglishPhrasing.html#method-c-Array","(obj)","<p>Not sure why, but on travis on 1.8.7 we have gotten these warnings: lib/rspec/matchers/english_phrasing.rb …\n"],["LCS","LCS","classes/LCS.html#method-c-LCS","(seq1, seq2, &block)",""],["[]","RDoc::I18n::Locale","classes/RDoc/I18n/Locale.html#method-c-5B-5D","(locale_name)","<p>Returns the locale object for <code>locale_name</code>.\n"],["[]","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-i-5B-5D","(n)","<p>Accesses flags for character <code>n</code>\n"],["[]","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-5B-5D","(key)",""],["[]","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-5B-5D","(key)",""],["[]","RSpec::Core::HashImitatable","classes/RSpec/Core/HashImitatable.html#method-i-5B-5D","(key)",""],["[]","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-5B-5D","(method_name)","<p>@private\n"],["[]","Rake::FileList","classes/Rake/FileList.html#method-c-5B-5D","(*args)","<p>Create a new file list including the files listed. Similar to:\n\n<pre><code>FileList.new(*args)\n</code></pre>\n"],["[]","Rake::FileList","classes/Rake/FileList.html#method-c-5B-5D","(*args)","<p>Create a new file list including the files listed. Similar to:\n\n<pre><code>FileList.new(*args)\n</code></pre>\n"],["[]","Rake::NameSpace","classes/Rake/NameSpace.html#method-i-5B-5D","(name)","<p>Lookup a task named <code>name</code> in the namespace.\n"],["[]","Rake::Task","classes/Rake/Task.html#method-c-5B-5D","(task_name)","<p>Return a task with the given name.  If the task is not currently known, try to synthesize one from the …\n"],["[]","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-5B-5D","(index)","<p>Find an argument value by name or index.\n"],["[]","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-5B-5D","(task_name, scopes=nil)","<p>Find a matching task for <code>task_name</code>.\n"],["[]=","RDoc::I18n::Locale","classes/RDoc/I18n/Locale.html#method-c-5B-5D-3D","(locale_name, locale)","<p>Sets the locale object for <code>locale_name</code>.\n<p>Normally, this method is not used. This method is useful for testing. …\n"],["[]=","RSpec::Core::HashImitatable","classes/RSpec/Core/HashImitatable.html#method-i-5B-5D-3D","(key, value)",""],["__build_mock_proxy","RSpec::Mocks::InstanceVerifyingDouble","classes/RSpec/Mocks/InstanceVerifyingDouble.html#method-i-__build_mock_proxy","(order_group)",""],["__build_mock_proxy_unless_expired","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-__build_mock_proxy_unless_expired","(order_group)","<p>@private\n"],["__delegate_operator","RSpec::Matchers::BuiltIn::NegativeOperatorMatcher","classes/RSpec/Matchers/BuiltIn/NegativeOperatorMatcher.html#method-i-__delegate_operator","(actual, operator, expected)",""],["__delegate_operator","RSpec::Matchers::BuiltIn::PositiveOperatorMatcher","classes/RSpec/Matchers/BuiltIn/PositiveOperatorMatcher.html#method-i-__delegate_operator","(actual, operator, expected)",""],["__disallow_further_usage!","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-__disallow_further_usage-21","()","<p>@private\n"],["__send__","RSpec::Mocks::VerifyingDouble","classes/RSpec/Mocks/VerifyingDouble.html#method-i-__send__","(name, *args, &block)",""],["__shared_context_recordings","RSpec::Core::SharedContext","classes/RSpec/Core/SharedContext.html#method-i-__shared_context_recordings","()","<p>@private\n"],["_base_name_for","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-_base_name_for","(group)",""],["a_kind_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-a_kind_of","(klass)",""],["abort_with","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-abort_with","(msg, exit_status)","<p>@private\n"],["accept","RDoc::Markup::BlankLine","classes/RDoc/Markup/BlankLine.html#method-i-accept","(visitor)","<p>Calls #accept_blank_line on <code>visitor</code>\n"],["accept","RDoc::Markup::BlockQuote","classes/RDoc/Markup/BlockQuote.html#method-i-accept","(visitor)","<p>Calls #accept_block_quote on <code>visitor</code>\n"],["accept","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-accept","(visitor)","<p>Runs this document and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::HardBreak","classes/RDoc/Markup/HardBreak.html#method-i-accept","(visitor)","<p>Calls #accept_hard_break on <code>visitor</code>\n"],["accept","RDoc::Markup::IndentedParagraph","classes/RDoc/Markup/IndentedParagraph.html#method-i-accept","(visitor)","<p>Calls #accept_indented_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-accept","(visitor)","<p>Runs this list and all its #items through <code>visitor</code>\n"],["accept","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-accept","(visitor)","<p>Runs this list item and all its #parts through <code>visitor</code>\n"],["accept","RDoc::Markup::Paragraph","classes/RDoc/Markup/Paragraph.html#method-i-accept","(visitor)","<p>Calls #accept_paragraph on <code>visitor</code>\n"],["accept","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-accept","(visitor)","<p>Calls #accept_raw+ on <code>visitor</code>\n"],["accept","RDoc::Markup::Rule","classes/RDoc/Markup/Rule.html#method-i-accept","(visitor)","<p>Calls #accept_rule on <code>visitor</code>\n"],["accept","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-accept","(visitor)","<p>Calls #accept_verbatim on <code>visitor</code>\n"],["accept_blank_line","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_blank_line","(blank_line)","<p>Adds <code>blank_line</code> to the output\n"],["accept_blank_line","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_blank_line","(markup_item)",""],["accept_block_quote","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_block_quote","(block_quote)","<p>Adds <code>block_quote</code> to the output\n"],["accept_block_quote","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_block_quote","(block_quote)","<p>Adds <code>paragraph</code> to the output\n"],["accept_block_quote","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_block_quote","(block_quote)","<p>Adds tts from <code>block_quote</code> to the output\n"],["accept_document","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output\n"],["accept_document","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-i-accept_document","(document)","<p>Adds <code>document</code> to the output, using its heading cutoff if present\n"],["accept_heading","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-accept_heading","(heading)","<p>Makes heading text bold.\n"],["accept_heading","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output.  The headings greater than 6 are trimmed to level 6.\n"],["accept_heading","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output as a paragraph\n"],["accept_heading","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the output\n"],["accept_heading","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-i-accept_heading","(heading)","<p>Adds <code>heading</code> to the table of contents\n"],["accept_heading","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_heading","(markup_item)",""],["accept_indented_paragraph","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_indented_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_list_end","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_end","(list)","<p>Finishes consumption of <code>list</code>\n"],["accept_list_end","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_end","(list)","<p>Pops the list type for <code>list</code> from #list_type\n"],["accept_list_item_end","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-accept_list_item_end","(list_item)","<p>Overrides indent width to ensure output lines up correctly.\n"],["accept_list_item_end","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_item_end","(list_item)","<p>Finishes consumption of <code>list_item</code>\n"],["accept_list_item_end","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_end","(markup_item)",""],["accept_list_item_start","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-accept_list_item_start","(list_item)","<p>Adds coloring to note and label list items\n"],["accept_list_item_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_item_start","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_item_start","(list_item)","<p>Prepares the visitor for consuming <code>list_item</code>\n"],["accept_list_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_list_start","(list)","<p>Prepares the visitor for consuming <code>list</code>\n"],["accept_list_start","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_list_start","(list)","<p>Pushes the list type for <code>list</code> onto #list_type\n"],["accept_paragraph","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_paragraph","(paragraph)",""],["accept_paragraph","RDoc::Markup::ToJoinedParagraph","classes/RDoc/Markup/ToJoinedParagraph.html#method-i-accept_paragraph","(paragraph)","<p>Converts the parts of <code>paragraph</code> to a single entry.\n"],["accept_paragraph","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_paragraph","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_paragraph","(paragraph)","<p>Adds <code>paragraph</code> to the output\n"],["accept_raw","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_raw","(raw)","<p>Adds <code>raw</code> to the output\n"],["accept_raw","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_raw","(markup_item)",""],["accept_rule","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_rule","(rule)","<p>Adds <code>rule</code> to the output\n"],["accept_rule","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_rule","(markup_item)",""],["accept_verbatim","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-accept_verbatim","(verbatim)","<p>Adds <code>verbatim</code> to the output\n"],["accept_verbatim","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 4 columns\n"],["accept_verbatim","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-accept_verbatim","(verbatim)","<p>Outputs <code>verbatim</code> indented 2 columns\n"],["accept_verbatim","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-accept_verbatim","(markup_item)",""],["actual","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-actual","()","<p>@private\n"],["actual_delta","RSpec::Matchers::BuiltIn::ChangeDetails","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-actual_delta","()",""],["actual_exists?","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","classes/RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-actual_exists-3F","()","<p>@api private @return [Boolean]\n"],["actual_formatted","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-actual_formatted","()","<p>@private\n"],["actual_received_count_matters?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-actual_received_count_matters-3F","()",""],["add","RDoc::Context","classes/RDoc/Context.html#method-i-add","(klass, name, comment)","<p>Adds an item of type <code>klass</code> with the given <code>name</code> and <code>comment</code> to the context.\n<p>Currently only RDoc::Extend …\n"],["add","RDoc::Generator::POT::PO","classes/RDoc/Generator/POT/PO.html#method-i-add","(entry)","<p>Adds a PO entry to the PO.\n"],["add","RDoc::Generator::SDoc::FilesTree","classes/RDoc/Generator/SDoc/FilesTree.html#method-i-add","(path, url)",""],["add","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-add","(updated)",""],["add","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-add","(updated)",""],["add","RSpec::Core::Formatters::Loader","classes/RSpec/Core/Formatters/Loader.html#method-i-add","(formatter_to_use, *paths)","<p>@private\n"],["add","RSpec::Core::InclusionRules","classes/RSpec/Core/InclusionRules.html#method-i-add","(*args)",""],["add","RSpec::Core::MultipleExceptionError::InterfaceTag","classes/RSpec/Core/MultipleExceptionError/InterfaceTag.html#method-i-add","(exception)","<p>Appends the provided exception to the list. @param exception [Exception] Exception to append to the list. …\n"],["add","RSpec::Core::SharedExampleGroup::Registry","classes/RSpec/Core/SharedExampleGroup/Registry.html#method-i-add","(context, name, *metadata_args, &block)",""],["add","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-add","(method_name, chain)","<p>@private\n"],["add","Rake::FileList","classes/Rake/FileList.html#method-i-add","(*filenames)",""],["add","Rake::FileList","classes/Rake/FileList.html#method-i-add","(*filenames)",""],["add_alias","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in <code>context</code>.\n"],["add_alias","RDoc::Attr","classes/RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a new alias for this known method/attribute. …\n"],["add_alias","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_also_in","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_also_in","(out, also_in)","<p>Adds paths for undocumented classes <code>also_in</code> to <code>out</code>\n"],["add_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or attribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_c_enclosure","RDoc::Store","classes/RDoc/Store.html#method-i-add_c_enclosure","(variable, namespace)","<p>Adds <code>module</code> as an enclosure (namespace) for the given <code>variable</code> for C files.\n"],["add_c_variables","RDoc::Store","classes/RDoc/Store.html#method-i-add_c_variables","(c_parser)","<p>Adds C variables from an RDoc::Parser::C\n"],["add_class","RDoc::Context","classes/RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain &#39;::&#39;, …\n"],["add_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_class","(out, name, classes)","<p>Adds a class header to <code>out</code> for class <code>name</code> which is described in <code>classes</code>.\n"],["add_class","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash <code>self_hash</code>, and to <code>all_hash</code> (either <code>TopLevel::modules_hash</code> …\n"],["add_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule&#39;s list of comments at <code>location</code>.  This method is preferred over  …\n"],["add_comment","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-add_comment","(comment)","<p>Adds <code>comment</code> to this section\n"],["add_constant","RDoc::Context","classes/RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the comment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_default_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-add_default_stub","(*args, &implementation)","<p>@private\n"],["add_description","Rake::Task","classes/Rake/Task.html#method-i-add_description","(description)","<p>Add a description to the task.  The description can consist of an option argument list (enclosed brackets) …\n"],["add_dir_to_load_path","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-add_dir_to_load_path","(dir)",""],["add_example","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-add_example","(example)","<p>Adds an example to the example group\n"],["add_expectation","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-add_expectation","(error_generator, expectation_ordering, expected_from, opts, &implementation)","<p>@private\n"],["add_expectation","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-i-add_expectation","(*args, &block)",""],["add_extend","RDoc::Context","classes/RDoc/Context.html#method-i-add_extend","(ext)","<p>Adds extension module <code>ext</code> which should be an RDoc::Extend\n"],["add_extends","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_extends","(out, extends)","<p>Adds <code>extends</code> to <code>out</code>\n"],["add_extension_modules","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_extension_modules","(out, type, extensions)","<p>Adds a list of <code>extensions</code> to this module of the given <code>type</code> to <code>out</code>. add_includes and add_extends call …\n"],["add_failure_exit_code","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_failure_exit_code","(argv)",""],["add_file","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file","RDoc::Store","classes/RDoc/Store.html#method-i-add_file","(absolute_name, relative_name: absolute_name, parser: nil)","<p>Adds the file with <code>name</code> as an RDoc::TopLevel to the store.  Returns the created RDoc::TopLevel.\n"],["add_filter","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_filter","(argv, name, hash)",""],["add_footnote","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-add_footnote","(content)","<p>Adds footnote <code>content</code> to the document\n"],["add_formatter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-add_formatter","(formatter, output=output_wrapper)","<p>@overload add_formatter(formatter) @overload add_formatter(formatter, output)\n<p>@param formatter [Class, …\n"],["add_formatters","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_formatters","(argv)",""],["add_from","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_from","(out, store)","<p>Adds “(from …)” to <code>out</code> for <code>store</code>\n"],["add_full_description","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_full_description","(argv)",""],["add_generator","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_html","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_html","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_html","(tag, name)","<p>Adds a markup class with <code>name</code> for words surrounded by HTML tag <code>tag</code>. To process emphasis tags:\n\n<pre><code>am.add_html ...\n</code></pre>\n"],["add_ids","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-add_ids","(rerun_path, scoped_ids)",""],["add_include","RDoc::Context","classes/RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_includes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_includes","(out, includes)","<p>Adds <code>includes</code> to <code>out</code>\n"],["add_label","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-add_label","(label)","<p>Adds label <code>label</code> to the document\n"],["add_libs","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_libs","(argv)",""],["add_line_numbers","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-add_line_numbers","(src)","<p>Prepend <code>src</code> with line numbers.  Relies on the first line of a source code listing having:\n\n<pre><code># File xxxxx, ...\n</code></pre>\n"],["add_loader","Rake::Application","classes/Rake/Application.html#method-i-add_loader","(ext, loader)","<p>Add a loader to handle imported files ending in the extension <code>ext</code>.\n"],["add_location","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-add_location","(file_path, line_numbers)","<p>@api private\n<p>@param file_path [String] @param line_numbers [Array]\n"],["add_message_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-add_message_expectation","(method_name, opts=DEFAULT_MESSAGE_EXPECTATION_OPTS, &block)","<p>@private\n"],["add_message_expectation","RSpec::Mocks::ProxyForNil","classes/RSpec/Mocks/ProxyForNil.html#method-i-add_message_expectation","(method_name, opts={}, &block)",""],["add_message_expectation","RSpec::Mocks::VerifyingProxyMethods","classes/RSpec/Mocks/VerifyingProxyMethods.html#method-i-add_message_expectation","(method_name, opts={}, &block)",""],["add_method","RDoc::Context","classes/RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or attribute), updates the comment if it was empty. …\n"],["add_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_method","(out, name)","<p>Looks up the method <code>name</code> and adds it to <code>out</code>\n"],["add_method","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of <code>self</code>.\n"],["add_method_documentation","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_method_documentation","(out, klass)","<p>Adds documentation for all methods in <code>klass</code> to <code>out</code>\n"],["add_method_list","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-add_method_list","(out, methods, name)","<p>Adds a list of <code>methods</code> to <code>out</code> with a heading of <code>name</code>\n"],["add_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows <code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_module_alias","(from, from_name, to, file)","<p>Adds an alias from <code>from</code> (a class or module) to <code>name</code> which was defined in <code>file</code>.\n"],["add_module_by_normal_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_module_by_normal_module","(mod)","<p>Adds a module by <code>RDoc::NormalModule</code> instance. See also #add_module.\n"],["add_paragraph","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-add_paragraph","()","<p>Throws <code>:done</code> when paragraph_limit paragraphs have been encountered\n"],["add_rakelib","Rake","classes/Rake.html#method-c-add_rakelib","(*files)","<p>Add files to the rakelib list\n"],["add_read_only_setting","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-add_read_only_setting","(name, opts={})","<p>@private\n<p>As `add_setting` but only add the reader.\n"],["add_regexp_handling","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_regexp_handling","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using something like:\n\n<pre><code>parser.add_regexp_handling(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...\n</code></pre>\n"],["add_regexp_handling","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_regexp_handling","(pattern, name)","<p>Adds a regexp handling for <code>pattern</code> with <code>name</code>.  A simple URL handler would be:\n\n<pre><code>@am.add_regexp_handling(/((https?:)\\S+\\w)/, ...\n</code></pre>\n"],["add_regexp_handling_RDOCLINK","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-add_regexp_handling_RDOCLINK","()","<p>Adds a regexp handling for links of the form rdoc-…:\n"],["add_regexp_handling_TIDYLINK","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-add_regexp_handling_TIDYLINK","()","<p>Adds a regexp handling for links of the form <text> and &lt;word>\n"],["add_require","RDoc::Context","classes/RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context&#39;s top level\n"],["add_requires","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-add_requires","(argv)",""],["add_run","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-add_run","(obj)",""],["add_section","RDoc::Context","classes/RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn&#39;t already exist. <code>comment</code> will be appended to …\n"],["add_setting","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-add_setting","(name, opts={})","<p>@private\n<p>Invoked by the `add_setting` instance method. Use that method on a `Configuration` instance rather …\n"],["add_setting","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-add_setting","(name, opts={})","<p>@overload add_setting(name) @overload add_setting(name, opts) @option opts [Symbol] :default\n\n<pre><code>Set a default ...\n</code></pre>\n"],["add_should_and_should_not_to","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-add_should_and_should_not_to","(*modules)","<p>Adds `should` and `should_not` to the given classes or modules. This can be used to ensure `should` works …\n"],["add_simple_expectation","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-add_simple_expectation","(method_name, response, error_generator, backtrace_line)","<p>@private\n"],["add_simple_expectation","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-add_simple_expectation","(method_name, response, location)","<p>@private\n"],["add_simple_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-add_simple_expectation","(method_name, response, location)","<p>@private\n"],["add_simple_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-add_simple_stub","(method_name, response)","<p>A simple stub can only return a concrete value for a message, and cannot match on arguments. It is used …\n"],["add_simple_stub","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-add_simple_stub","(method_name, response)","<p>@private\n"],["add_simple_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-add_simple_stub","(method_name, response)","<p>@private\n"],["add_simple_stub","RSpec::Mocks::VerifyingProxyMethods","classes/RSpec/Mocks/VerifyingProxyMethods.html#method-i-add_simple_stub","(method_name, *args)",""],["add_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-add_stub","(error_generator, expectation_ordering, expected_from, opts={}, &implementation)","<p>@private\n"],["add_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-add_stub","(method_name, opts={}, &implementation)","<p>@private\n"],["add_stub","RSpec::Mocks::ProxyForNil","classes/RSpec/Mocks/ProxyForNil.html#method-i-add_stub","(method_name, opts={}, &implementation)",""],["add_stub","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-i-add_stub","(*args, &block)",""],["add_stub","RSpec::Mocks::VerifyingProxyMethods","classes/RSpec/Mocks/VerifyingProxyMethods.html#method-i-add_stub","(method_name, opts={}, &implementation)",""],["add_stub_and_should_receive_to","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-add_stub_and_should_receive_to","(*modules)","<p>Adds `stub` and `should_receive` to the given modules or classes. This is usually only necessary if you …\n"],["add_tag","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-add_tag","(name, start, stop)","<p>Add a new set of tags for an attribute. We allow separate start and end tags for flexibility\n"],["add_target","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-i-add_target","(target)",""],["add_text_tests","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-c-add_text_tests","()","<p>Adds test cases to the calling TestCase.\n"],["add_to","RDoc::Context","classes/RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the Ruby parser.\n"],["add_to_load_path","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-add_to_load_path","(*dirs)",""],["add_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_token","(*tokens)",""],["add_token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-add_token_listener","(obj)","<p>Adds a token listener <code>obj</code>, but you should probably use token_listener\n"],["add_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_tokens","(*tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_visitor_tests","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-c-add_visitor_tests","()","<p>Call to add the visitor tests to your test case\n"],["add_with_low_priority","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-add_with_low_priority","(updated)",""],["add_with_low_priority","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-add_with_low_priority","(updated)",""],["add_with_low_priority","RSpec::Core::InclusionRules","classes/RSpec/Core/InclusionRules.html#method-i-add_with_low_priority","(*args)",""],["add_word_pair","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as <strong>bold</strong>).  Matching entries will …\n"],["add_word_pair","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-add_word_pair","(start, stop, name)","<p>Adds a markup class with <code>name</code> for words wrapped in the <code>start</code> and <code>stop</code> character.  To make words wrapped …\n"],["adding?","LCS::Change","classes/LCS/Change.html#method-i-adding-3F","()",""],["additional_expected_calls","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-additional_expected_calls","()",""],["advise","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-advise","(*args)",""],["after","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-after","(scope=nil, *meta, &block)","<p>Defines a `after` hook. See {Hooks#after} for full docs.\n<p>This method differs from {Hooks#after} in only …\n"],["after","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-after","(*args, &block)","<p>@api public @overload after(&amp;block) @overload after(scope, &amp;block)\n\n<pre><code>@param scope [Symbol] `:example`, ...\n</code></pre>\n"],["after_teardown","RSpec::Mocks::MinitestIntegration","classes/RSpec/Mocks/MinitestIntegration.html#method-i-after_teardown","()",""],["aggregate","RSpec::Expectations::FailureAggregator","classes/RSpec/Expectations/FailureAggregator.html#method-i-aggregate","()",""],["aggregate_failures","Object","classes/Object.html#method-i-aggregate_failures","(*args, &block)","<p>Convert a `MultipleExpectationsNotMetError` to a `Minitest::Assertion` error so it gets counted in minitest&#39;s …\n"],["aggregate_failures","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-aggregate_failures","(label=nil, metadata={}, &block)","<p>Allows multiple expectations in the provided block to fail, and then aggregates them into a single exception, …\n"],["aggregation_block_label","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-aggregation_block_label","()","<p>@return [String] The user-assigned label for the aggregation block.\n"],["aggregation_metadata","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-aggregation_metadata","()","<p>@return [Hash] The metadata hash passed to `aggregate_failures`.\n"],["alias_example_group_to","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-alias_example_group_to","(new_name, *args)","<p>Creates a method that defines an example group with the provided metadata. Can be used to define example …\n"],["alias_example_to","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-alias_example_to","(name, *args)","<p>Creates a method that delegates to `example` including the submitted `args`. Used internally to add variants …\n"],["alias_extension","RDoc::Parser","classes/RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending “new_ext” will be parsed …\n"],["alias_it_behaves_like_to","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-alias_it_behaves_like_to","(new_name, report_label='')","<p>Define an alias for it_should_behave_like that allows different language (like “it_has_behavior” …\n"],["alias_it_should_behave_like_to","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-alias_it_should_behave_like_to","(new_name, report_label='')",""],["alias_matcher","RSpec::Matchers","classes/RSpec/Matchers.html#method-c-alias_matcher","(*args, &block)","<p>@!macro [attach] alias_matcher\n\n<pre><code>@!parse\n  alias $1 $2\n</code></pre>\n<p>@!visibility private We define this override here …\n"],["alias_matcher","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#method-i-alias_matcher","(new_name, old_name, options={}, &description_override)","<p>Defines a matcher alias. The returned matcher&#39;s `description` will be overriden to reflect the phrasing …\n"],["all","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-all","(expected)","<p>Passes if the provided matcher passes when checked against all elements of the collection.\n<p>@example\n\n<pre><code>expect([1, ...\n</code></pre>\n"],["all_classes","RDoc::Store","classes/RDoc/Store.html#method-i-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::Store","classes/RDoc/Store.html#method-i-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_example_groups","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-all_example_groups","()","<p>@private\n"],["all_example_groups","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-all_example_groups","()",""],["all_examples","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-all_examples","()","<p>@private\n"],["all_expectations_fulfilled?","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-all_expectations_fulfilled-3F","()","<p>@private\n"],["all_files","RDoc::Store","classes/RDoc/Store.html#method-i-all_files","()","<p>All TopLevels known to RDoc\n"],["all_hooks_for","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-all_hooks_for","(position, scope)",""],["all_modules","RDoc::Store","classes/RDoc/Store.html#method-i-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_prerequisite_tasks","Rake::Task","classes/Rake/Task.html#method-i-all_prerequisite_tasks","()","<p>List of all unique prerequisite tasks including prerequisite tasks&#39; prerequisites. Includes self …\n"],["alldirs","TestRake","classes/TestRake.html#method-i-alldirs","(fn)",""],["allow","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-allow","(target)",""],["allow_any_instance_of","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-allow_any_instance_of","(klass)",""],["allow_deprecation","RSpecHelpers","classes/RSpecHelpers.html#method-i-allow_deprecation","()",""],["allow_message","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-allow_message","(subject, message, opts={}, &block)","<p>Adds an allowance (stub) on `subject`\n<p>@param subject the subject to which the message will be added @param …\n"],["allow_message_expectations_on_nil","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-allow_message_expectations_on_nil","()","<p>Disables warning messages about expectations being set on nil.\n<p>By default warning messages are issued …\n"],["allow_warning","RSpecHelpers","classes/RSpecHelpers.html#method-i-allow_warning","()",""],["already_observing?","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-already_observing-3F","(method_name)","<p>@private\n"],["an_instance_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-an_instance_of","(klass)",""],["analyze_patchset","Diff::LCS::Internals","classes/Diff/LCS/Internals.html#method-c-analyze_patchset","(patchset, depth = 0)","<p>This method will analyze the provided patchset to provide a single-pass normalization (conversion of …\n"],["ancestors","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes will add their superclass …\n"],["ancestors","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-ancestors","()","<p>The ancestors of this class including modules.  Unlike Module#ancestors, this class is not included in …\n"],["ancestors","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors","RDoc::Store","classes/RDoc/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors in this store.  If Foo in this …\n"],["ancestors_of","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-ancestors_of","(klass)","<p>Returns ancestor classes of <code>klass</code>\n"],["and","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-i-and","(matcher)","<p>Creates a compound `and` expectation. The matcher will only pass if both sub-matchers pass. This can …\n"],["and_any_keywords","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-and_any_keywords","()",""],["and_call_original","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_call_original","()","<p>Tells the object to delegate to the original unmodified method when it receives the message.\n<p>@note This …\n"],["and_keywords","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-and_keywords","(*keywords)",""],["and_raise","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_raise","(*args)","<p>@overload and_raise @overload and_raise(ExceptionClass) @overload and_raise(ExceptionClass, message) …\n"],["and_return","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_return","(first_value, *values)","<p>@overload and_return(value) @overload and_return(first_value, second_value)\n<p>Tells the object to return …\n"],["and_throw","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_throw","(*args)","<p>@overload and_throw(symbol) @overload and_throw(symbol, object)\n<p>Tells the object to throw a symbol (with …\n"],["and_unlimited_arguments","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-and_unlimited_arguments","()",""],["and_wrap_original","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_wrap_original","(&block)","<p>Decorates the stubbed method with the supplied block. The original unmodified method is passed to the …\n"],["and_yield","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-and_yield","(*args, &block)","<p>Tells the object to yield one or more args to a block when the message is received.\n<p>@return [MessageExpectation] …\n"],["and_yield_receiver_to_implementation","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-and_yield_receiver_to_implementation","()",""],["annotate","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-annotate","(tag)","<p>Allows <code>tag</code> to be decorated with additional information.\n"],["annotate","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-annotate","(tag)","<p>Turns on or off regexp handling for <code>convert_string</code>\n"],["announce_exclusion_filter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-announce_exclusion_filter","(announcements)","<p>@api private\n<p>Add exclusion filters to announcement message.\n"],["announce_filters","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-announce_filters","()","<p>@api private\n<p>Notify reporter of filters.\n"],["announce_inclusion_filter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-announce_inclusion_filter","(announcements)","<p>@api private\n<p>Add inclusion filters to announcement message.\n"],["any_args","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-any_args","()","<p>Acts like an arg splat, matching any number of args at any point in an arg list.\n<p>@example\n\n<pre><code>expect(object).to ...\n</code></pre>\n"],["any_content","RDoc::Context","classes/RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases, require, …\n"],["any_instance","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-any_instance","()",""],["any_instance_proxy_for","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-any_instance_proxy_for","(*_args)",""],["any_instance_proxy_for","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-any_instance_proxy_for","(klass)",""],["any_instance_recorder_for","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-any_instance_recorder_for","(*_args)",""],["any_instance_recorder_for","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-any_instance_recorder_for","(klass, only_return_existing=false)",""],["any_instance_recorders_from_ancestry_of","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-any_instance_recorders_from_ancestry_of","(_object)",""],["any_instance_recorders_from_ancestry_of","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-any_instance_recorders_from_ancestry_of","(object)",""],["anything","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-anything","()","<p>Matches any argument at all.\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(anything)\n</code></pre>\n"],["anythingize_lonely_keys","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-c-anythingize_lonely_keys","(*args)","<p>@private\n"],["append","RDoc::RD::Inline","classes/RDoc/RD/Inline.html#method-i-append","(more)","<p>Appends <code>more</code> to this inline.  <code>more</code> may be a String or another Inline.\n"],["append","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-append","(item, metadata)",""],["append","RSpec::Core::FilterableItemRepository::UpdateOptimized","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-append","(item, metadata)",""],["append","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-append","(invocation)","<p>Append an invocation to the chain of invocations. It is an error if the invocation already listed.\n"],["append","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-c-append","(invocation, chain)","<p>Class level append.\n"],["append","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-append","(invocation)",""],["append_after","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-append_after","(scope=nil, *meta, &block)","<p>Adds `block` to the end of the list of `after` blocks in the same scope (`:example`, `:context`, or `:suite`), …\n"],["append_after","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-append_after","(*args, &block)","<p>Adds `block` to the back of the list of `after` blocks in the same scope (`:example`, `:context`, or …\n"],["append_before","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-append_before","(scope=nil, *meta, &block)",""],["append_before","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-append_before","(*args, &block)",""],["append_path","SDoc::Merge","classes/SDoc/Merge.html#method-i-append_path","(subtree, path)",""],["application","Rake","classes/Rake.html#method-c-application","()","<p>Current Rake Application\n"],["application=","Rake","classes/Rake.html#method-c-application-3D","(app)","<p>Set the current Rake application object.\n"],["applies_to?","RSpec::Mocks::ClassNewMethodReference","classes/RSpec/Mocks/ClassNewMethodReference.html#method-c-applies_to-3F","(method_name)",""],["apply?","RSpec::Core::MetadataFilter","classes/RSpec/Core/MetadataFilter.html#method-c-apply-3F","(predicate, filters, metadata)","<p>@private\n"],["apply_derived_metadata_to","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-apply_derived_metadata_to","(metadata)","<p>@private\n"],["arbitrary_kw_args?","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-arbitrary_kw_args-3F","()",""],["aref","RDoc::Alias","classes/RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-aref","()","<p>HTML fragment reference for this module or class.  See RDoc::NormalClass#aref and RDoc::NormalModule#aref …\n"],["aref","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-aref","()","<p>Anchor reference for linking to this section\n"],["aref","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is &#39;method&#39;.\n"],["aref_prefix","RDoc::Attr","classes/RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["aref_to","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-aref_to","(target_path)","<p>Generates a relative URL from this object&#39;s path to <code>target_path</code>\n"],["arg_names","Rake::Task","classes/Rake/Task.html#method-i-arg_names","()","<p>Name of arguments for this task.\n"],["arglists","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method&#39;s …\n"],["args","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-args","()",""],["args_match?","RSpec::Mocks::ArgumentListMatcher","classes/RSpec/Mocks/ArgumentListMatcher.html#method-i-args_match-3F","(*args)","<p>@api public @param [Array] args\n<p>Matches each element in the `expected_args` against the element in the …\n"],["argument","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-argument","()","<p>@api public No-op. Intended to be used as syntactic sugar when using `with`.\n<p>@example\n\n<pre><code>expect(obj).to respond_to(:message).with(3).arguments\n</code></pre>\n"],["arguments","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-arguments","()",""],["around","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-around","(scope=nil, *meta, &block)","<p>Registers `block` as an `around` hook.\n<p>See {Hooks#around} for full `around` hook docs.\n"],["around","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-around","(*args, &block)","<p>@api public @overload around(&amp;block) @overload around(scope, &amp;block)\n\n<pre><code>@param scope [Symbol] `:example` ...\n</code></pre>\n"],["array_including","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-array_including","(*args)","<p>Matches an array that includes the specified items at least once. Ignores duplicates and additional values …\n"],["article","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-article","()",""],["article","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-article","()",""],["as_href","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-as_href","(from_path)","<p>Generates a relative URL from <code>from_path</code> to this object&#39;s path\n"],["as_null_object","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-as_null_object","()","<p>@private Tells the object to ignore any messages that aren&#39;t explicitly set as stubs or message expectations. …\n"],["as_null_object","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-as_null_object","()",""],["as_null_object","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-as_null_object","()","<p>Tells the object to respond to all messages. If specific stub values are declared, they&#39;ll work as …\n"],["as_string","RDoc::Markup::Attributes","classes/RDoc/Markup/Attributes.html#method-i-as_string","(bitmap)","<p>Returns a string representation of <code>bitmap</code>\n"],["as_stubbed_const","RSpec::Mocks::ObjectVerifyingDoubleMethods","classes/RSpec/Mocks/ObjectVerifyingDoubleMethods.html#method-i-as_stubbed_const","(options={})",""],["ascend","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-ascend","(metadata)","<p>@private Returns an enumerator that iteratively walks up the given metadata through all example group …\n"],["ascend_until","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-ascend_until","()",""],["ascending","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-ascending","(metadata)","<p>@private Iteratively walks up from the given metadata through all example group ancestors, yielding each …\n"],["assemble_template","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-assemble_template","(body_file)","<p>Creates a template from its components and the <code>body_file</code>.\n<p>For backwards compatibility, if <code>body_file</code> contains …\n"],["assert_used!","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-assert_used-21","()",""],["assert_valid_expect_block!","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-assert_valid_expect_block-21","()",""],["assertions","RSpec::Core::MinitestAssertionsAdapter","classes/RSpec/Core/MinitestAssertionsAdapter.html#method-i-assertions","()",""],["asset","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-asset","(generator_name, req, res)","<p>Serves the asset at the path in <code>req</code> for <code>generator_name</code> via <code>res</code>.\n"],["assign_const","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-assign_const","(group)",""],["ast","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-ast","()",""],["at_least","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-at_least","(number)","<p>@api public Specifies the minimum number of times the method is expected to yield\n"],["at_least","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-at_least","(n, &block)","<p>Constrain a message expectation to be received at least a specific number of times.\n<p>@return [MessageExpectation] …\n"],["at_most","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-at_most","(number)","<p>@api public Specifies the maximum number of times the method is expected to yield\n"],["at_most","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-at_most","(n, &block)","<p>Constrain a message expectation to be received at most a specific number of times.\n<p>@return [MessageExpectation] …\n"],["attempt_to_add_rspec_terms_to_coderay_keywords","RSpec::Core::Formatters::SyntaxHighlighter","classes/RSpec/Core/Formatters/SyntaxHighlighter.html#method-c-attempt_to_add_rspec_terms_to_coderay_keywords","()","<p>rubocop:disable Lint/RescueException rubocop:disable Lint/HandleExceptions\n"],["attr_accessor","RSpec::Core::HashImitatable::ClassMethods","classes/RSpec/Core/HashImitatable/ClassMethods.html#method-i-attr_accessor","(*names)",""],["attribute","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-attribute","(turn_on, turn_off)","<p>Return an attribute object with the given turn_on and turn_off bits set\n"],["attributes","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-attributes","(text)","<p>Applies attribute-specific markup to <code>text</code> using RDoc::AttributeManager\n"],["attributes","RDoc::Store","classes/RDoc/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["autorun","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-autorun","()","<p>Register an `at_exit` hook that runs the suite when the process exits.\n<p>@note This is not generally needed. …\n"],["autorun_disabled?","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-autorun_disabled-3F","()","<p>@private\n"],["backtrace_exclusion_patterns","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-backtrace_exclusion_patterns","()","<p>Regexps used to exclude lines from backtraces.\n<p>Excludes lines from ruby (and jruby) source, installed …\n"],["backtrace_exclusion_patterns=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-backtrace_exclusion_patterns-3D","(patterns)","<p>Set regular expressions used to exclude lines in backtrace. @param patterns [Array&lt;Regexp&gt;] set …\n"],["backtrace_formatter","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-backtrace_formatter","()",""],["backtrace_inclusion_patterns","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-backtrace_inclusion_patterns","()","<p>Regexps used to include lines in backtraces.\n<p>Defaults to [Regexp.new Dir.getwd].\n<p>Lines that match an exclusion …\n"],["backtrace_inclusion_patterns=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-backtrace_inclusion_patterns-3D","(patterns)","<p>Set regular expressions used to include lines in backtrace. @attr patterns [Array&lt;Regexp&gt;] set …\n"],["backtrace_line","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-i-backtrace_line","(line)",""],["backwards_compatibility_default_proc","RSpec::Core::Metadata::ExampleGroupHash","classes/RSpec/Core/Metadata/ExampleGroupHash.html#method-c-backwards_compatibility_default_proc","(&example_group_selector)",""],["balanced_callback","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-balanced_callback","()",""],["balanced_callback_no_change","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-balanced_callback_no_change","()",""],["balanced_reverse","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-balanced_reverse","(change_result)",""],["balanced_traversal","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-balanced_traversal","(s1, s2, callback_type)",""],["base_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["base_name_for","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-base_name_for","(group)",""],["be","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be","(*args)","<p>@example\n\n<pre><code>expect(actual).to     be_truthy\nexpect(actual).to     be_falsey\nexpect(actual).to     be_nil ...\n</code></pre>\n"],["be_a","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_a","(klass)","<p>passes if target.kind_of?(klass)\n"],["be_a_kind_of","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_a_kind_of","(expected)","<p>Passes if actual.kind_of?(expected)\n<p>@example\n\n<pre><code>expect(5).to     be_a_kind_of(Integer)\nexpect(5).to     be_a_kind_of(Numeric) ...\n</code></pre>\n"],["be_an","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_an","(klass)",""],["be_an_instance_of","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_an_instance_of","(expected)","<p>Passes if actual.instance_of?(expected)\n<p>@example\n\n<pre><code>expect(5).to     be_an_instance_of(Integer)\nexpect(5).not_to ...\n</code></pre>\n"],["be_between","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_between","(min, max)","<p>Passes if actual.between?(min, max). Works with any Comparable object, including String, Symbol, Time …\n"],["be_falsey","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_falsey","()","<p>Passes if actual is falsey (false or nil)\n"],["be_instance_of","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_instance_of","(expected)",""],["be_kind_of","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_kind_of","(expected)",""],["be_nil","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_nil","()","<p>Passes if actual is nil\n"],["be_truthy","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_truthy","()","<p>Passes if actual is truthy (anything but false or nil)\n"],["be_within","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-be_within","(delta)","<p>Passes if actual == expected +/- delta\n<p>@example\n\n<pre><code>expect(result).to     be_within(0.5).of(3.0)\nexpect(result).not_to ...\n</code></pre>\n"],["before","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-before","(scope=nil, *meta, &block)","<p>Defines a `before` hook. See {Hooks#before} for full docs.\n<p>This method differs from {Hooks#before} in …\n"],["before","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-before","(*args, &block)","<p>@api public\n<p>@overload before(&amp;block) @overload before(scope, &amp;block)\n\n<pre><code>@param scope [Symbol] `:example`, ...\n</code></pre>\n"],["before_context_ivars","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-before_context_ivars","()","<p>@private\n"],["before_running_rdoc","RDoc::Task","classes/RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc generator. It is allowed …\n"],["before_running_rdoc","RDoc::Task","classes/RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc generator. It is allowed …\n"],["before_setup","RSpec::Mocks::MinitestIntegration","classes/RSpec/Mocks/MinitestIntegration.html#method-i-before_setup","()",""],["before_verifying_doubles","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-before_verifying_doubles","(&block)","<p>Provides a way to perform customisations when verifying doubles.\n<p>@example\n\n<pre><code>RSpec::Mocks.configuration.before_verifying_doubles ...\n</code></pre>\n"],["begin_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["begin_adding","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-begin_adding","(*)","<p>Prints a message at the beginning of parsing\n"],["binary?","RDoc::Parser","classes/RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has content that an RDoc …\n"],["bisect","RSpec::Core::Bisect::Coordinator","classes/RSpec/Core/Bisect/Coordinator.html#method-i-bisect","()",""],["bisect","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-i-bisect","(candidate_ids)",""],["bisect_aborted","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_aborted","(notification)",""],["bisect_complete","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_complete","(notification)",""],["bisect_dependency_check_failed","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_dependency_check_failed","(_notification)",""],["bisect_dependency_check_failed","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_failed","(_notification)",""],["bisect_dependency_check_passed","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_dependency_check_passed","(_notification)",""],["bisect_dependency_check_passed","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_passed","(_notification)",""],["bisect_dependency_check_started","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_dependency_check_started","(_notification)",""],["bisect_environment_hash","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-i-bisect_environment_hash","()",""],["bisect_failed","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_failed","(notification)",""],["bisect_individual_run_complete","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_individual_run_complete","(notification)",""],["bisect_individual_run_complete","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_individual_run_complete","(_)",""],["bisect_individual_run_start","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_individual_run_start","(notification)",""],["bisect_original_run_complete","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_original_run_complete","(notification)",""],["bisect_original_run_complete","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_original_run_complete","(notification)",""],["bisect_over","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-i-bisect_over","(candidate_ids)",""],["bisect_repro_command","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_repro_command","(notification)",""],["bisect_round_detected_multiple_culprits","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_detected_multiple_culprits","(_notification)",""],["bisect_round_detected_multiple_culprits","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_detected_multiple_culprits","(notification)",""],["bisect_round_ignoring_ids","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_ignoring_ids","(notification)",""],["bisect_round_ignoring_ids","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_ignoring_ids","(notification)",""],["bisect_round_started","RSpec::Core::Formatters::BisectDebugFormatter","classes/RSpec/Core/Formatters/BisectDebugFormatter.html#method-i-bisect_round_started","(notification)",""],["bisect_round_started","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_round_started","(notification, include_trailing_space=true)",""],["bisect_runner=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-bisect_runner-3D","(value)",""],["bisect_runner_class","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-bisect_runner_class","()","<p>@private\n"],["bisect_starting","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-i-bisect_starting","(notification)",""],["bisect_with","RSpec::Core::Bisect::Coordinator","classes/RSpec/Core/Bisect/Coordinator.html#method-c-bisect_with","(spec_runner, original_cli_args, formatter)",""],["bitmap_for","RDoc::Markup::Attributes","classes/RDoc/Markup/Attributes.html#method-i-bitmap_for","(name)","<p>Returns a unique bit for <code>name</code>\n"],["block_params=","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the Ruby parser: remove outer parentheses, etc.\n"],["body_content_lines","RSpec::Expectations::BlockSnippetExtractor","classes/RSpec/Expectations/BlockSnippetExtractor.html#method-i-body_content_lines","()","<p>Ideally we should properly handle indentations of multiline snippet, but it&#39;s not implemented yet …\n"],["boolean","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-boolean","()","<p>Matches a boolean value.\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(boolean())\n</code></pre>\n"],["break_on_newline","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-break_on_newline","","<p>Converts all newlines into hard breaks\n"],["build","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-c-build","()",""],["build","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-c-build","()",""],["build","RSpec::Core::Formatters::ExceptionPresenter::Factory","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory.html#method-i-build","()",""],["build_alias_method_name","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-build_alias_method_name","(method_name)","<p>@private\n"],["build_expectation","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-build_expectation","(error_generator, expectation_ordering)","<p>@private\n"],["build_expectation","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-build_expectation","(method_name)","<p>@private\n"],["build_hash_from","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-build_hash_from","(args, warn_about_example_group_filtering=false)","<p>@private Used internally to build a hash from an args array. Symbols are converted into hash keys with …\n"],["build_heading","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_heading","(level)","<p>Builds a Heading of <code>level</code>\n"],["build_heading","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns\n"],["build_index","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-build_index","()","<p>Builds the JSON index as a Hash.\n"],["build_list","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_list","(margin)","<p>Builds a List flush to <code>margin</code>\n"],["build_paragraph","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_paragraph","(margin)","<p>Builds a Paragraph that is flush to <code>margin</code>\n"],["build_paragraph","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns\n"],["build_verbatim","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-build_verbatim","(margin)","<p>Builds a Verbatim that is indented from <code>margin</code>.\n<p>The verbatim block is shifted left (the least indented …\n"],["build_verbatim","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples section will be marked as in Ruby …\n"],["by","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-by","(expected_delta)","<p>@api public Specifies the delta of the expected change.\n"],["by_at_least","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_least","(minimum)","<p>@api public Specifies a minimum delta of the expected change.\n"],["by_at_most","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_most","(maximum)","<p>@api public Specifies a maximum delta of the expected change.\n"],["cache_path","RDoc::Store","classes/RDoc/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["calculate","RDoc::Stats","classes/RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules, constants, attributes and methods. …\n"],["call","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-call","(*args, &block)","<p>Calls the proc and notes that the example has been executed.\n"],["call","RSpec::Core::Invocations::Bisect","classes/RSpec/Core/Invocations/Bisect.html#method-i-call","(options, err, out)",""],["call","RSpec::Core::Invocations::DRbWithFallback","classes/RSpec/Core/Invocations/DRbWithFallback.html#method-i-call","(options, err, out)",""],["call","RSpec::Core::Invocations::InitializeProject","classes/RSpec/Core/Invocations/InitializeProject.html#method-i-call","(*_args)",""],["call","RSpec::Core::Invocations::PrintVersion","classes/RSpec/Core/Invocations/PrintVersion.html#method-i-call","(_options, _err, out)",""],["call","RSpec::Expectations::FailureAggregator","classes/RSpec/Expectations/FailureAggregator.html#method-i-call","(failure, options)","<p>This method is defined to satisfy the callable interface expected by `RSpec::Support.with_failure_notifier`. …\n"],["call","RSpec::Mocks::AndReturnImplementation","classes/RSpec/Mocks/AndReturnImplementation.html#method-i-call","(*_args_to_ignore, &_block)",""],["call","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-call","(*args, &block)",""],["call","RSpec::Mocks::AndYieldImplementation","classes/RSpec/Mocks/AndYieldImplementation.html#method-i-call","(*_args_to_ignore, &block)",""],["call","RSpec::Mocks::CallbackInvocationStrategy","classes/RSpec/Mocks/CallbackInvocationStrategy.html#method-i-call","(doubled_module)",""],["call","RSpec::Mocks::Implementation","classes/RSpec/Mocks/Implementation.html#method-i-call","(*args, &block)",""],["call","RSpec::Mocks::NoCallbackInvocationStrategy","classes/RSpec/Mocks/NoCallbackInvocationStrategy.html#method-i-call","(_doubled_module)",""],["call_seq=","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-call_seq-3D","(call_seq)","<p>Sets the different ways you can call this method.  If an empty <code>call_seq</code> is given nil is assumed.\n<p>See also …\n"],["callbacks_for","LCS","classes/LCS.html#method-c-callbacks_for","(callbacks)",""],["called_max_times?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-called_max_times-3F","()",""],["called_max_times?","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-i-called_max_times-3F","()",""],["caller_locations_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-caller_locations_supported-3F","()",""],["can_detect_signals?","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-can_detect_signals-3F","()",""],["can_inspect?","RSpec::Support::ObjectFormatter::BigDecimalInspector","classes/RSpec/Support/ObjectFormatter/BigDecimalInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::DateTimeInspector","classes/RSpec/Support/ObjectFormatter/DateTimeInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::DelegatorInspector","classes/RSpec/Support/ObjectFormatter/DelegatorInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::DescribableMatcherInspector","classes/RSpec/Support/ObjectFormatter/DescribableMatcherInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::InspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/InspectableObjectInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::TimeInspector","classes/RSpec/Support/ObjectFormatter/TimeInspector.html#method-c-can_inspect-3F","(object)",""],["can_inspect?","RSpec::Support::ObjectFormatter::UninspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/UninspectableObjectInspector.html#method-c-can_inspect-3F","(object)",""],["can_parse","RDoc::Parser","classes/RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["can_parse_by_name","RDoc::Parser","classes/RDoc/Parser.html#method-c-can_parse_by_name","(file_name)","<p>Returns a parser that can handle the extension for <code>file_name</code>.  This does not depend upon the file being …\n"],["capture","RSpec::Matchers::BuiltIn::CaptureStderr","classes/RSpec/Matchers/BuiltIn/CaptureStderr.html#method-c-capture","(block)",""],["capture","RSpec::Matchers::BuiltIn::CaptureStdout","classes/RSpec/Matchers/BuiltIn/CaptureStdout.html#method-c-capture","(block)",""],["capture","RSpec::Matchers::BuiltIn::CaptureStreamToTempfile","classes/RSpec/Matchers/BuiltIn/CaptureStreamToTempfile.html#method-i-capture","(block)",""],["capture","RSpec::Matchers::BuiltIn::NullCapture","classes/RSpec/Matchers/BuiltIn/NullCapture.html#method-c-capture","(_block)",""],["capture_run_results","RSpec::Core::Bisect::Server","classes/RSpec/Core/Bisect/Server.html#method-i-capture_run_results","(files_or_directories_to_run=[], expected_failures=[])",""],["captures","RSpec::Matchers::BuiltIn::ReliableMatchData","classes/RSpec/Matchers/BuiltIn/ReliableMatchData.html#method-i-captures","()","<p>@api private returns an array of captures from the match data @return Array\n"],["cause_supported?","TestRakeApplication","classes/TestRakeApplication.html#method-i-cause_supported-3F","()",""],["chain","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-chain","(method_name, *attr_names, &definition)","<p>Convenience for defining methods on this matcher to create a fluent interface. The trick about fluent …\n"],["chain","Rake::InvocationExceptionMixin","classes/Rake/InvocationExceptionMixin.html#method-i-chain","()","<p>Return the invocation chain (list of Rake tasks) that were in effect when this exception was detected …\n"],["chain=","Rake::InvocationExceptionMixin","classes/Rake/InvocationExceptionMixin.html#method-i-chain-3D","(value)","<p>Set the invocation chain in effect when this exception was detected.\n"],["change","LCS::ContextDiffCallbacks","classes/LCS/ContextDiffCallbacks.html#method-i-change","(event)",""],["change","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-change","(event)","<p>Called when both the old and new values have changed.\n"],["change","LCS::SDiffCallbacks","classes/LCS/SDiffCallbacks.html#method-i-change","(event)",""],["change","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-change","(receiver=nil, message=nil, &block)","<p>Applied to a proc, specifies that its execution will cause some value to change.\n<p>@param [Object] receiver …\n"],["change_attribute","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-change_attribute","(current, new)","<p>Changes the current attribute from <code>current</code> to <code>new</code>\n"],["change_diff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-change_diff","(diff)",""],["change_encoding","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-change_encoding","(text, encoding)","<p>Changes encoding based on <code>encoding</code> without converting and returns new string\n"],["change_global_dsl","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-change_global_dsl","(&changes)","<p>@private\n"],["changed?","LCS::Change","classes/LCS/Change.html#method-i-changed-3F","()",""],["changed?","RSpec::Matchers::BuiltIn::ChangeDetails","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-changed-3F","()",""],["changed_attribute_by_name","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-changed_attribute_by_name","(current_set, new_set)","<p>Used by the tests to change attributes by name from <code>current_set</code> to <code>new_set</code>\n"],["char_pos","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-char_pos","(byte_offset)","<p>The character offset for the input string at the given <code>byte_offset</code>\n"],["check_directories","SDoc::Merge","classes/SDoc/Merge.html#method-i-check_directories","()",""],["check_expansion","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-check_expansion","()",""],["check_files","RDoc::Options","classes/RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_for_extra_spaces","RSpec::Support::WhitespaceChecks","classes/RSpec/Support/WhitespaceChecks.html#method-i-check_for_extra_spaces","(filename)",""],["check_for_tab_characters","RSpec::Support::WhitespaceChecks","classes/RSpec/Support/WhitespaceChecks.html#method-i-check_for_tab_characters","(filename)","<p>This malformed whitespace detection logic has been borrowed from bundler: github.com/bundler/bundler/blob/v1.8.0/spec/quality_spec.rb …\n"],["check_for_unexpected_arguments","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-check_for_unexpected_arguments","(expectation)","<p>@private\n"],["check_generator","RDoc::Options","classes/RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_message","RSpec::Expectations::ExpectationHelper","classes/RSpec/Expectations/ExpectationHelper.html#method-c-check_message","(msg)",""],["check_modeline","RDoc::Parser","classes/RDoc/Parser.html#method-c-check_modeline","(file_name)","<p>Returns the file type from the modeline in <code>file_name</code>\n"],["check_names","RDoc::Task","classes/RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc, :clobber_rdoc and :rerdoc.  If other names are …\n"],["check_names","RDoc::Task","classes/RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc, :clobber_rdoc and :rerdoc.  If other names are …\n"],["check_no_expansion","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-check_no_expansion","()",""],["check_tasks","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-check_tasks","(n1, n2, n3)",""],["child_name","RDoc::Context","classes/RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["children","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-children","()","<p>@private\n"],["children","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-children","()",""],["class_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_dir","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-class_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["class_dir","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-class_dir","()","<p>The directory classes are written to\n"],["class_dir","RDoc::Generator::POT","classes/RDoc/Generator/POT.html#method-i-class_dir","()",""],["class_dir","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-class_dir","()",""],["class_document","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-class_document","(name, found, klasses, includes, extends)","<p>Builds a RDoc::Markup::Document from <code>found</code>, <code>klasess</code> and <code>includes</code>\n"],["class_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-class_double","(doubled_class, *args)","<p>@overload class_double(doubled_class)\n\n<pre><code>@param doubled_class [String, Module]\n</code></pre>\n<p>@overload class_double(doubled_class, …\n"],["class_file","RDoc::Store","classes/RDoc/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::Store","classes/RDoc/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class methods (not full name).\n"],["class_of","RSpec::Support","classes/RSpec/Support.html#method-c-class_of","(object)","<p>@api private\n<p>Used internally to get a class of a given object, even if it does not respond to #class. …\n"],["class_path","RDoc::Store","classes/RDoc/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or class data)\n"],["class_spy","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-class_spy","(*args)","<p>@overload class_spy(doubled_class)\n\n<pre><code>@param doubled_class [String, Module]\n</code></pre>\n<p>@overload class_spy(doubled_class, …\n"],["classes","RDoc::Context","classes/RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-classes","()","<p>Hash mapping a known class or module to the stores it can be loaded from\n"],["classes_and_includes_and_extends_for","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-classes_and_includes_and_extends_for","(name)","<p>Returns the stores wherein <code>name</code> is found along with the classes, extends and includes that match it\n"],["classes_and_modules","RDoc::Context","classes/RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","classes/RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::Store","classes/RDoc/Store.html#method-i-classes_hash","()","<p>Hash of all classes known to RDoc\n"],["classify_arity","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-classify_arity","(arity=@method.arity)",""],["classify_parameters","RSpec::Support::BlockSignature","classes/RSpec/Support/BlockSignature.html#method-i-classify_parameters","()",""],["classify_parameters","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-classify_parameters","()",""],["clear","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-clear","()",""],["clear","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-clear","()",""],["clear","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-clear","()",""],["clear","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-clear","()","<p>@private\n"],["clear","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-clear","()",""],["clear","Rake::Task","classes/Rake/Task.html#method-i-clear","()","<p>Clear the existing prerequisites and actions of a rake task.\n"],["clear","Rake::Task","classes/Rake/Task.html#method-c-clear","()","<p>Clear the task list.  This cause rake to immediately forget all the tasks that have been assigned.  (Normally …\n"],["clear","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-clear","()","<p>Clear all tasks in this application.\n"],["clear_actions","Rake::Task","classes/Rake/Task.html#method-i-clear_actions","()","<p>Clear the existing actions on a rake task.\n"],["clear_argv","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-clear_argv","()",""],["clear_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the Ruby parser.\n"],["clear_comments","Rake::Task","classes/Rake/Task.html#method-i-clear_comments","()","<p>Clear the existing comments on a rake task.\n"],["clear_examples","RSpec","classes/RSpec.html#method-c-clear_examples","()","<p>Used to ensure examples get reloaded between multiple runs in the same process and ensures user configuration …\n"],["clear_exclude","Rake::FileList","classes/Rake/FileList.html#method-i-clear_exclude","()","<p>Clear all the exclude patterns so that we exclude nothing.\n"],["clear_exclude","Rake::FileList","classes/Rake/FileList.html#method-i-clear_exclude","()","<p>Clear all the exclude patterns so that we exclude nothing.\n"],["clear_generated_description","RSpec::Matchers","classes/RSpec/Matchers.html#method-c-clear_generated_description","()","<p>@api private Used by rspec-core to clear the state used to generate descriptions after an example.\n"],["clear_prerequisites","Rake::Task","classes/Rake/Task.html#method-i-clear_prerequisites","()","<p>Clear the existing prerequisites of a rake task.\n"],["clobber_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clobber_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["close","RSpec::Core::Bisect::Channel","classes/RSpec/Core/Bisect/Channel.html#method-i-close","()","<p>rubocop:enable Security/MarshalLoad\n"],["close","RSpec::Core::Formatters::BaseFormatter","classes/RSpec/Core/Formatters/BaseFormatter.html#method-i-close","(_notification)","<p>@api public\n<p>@param _notification [NullNotification] (Ignored) @see RSpec::Core::Formatters::Protocol#close …\n"],["close","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-close","(_notification)","<p>@api public\n<p>Invoked at the end of a suite run. Allows the formatter to do any tidying up, but be aware …\n"],["close","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-close","(_notification)",""],["close_after","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-close_after","()","<p>@private\n"],["closed_by?","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-closed_by-3F","(other)",""],["collect_first_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-collect_first_comment","()","<p>Look for the first comment in a file that isn&#39;t a shebang line.\n"],["collect_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["color","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-color","()","<p>Enables color output if the output is a TTY.  As of RSpec 3.6, this is the default behavior and this …\n"],["color?","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-color-3F","()",""],["color?","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-color-3F","()",""],["color?","RSpec::Support::Differ","classes/RSpec/Support/Differ.html#method-i-color-3F","()",""],["color_enabled?","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-color_enabled-3F","(output=output_stream)","<p>Check if color is enabled for a particular output. @param output [IO] an output stream to use, defaults …\n"],["color_mode","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-color_mode","()","<p>The mode for determining whether to display output in color. One of:\n<p>:automatic - the output will be in …\n"],["colorized_formatted_backtrace","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-colorized_formatted_backtrace","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["colorized_formatted_backtrace","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-colorized_formatted_backtrace","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>Returns the failures colorized formatted backtrace.\n<p>@param colorizer [#wrap] An object to colorize the …\n"],["colorized_message_lines","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-colorized_message_lines","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["colorized_message_lines","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-colorized_message_lines","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>Returns the message generated for this failure colorized line by line.\n<p>@param colorizer [#wrap] An object …\n"],["colorized_rerun_commands","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-colorized_rerun_commands","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@api public\n<p>Formats failures into a rerunable command format.\n<p>@param colorizer [#wrap] An object which …\n"],["colorized_totals_line","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-colorized_totals_line","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@api public\n<p>Wraps the results line with colors based on the configured colors for failure, pending, and …\n"],["command","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-command","(name, text)",""],["command_for","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-i-command_for","(locations, server)",""],["command_from","Object","classes/Object.html#method-i-command_from","(code_lines)",""],["comment","Rake::Task","classes/Rake/Task.html#method-i-comment","()","<p>First line (or sentence) of all comments. Multiple comments are separated by a “/”.\n"],["comment=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["complete","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::Store#complete\n"],["complete","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-complete","(name)","<p>Completes <code>name</code> based on the caches.  For Readline\n"],["complete","RDoc::Store","classes/RDoc/Store.html#method-i-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["concat","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-concat","(parts)","<p>Concatenates the given <code>parts</code> onto the document\n"],["conditionally_quote","RSpec::Core::ShellEscape","classes/RSpec/Core/ShellEscape.html#method-i-conditionally_quote","(id)",""],["config_colors_to_methods","RSpec::Core::Formatters::ConsoleCodes","classes/RSpec/Core/Formatters/ConsoleCodes.html#method-i-config_colors_to_methods","()","<p>@private\n"],["configuration","RSpec","classes/RSpec.html#method-c-configuration","()","<p>Returns the global [Configuration](RSpec/Core/Configuration) object. While you <em>can</em> use this method to …\n"],["configuration","RSpec::Core::MockingAdapters::RSpec","classes/RSpec/Core/MockingAdapters/RSpec.html#method-c-configuration","()",""],["configuration","RSpec::Expectations","classes/RSpec/Expectations.html#method-c-configuration","()","<p>The configuration object. @return [RSpec::Expectations::Configuration] the configuration object\n"],["configuration","RSpec::Matchers","classes/RSpec/Matchers.html#method-c-configuration","()","<p>Delegates to {RSpec::Expectations.configuration}. This is here because rspec-core&#39;s `expect_with` …\n"],["configuration","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-configuration","()","<p>Mocks specific configuration, as distinct from `RSpec.configuration` which is core RSpec configuration. …\n"],["configure","RSpec","classes/RSpec.html#method-c-configure","()","<p>Yields the global configuration to a block. @yield [Configuration] global configuration\n<p>@example\n\n<pre><code>RSpec.configure ...\n</code></pre>\n"],["configure","RSpec::Core::ConfigurationOptions","classes/RSpec/Core/ConfigurationOptions.html#method-i-configure","(config)","<p>Updates the provided {Configuration} instance based on the provided external configuration options.\n<p>@param …\n"],["configure","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-i-configure","(err, out)","<p>@private\n"],["configure_example","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-configure_example","(example, example_hooks)","<p>@private\n<p>Used internally to extend the singleton class of a single example&#39;s example group instance …\n"],["configure_expectation_framework","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-configure_expectation_framework","()","<p>@private\n"],["configure_filter_manager","RSpec::Core::ConfigurationOptions","classes/RSpec/Core/ConfigurationOptions.html#method-i-configure_filter_manager","(filter_manager)","<p>@api private Updates the provided {FilterManager} based on the filter options. @param filter_manager …\n"],["configure_group","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-configure_group","(group)","<p>@private\n<p>Used internally to extend a group with modules using `include`, `prepend` and/or `extend`.\n"],["configure_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-configure_method","()","<p>@private\n"],["configure_mock_framework","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-configure_mock_framework","()","<p>@private\n"],["conj","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-conj","(item)","<p>Polymorphically add a new element to the head of a list. The type of head node will be the same list …\n"],["cons","Rake::LinkedList","classes/Rake/LinkedList.html#method-c-cons","(head, tail)","<p>Cons a new head onto the tail list.\n"],["cons","Rake::LinkedList::EmptyLinkedList","classes/Rake/LinkedList/EmptyLinkedList.html#method-c-cons","(head, tail)",""],["console_code_for","RSpec::Core::Formatters::ConsoleCodes","classes/RSpec/Core/Formatters/ConsoleCodes.html#method-i-console_code_for","(code_or_symbol)","<p>Fetches the correct code for the supplied symbol, or checks that a code is valid. Defaults to white (37). …\n"],["const_defined_on?","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-const_defined_on-3F","(mod, const_name)",""],["const_missing","RSpec","classes/RSpec.html#method-c-const_missing","(name)","<p>@private\n"],["const_to_replace","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-i-const_to_replace","()","<p>Defined for interface parity with the other object reference implementations. Raises an `ArgumentError` …\n"],["const_to_replace","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-i-const_to_replace","()","<p>@return [String] the constant name to replace with a double.\n"],["constant_mutator_for","RSpec::Mocks::NestedSpace","classes/RSpec/Mocks/NestedSpace.html#method-i-constant_mutator_for","(name)",""],["constant_mutator_for","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-constant_mutator_for","(name)",""],["constant_scope_for","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-constant_scope_for","(group)",""],["constants_defined_on","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-constants_defined_on","(mod)",""],["constrained_to_any_of?","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-constrained_to_any_of-3F","(*constraints)","<p>@private\n"],["consume","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-consume","()","<p>@private\n"],["contain_exactly","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-contain_exactly","(*items)","<p>Passes if actual contains all of the expected regardless of order. This works for collections. Pass in …\n"],["content","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-content","(values)","<p>Retrieves the content of <code>values</code> as a single String\n"],["context_diff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-context_diff","(diff)",""],["continue_entry_body","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-continue_entry_body","(entry_body, continuation)","<p>Attaches the <code>continuation</code> of the previous line to the <code>entry_body</code>.\n<p>Continued function listings are joined …\n"],["convert","RDoc::Markup","classes/RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output <code>formatter</code> using a Visitor to render the …\n"],["convert","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-convert","(content)","<p>Marks up <code>content</code>\n"],["convert","RDoc::Markup::ToLabel","classes/RDoc/Markup/ToLabel.html#method-i-convert","(text)","<p>Converts <code>text</code> to an HTML-safe label\n"],["convert","RSpec::Core::Formatters::HtmlSnippetExtractor::CoderayConverter","classes/RSpec/Core/Formatters/HtmlSnippetExtractor/CoderayConverter.html#method-c-convert","(code)",""],["convert","RSpec::Core::Formatters::HtmlSnippetExtractor::NullConverter","classes/RSpec/Core/Formatters/HtmlSnippetExtractor/NullConverter.html#method-c-convert","(code)",""],["convert_attrs","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_attrs","(str, attrs)","<p>Map attributes like <strong>text</strong>to the sequence 001002&lt;char&gt;001003&lt;char&gt;, where &lt;char&gt; is …\n"],["convert_flow","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_flow","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-convert_flow","(flow)","<p>Converts flow items <code>flow</code>\n"],["convert_html","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_html","(str, attrs)","<p>Converts HTML tags to RDoc attributes\n"],["convert_regexp_handling","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_regexp_handling","(target)","<p>Converts added regexp handlings. See RDoc::Markup#add_regexp_handling\n"],["convert_regexp_handling","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-convert_regexp_handling","(target)","<p>Calls convert_string on the result of convert_regexp_handling\n"],["convert_regexp_handlings","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-convert_regexp_handlings","(str, attrs)","<p>Converts regexp handling sequences to RDoc attributes\n"],["convert_string","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-convert_string","(string)","<p>Converts a string to be fancier if desired\n"],["convert_string","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-convert_string","(string)","<p>Adds bold or underline mixed with backspaces\n"],["convert_string","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-convert_string","(text)","<p>CGI-escapes <code>text</code>\n"],["copy_docs","SDoc::Merge","classes/SDoc/Merge.html#method-i-copy_docs","()",""],["copy_files","SDoc::Merge","classes/SDoc/Merge.html#method-i-copy_files","()",""],["copy_resources","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-copy_resources","()","<p>Copy all the resource files to output dir\n"],["copy_static","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-copy_static","()","<p>Copies static files from the static_path into the output directory\n"],["copy_string","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-copy_string","(start_pos, end_pos)","<p>Copies <code>start_pos</code> to <code>end_pos</code> from the current string\n"],["correct_backward_diff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-correct_backward_diff","()",""],["correct_forward_diff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-correct_forward_diff","()",""],["correct_forward_sdiff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-correct_forward_sdiff","()",""],["correct_lcs","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-correct_lcs","()",""],["could_contain_kw_args?","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-could_contain_kw_args-3F","(args)","<p>Without considering what the last arg is, could it contain keyword arguments?\n"],["count","TestRakeCpuCounter::TestClassMethod","classes/TestRakeCpuCounter/TestClassMethod.html#method-i-count","()",""],["cover","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-cover","(*values)","<p>Passes if actual covers expected. This works for Ranges. You can also pass in multiple args and it will …\n"],["coverage_level=","RDoc::Stats","classes/RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cp","TestRakeFileUtils::BadLink","classes/TestRakeFileUtils/BadLink.html#method-i-cp","(*args)",""],["create","RSpec::Core::Metadata::ExampleGroupHash","classes/RSpec/Core/Metadata/ExampleGroupHash.html#method-c-create","(parent_group_metadata, user_metadata, example_group_index, *args, &block)",""],["create","RSpec::Core::Metadata::ExampleHash","classes/RSpec/Core/Metadata/ExampleHash.html#method-c-create","(group_metadata, user_metadata, index_provider, description, block)",""],["create_dir","FileCreation","classes/FileCreation.html#method-i-create_dir","(dirname)",""],["create_document","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-create_document","(groups)","<p>Creates an RDoc::Markup::Document given the <code>groups</code> of ChangeLog entries.\n"],["create_entries","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-create_entries","(entries)","<p>Returns a list of ChangeLog entries an RDoc::Markup nodes for the given <code>entries</code>.\n"],["create_file","FileCreation","classes/FileCreation.html#method-i-create_file","(name, file_time=nil)",""],["create_items","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-create_items","(items)","<p>Returns an RDoc::Markup::List containing the given <code>items</code> in the ChangeLog\n"],["create_rule","Rake::Task","classes/Rake/Task.html#method-c-create_rule","(*args, &block)","<p>Define a rule for synthesizing tasks.\n"],["create_timed_files","FileCreation","classes/FileCreation.html#method-i-create_timed_files","(oldfile, *newfiles)",""],["cross_reference","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-cross_reference","(name, text = nil, code = true)","<p>Creates a link to the reference <code>name</code> if the name exists.  If <code>text</code> is given it is used as the link text, …\n"],["css","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-css","","<p>Allow style blocks\n"],["current","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current=","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_backtrace","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-current_backtrace","()","<p>@private\n"],["current_example","RSpec","classes/RSpec.html#method-c-current_example","()","<p>The example being executed.\n<p>The primary audience for this method is library authors who need access to …\n"],["current_example=","RSpec","classes/RSpec.html#method-c-current_example-3D","(example)","<p>Set the current example being executed. @api private\n"],["current_scope","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-current_scope","()","<p>Return the list of scope names currently active in the task manager.\n"],["current_section","RDoc::Context","classes/RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If temporary_section is available …\n"],["currently_executing_a_context_hook?","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-currently_executing_a_context_hook-3F","()","<p>Returns true if a `before(:context)` or `after(:context)` hook is currently executing.\n"],["currently_needed_ids","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-i-currently_needed_ids","()",""],["cvs_url","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-cvs_url","(url, full_path)","<p>Build a webcvs URL starting for the given <code>url</code> with <code>full_path</code> appended as the destination path.  If <code>url</code> …\n"],["cvs_url","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-cvs_url","()","<p>Returns a URL for this source file on some web repository.  Use the -W command line option to set.\n"],["debug_msg","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["debug_msg","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-debug_msg","(*msg)","<p>Output progress information if debugging is enabled\n"],["debug_msg","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-debug_msg","( *msg )","<p>Output progress information if debugging is enabled\n"],["declaration_locations","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-declaration_locations","()","<p>@private\n"],["declare_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-c-declare_double","(type, *args)","<p>@private\n"],["declare_verifying_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-c-declare_verifying_double","(type, ref, *args)","<p>@private\n"],["dedent","RSpec::Support::FormattingSupport","classes/RSpec/Support/FormattingSupport.html#method-i-dedent","(string)",""],["deduplicate_call_seq","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-deduplicate_call_seq","()","<p>Removes duplicate call-seq entries for methods using the same implementation.\n"],["deep_hash_dup","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-deep_hash_dup","(object)","<p>@private\n"],["default_error_message","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-default_error_message","(expectation, expected_args, actual_args)",""],["default_formatter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-default_formatter","()","<p>The formatter that will be used if no formatter has been set. Defaults to &#39;progress&#39;.\n"],["default_formatter=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-default_formatter-3D","(value)","<p>Sets a fallback formatter to use if none other has been set.\n<p>@example\n\n<pre><code>RSpec.configure do |rspec|\n  rspec.default_formatter ...\n</code></pre>\n"],["default_instance","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-c-default_instance","()","<p>Methods are deferred to a default instance of the class to maintain the interface For example, calling …\n"],["default_options","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-default_options","()","<p>Default options for ri\n"],["default_path=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-default_path-3D","(path)",""],["default_should_host","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-default_should_host","()","<p>@api private Determines where we add `should` and `should_not`.\n"],["default_should_syntax_host","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-default_should_syntax_host","()","<p>@api private Determines where the methods like `should_receive`, and `stub` are added.\n"],["default_title=","RDoc::Options","classes/RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a source file, so that a title …\n"],["defaults","RDoc::RI::Task","classes/RDoc/RI/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults","RDoc::Task","classes/RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults","RDoc::Task","classes/RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["define","RDoc::Task","classes/RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","RDoc::Task","classes/RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#method-i-define","(name, &declarations)","<p>Defines a custom matcher.\n<p>@param name [Symbol] the name for the matcher @yield [Object] block that is …\n"],["define","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-define","()","<p>Create the tasks defined by this task library.\n"],["define","Rake::TestTask","classes/Rake/TestTask.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define_aliases","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-define_aliases","(name, alias_name)","<p>@private\n"],["define_derived_metadata","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-define_derived_metadata","(*filters, &block)","<p>Defines a callback that can assign derived metadata values.\n<p>@param filters [Array&lt;Symbol&gt;, Hash] …\n"],["define_example_group_method","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-define_example_group_method","(name, metadata={})","<p>@private @macro [attach] define_example_group_method\n\n<pre><code>@!scope class\n@overload $1\n@overload $1(&amp;example_group_definition) ...\n</code></pre>\n"],["define_example_method","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-define_example_method","(name, extra_options={})","<p>@private @macro [attach] define_example_method\n\n<pre><code>@!scope class\n@method $1\n@overload $1\n@overload $1(&amp;example_implementation) ...\n</code></pre>\n"],["define_negated_matcher","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#method-i-define_negated_matcher","(negated_name, base_name, &description_override)","<p>Defines a negated matcher. The returned matcher&#39;s `description` and `failure_message` will be overriden …\n"],["define_nested_shared_group_method","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-define_nested_shared_group_method","(new_name, report_label=\"it should behave like\")","<p>@private @macro [attach] define_nested_shared_group_method\n\n<pre><code>@!scope class\n\n@see SharedExampleGroup\n</code></pre>\n"],["define_optimized_require_for_rspec","RSpec::Support","classes/RSpec/Support.html#method-c-define_optimized_require_for_rspec","(lib, &require_relative)","<p>@api private\n<p>Defines a helper method that is optimized to require files from the named lib. The passed …\n"],["define_predicate_for","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-define_predicate_for","(*names)","<p>@private\n"],["define_proxy_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-define_proxy_method","()","<p>@private\n"],["define_reader","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-define_reader","(name)","<p>@private\n"],["define_task","Rake::Task","classes/Rake/Task.html#method-c-define_task","(*args, &block)","<p>Define a task given <code>args</code> and an option block.  If a rule with the given name already exists, the prerequisites …\n"],["defined?","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-i-defined-3F","()","<p>Always returns true for an object as the class is defined.\n<p>@return [true]\n"],["defined?","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-i-defined-3F","()","<p>A method is defined if we are able to get a `Method` object for it. In that case, we can assert against …\n"],["defined?","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-i-defined-3F","()","<p>@return [Boolean] true if the named constant is defined, false otherwise.\n"],["defined_in?","RDoc::Context","classes/RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","RDoc::Attr","classes/RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt; MyClassName</code>\n"],["definition_lists","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-definition_lists","","<p>Allow PHP Markdown Extras style definition lists\n"],["definition_target","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-definition_target","()",""],["definitions","RSpec::Core::SharedExampleGroup::TopLevelDSL","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-definitions","()","<p>@private\n"],["delegate_not_to","RSpec::Mocks::TargetDelegationClassMethods","classes/RSpec/Mocks/TargetDelegationClassMethods.html#method-i-delegate_not_to","(matcher_method, options={})",""],["delegate_to","RSpec::Mocks::TargetDelegationClassMethods","classes/RSpec/Mocks/TargetDelegationClassMethods.html#method-i-delegate_to","(matcher_method)",""],["delegate_to_metadata","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-c-delegate_to_metadata","(key)","<p>@private\n<p>Used to define methods that delegate to this example&#39;s metadata.\n"],["delegate_to_metadata","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-delegate_to_metadata","(*names)","<p>@private\n"],["delegate_to_ordering_manager","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-delegate_to_ordering_manager","(*methods)","<p>@private\n"],["delete","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-delete","(key)",""],["delete","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-delete","(key)",""],["delete","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-delete","(item, metadata)",""],["delete","RSpec::Core::FilterableItemRepository::UpdateOptimized","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-delete","(item, metadata)",""],["delete","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-delete","(key)",""],["delete_file","FileCreation","classes/FileCreation.html#method-i-delete_file","(name)",""],["delete_legacy_args","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["deleting?","LCS::Change","classes/LCS/Change.html#method-i-deleting-3F","()",""],["deprecate","RSpec::Core::Warnings","classes/RSpec/Core/Warnings.html#method-i-deprecate","(deprecated, data={})","<p>@private\n<p>Used internally to print deprecation warnings.\n"],["deprecate","RSpec::Support::Warnings","classes/RSpec/Support/Warnings.html#method-i-deprecate","(deprecated, options={})",""],["deprecation","RSpec::Core::Configuration::DeprecationReporterBuffer","classes/RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-i-deprecation","(*args)",""],["deprecation","RSpec::Core::Formatters::DeprecationFormatter","classes/RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation","(notification)",""],["deprecation","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-deprecation","(hash)","<p>@private\n"],["deprecation_message_for","RSpec::Core::Formatters::DeprecationFormatter","classes/RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation_message_for","(data)",""],["deprecation_stream=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-deprecation_stream-3D","(value)","<p>Determines where deprecation warnings are printed. @param value [IO, String] IO to write to or filename …\n"],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter","classes/RSpec/Core/Formatters/DeprecationFormatter.html#method-i-deprecation_summary","(_notification)",""],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-deprecation_summary","()",""],["deprecation_summary","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-i-deprecation_summary","()",""],["deregister_matcher_definition","RSpec::Support","classes/RSpec/Support.html#method-c-deregister_matcher_definition","(&block)","<p>Remove a previously registered matcher. Useful for cleaning up after yourself in specs.\n<p>@private\n"],["desc","Rake::DSL","classes/Rake/DSL.html#method-i-desc","(description)","<p>Describes the next rake task.  Duplicate descriptions are discarded. Descriptions are shown with <code>rake</code> …\n"],["descendant_filtered_examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-descendant_filtered_examples","()","<p>@private\n"],["descendants","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-descendants","()","<p>@private\n"],["describe_expectation","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-describe_expectation","(verb, message, expected_received_count, _actual_received_count, args)","<p>@private\n"],["described_class","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-i-described_class","()","<p>Returns the class or module passed to the `describe` method (or alias). Returns nil if the subject is …\n"],["description","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-description","()","<p>Handy wrapper for marking up this class or module&#39;s comment\n"],["description","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-description","()","<p>Handy wrapper for marking up this object&#39;s comment\n"],["description","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-description","()","<p>Returns the string submitted to `example` or its aliases (e.g. `specify`, `it`, etc). If no string is …\n"],["description","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-description","()","<p>@return [String] the current example group description\n"],["description","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-description","()",""],["description","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-description","()",""],["description","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-description","()","<p>@return [String] The example description\n"],["description","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-i-description","()","<p>@return [String] Description of this stack frame, in the form used by\n\n<pre><code>RSpec&#39;s built-in formatters.\n</code></pre>\n"],["description","RSpec::Matchers::AliasedMatcher","classes/RSpec/Matchers/AliasedMatcher.html#method-i-description","()","<p>Provides the description of the aliased matcher. Aliased matchers are designed to behave identically …\n"],["description","RSpec::Matchers::BuiltIn::All","classes/RSpec/Matchers/BuiltIn/All.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-description","()","<p>@api private Generates a description using {EnglishPhrasing}. @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeAnInstanceOf","classes/RSpec/Matchers/BuiltIn/BeAnInstanceOf.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeComparedTo","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ContainExactly","classes/RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Eq","classes/RSpec/Matchers/BuiltIn/Eq.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Match","classes/RSpec/Matchers/BuiltIn/Match.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Satisfy","classes/RSpec/Matchers/BuiltIn/Satisfy.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::SpecificValuesChange","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::DSL::DefaultImplementations","classes/RSpec/Matchers/DSL/DefaultImplementations.html#method-i-description","()","<p>The default description.\n"],["description","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-description","(&definition)","<p>Customize the description to use for one-liners.  Only use this when the description generated by default …\n"],["description","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","classes/RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","classes/RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-i-description","(name)",""],["description","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","classes/RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::InstanceOf","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::KindOf","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","classes/RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-i-description","()","<p>@return [String] the object&#39;s description (via `#inspect`).\n"],["description","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-description","()",""],["description","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-description","()",""],["description","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-description","()",""],["description","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-description","()",""],["description","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-i-description","()",""],["description","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-description","()",""],["description_for","RSpec::Mocks::Matchers::Receive::DefaultDescribable","classes/RSpec/Mocks/Matchers/Receive/DefaultDescribable.html#method-i-description_for","(verb)","<p>This is much simpler for the `any_instance` case than what the user may want, but I&#39;m not up for …\n"],["description_for","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-description_for","(verb)",""],["detect_encoding","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-detect_encoding","(string)","<p>Detects the encoding of <code>string</code> based on the magic comment\n"],["detect_source_encoding","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-detect_source_encoding","(string)",""],["determine_root","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-determine_root","()",""],["diff","LCS","classes/LCS.html#method-i-diff","(other, callbacks = nil, &block)","<p>Returns the difference set between <code>self</code> and <code>other</code>. See Diff::LCS#diff.\n"],["diff","LCS","classes/LCS.html#method-c-diff","(seq1, seq2, callbacks = nil, &block)","<p>#diff computes the smallest set of additions and deletions necessary to turn the first sequence into …\n"],["diff","LCS::Hunk","classes/LCS/Hunk.html#method-i-diff","(format)","<p>Returns a diff string based on a format.\n"],["diff","RSpec::Support::Differ","classes/RSpec/Support/Differ.html#method-i-diff","(actual, expected)",""],["diff_as_object","RSpec::Support::Differ","classes/RSpec/Support/Differ.html#method-i-diff_as_object","(actual, expected)","<p>rubocop:enable MethodLength\n"],["diff_as_string","RSpec::Support::Differ","classes/RSpec/Support/Differ.html#method-i-diff_as_string","(actual, expected)","<p>rubocop:disable MethodLength\n"],["diff_size","LCS::Block","classes/LCS/Block.html#method-i-diff_size","()",""],["diffable","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-diffable","()","<p>Tells the matcher to diff the actual and expected values in the failure message.\n"],["diffable?","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-diffable-3F","()","<p>@api private Matchers are not diffable by default. Override this to make your subclass diffable.\n"],["diffable?","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Eq","classes/RSpec/Matchers/BuiltIn/Eq.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Eql","classes/RSpec/Matchers/BuiltIn/Eql.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Equal","classes/RSpec/Matchers/BuiltIn/Equal.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Match","classes/RSpec/Matchers/BuiltIn/Match.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::DSL::DefaultImplementations","classes/RSpec/Matchers/DSL/DefaultImplementations.html#method-i-diffable-3F","()","<p>@api private Used internally by objects returns by `should` and `should_not`.\n"],["diffable_matcher_list","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-diffable_matcher_list","()",""],["differ","RSpec::Expectations","classes/RSpec/Expectations.html#method-c-differ","()","<p>@private\n"],["direct_ancestors","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-direct_ancestors","()","<p>Ancestors of this class or module only\n"],["direct_ancestors","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-direct_ancestors","()",""],["directory","Rake::DSL","classes/Rake/DSL.html#method-i-directory","(*args, &block)","<p>Declare a set of files tasks to create the given directories on demand.\n<p>Example:\n\n<pre><code>directory &quot;testdata/doc&quot;\n</code></pre>\n"],["disable_autorun!","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-disable_autorun-21","()","<p>@private\n"],["disable_expect","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-disable_expect","(syntax_host=::RSpec::Matchers)","<p>@api private Disables the `expect` syntax.\n"],["disable_expect","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-disable_expect","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Disables the expect syntax (`expect(dbl).to receive`, `allow(dbl).to receive`, etc).\n"],["disable_monkey_patching!","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-disable_monkey_patching-21","()","<p>Enables zero monkey patching mode for RSpec. It removes monkey patching of the top-level DSL methods …\n"],["disable_should","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-disable_should","(syntax_host=default_should_host)","<p>@api private Disables the `should` syntax.\n"],["disable_should","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-disable_should","(syntax_host=default_should_syntax_host)","<p>@api private Disables the should syntax (`dbl.stub`, `dbl.should_receive`, etc).\n"],["disallow_negation","RSpec::Mocks::TargetDelegationClassMethods","classes/RSpec/Mocks/TargetDelegationClassMethods.html#method-i-disallow_negation","(method_name)",""],["disambiguate","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-disambiguate","(name, const_scope)",""],["discard_a","LCS::ContextDiffCallbacks","classes/LCS/ContextDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_a","(event)","<p>Called when the old value is discarded in favour of the new value.\n"],["discard_a","LCS::DiffCallbacks","classes/LCS/DiffCallbacks.html#method-i-discard_a","(event)",""],["discard_a","LCS::HTMLDiff::Callbacks","classes/LCS/HTMLDiff/Callbacks.html#method-i-discard_a","(event)","<p>This will be called when there is a line in A that isn&#39;t in B\n"],["discard_a","LCS::SDiffCallbacks","classes/LCS/SDiffCallbacks.html#method-i-discard_a","(event)",""],["discard_b","LCS::ContextDiffCallbacks","classes/LCS/ContextDiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-discard_b","(event)","<p>Called when the new value is discarded in favour of the old value.\n"],["discard_b","LCS::DiffCallbacks","classes/LCS/DiffCallbacks.html#method-i-discard_b","(event)",""],["discard_b","LCS::HTMLDiff::Callbacks","classes/LCS/HTMLDiff/Callbacks.html#method-i-discard_b","(event)","<p>This will be called when there is a line in B that isn&#39;t in A\n"],["discard_b","LCS::SDiffCallbacks","classes/LCS/SDiffCallbacks.html#method-i-discard_b","(event)",""],["dispatch_specs","RSpec::Core::Bisect::ForkRunner::RunDispatcher","classes/RSpec/Core/Bisect/ForkRunner/RunDispatcher.html#method-i-dispatch_specs","(run_descriptor)",""],["display","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display","(document)","<p>Converts <code>document</code> to text and writes it to the pager\n"],["display?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be displayed in output?\n<p>A code object should be displayed if:\n<p>The item didn&#39;t …\n"],["display?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also RDoc::CodeObject#display?\n"],["display_attributes","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-display_attributes","()","<p>Debug method that prints a string along with its attributes\n"],["display_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_class","(name)","<p>Outputs formatted RI data for class <code>name</code>.  Groups undocumented classes\n"],["display_exception","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-display_exception","()","<p>@private\n<p>The exception that will be displayed to the user – either the failure of the example or the …\n"],["display_exception=","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-display_exception-3D","(ex)","<p>@private\n<p>Assigns the exception that will be displayed to the user – either the failure of the example …\n"],["display_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_method","(name)","<p>Outputs formatted RI data for method <code>name</code>\n"],["display_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_name","(name)","<p>Outputs formatted RI data for the class or method <code>name</code>.\n<p>Returns true if <code>name</code> was found, false if it was …\n"],["display_names","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_names","(names)","<p>Displays each name in <code>name</code>\n"],["display_page","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_page","(name)","<p>Outputs formatted RI data for page <code>name</code>.\n"],["display_page_list","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-display_page_list","(store, pages = store.cache[:pages], search = nil)","<p>Outputs a formatted RI page list for the pages in <code>store</code>.\n"],["do_GET","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-do_GET","(req, res)","<p>GET request entry point.  Fills in <code>res</code> for the path, etc. in <code>req</code>.\n"],["do_aliases","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_aliases","()","<p>Scans #content for rb_define_alias\n"],["do_attrs","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_attrs","()","<p>Scans #content for rb_attr and rb_define_attr\n"],["do_boot_defclass","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_boot_defclass","()","<p>Scans #content for boot_defclass\n"],["do_classes","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_classes","()","<p>Scans #content for rb_define_class, boot_defclass, rb_define_class_under and rb_singleton_class\n"],["do_constants","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_constants","()","<p>Scans #content for rb_define_variable, rb_define_readonly_variable, rb_define_const and rb_define_global_const …\n"],["do_define_class","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_define_class","()","<p>Scans #content for rb_define_class\n"],["do_define_class_under","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_define_class_under","()","<p>Scans #content for rb_define_class_under\n"],["do_define_module","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_define_module","()","<p>Scans #content for rb_define_module\n"],["do_define_module_under","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_define_module_under","()","<p>Scans #content for rb_define_module_under\n"],["do_includes","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_includes","()","<p>Scans #content for rb_include_module\n"],["do_methods","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_methods","()","<p>Scans #content for rb_define_method, rb_define_singleton_method, rb_define_module_function, rb_define_private_method …\n"],["do_missing","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_missing","()","<p>Creates classes and module that were missing were defined due to the file order being different than …\n"],["do_modules","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_modules","()","<p>Scans #content for rb_define_module and rb_define_module_under\n"],["do_nothing","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-do_nothing","(markup_item)","<p>Does nothing to <code>markup_item</code> because it doesn&#39;t have any user-built content\n"],["do_singleton_class","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_singleton_class","()","<p>Scans #content for rb_singleton_class\n"],["do_struct_define_without_accessor","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-do_struct_define_without_accessor","()","<p>Scans #content for struct_define_without_accessor\n"],["doc_stats","RDoc::Stats","classes/RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in <code>collection</code>.\n"],["document","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in <code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish” or “ri”) and following …\n"],["document_children=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject&#39;s children unless it has been turned off by …\n"],["document_self=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been turned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documentation_page","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_page","(store, generator, path, req, res)","<p>Fills in <code>res</code> with the class, module or page for <code>req</code> from <code>store</code>.\n<p><code>path</code> is relative to the mount_path and …\n"],["documentation_search","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_search","(store, generator, req, res)","<p>Creates the JSON search index on <code>res</code> for the given <code>store</code>.  <code>generator</code> must respond to #json_index to build. …\n"],["documentation_source","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_source","(path)","<p>Returns the RDoc::Store and path relative to <code>mount_path</code> for documentation at <code>path</code>.\n"],["documented?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-documented-3F","()","<p>Does this class or module have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","classes/RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a documented class or module.\n"],["documented?","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["does_not_match?","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#method-c-does_not_match-3F","(matcher, actual, &block)",""],["does_not_match?","RSpec::Matchers::AliasedNegatedMatcher","classes/RSpec/Matchers/AliasedNegatedMatcher.html#method-i-does_not_match-3F","(*args, &block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::All","classes/RSpec/Matchers/BuiltIn/All.html#method-i-does_not_match-3F","(_actual)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-i-does_not_match-3F","(actual, &block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-does_not_match-3F","(event_proc)",""],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeFromValue","classes/RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-does_not_match-3F","(event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-does_not_match-3F","(_event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeToValue","classes/RSpec/Matchers/BuiltIn/ChangeToValue.html#method-i-does_not_match-3F","(_event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-does_not_match-3F","(_actual)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Cover","classes/RSpec/Matchers/BuiltIn/Cover.html#method-i-does_not_match-3F","(range)",""],["does_not_match?","RSpec::Matchers::BuiltIn::Exist","classes/RSpec/Matchers/BuiltIn/Exist.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-i-does_not_match-3F","(actual, &block)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-does_not_match-3F","(block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-does_not_match-3F","(given_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-does_not_match-3F","(actual)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-does_not_match-3F","(given_proc)","<p>rubocop:enable MethodLength\n"],["does_not_match?","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-does_not_match-3F","(block)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-does_not_match-3F","(block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-does_not_match-3F","(block)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::YieldWithNoArgs","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-does_not_match-3F","(block)","<p>@private\n"],["does_not_match?","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-does_not_match-3F","(subject)",""],["does_not_match?","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-does_not_match-3F","(subject, &block)",""],["does_not_match?","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-does_not_match-3F","(*_args)",""],["does_not_match?","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-does_not_match-3F","(_subject)",""],["done_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_adding","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-done_adding","(*)","<p>Prints when RDoc is done\n"],["done_documenting=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and #document_children.\n<p>Once documentation …\n"],["double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-double","(*args)","<p>@overload double() @overload double(name)\n\n<pre><code>@param name [String/Symbol] name or description to be used in ...\n</code></pre>\n"],["drb_argv","RSpec::Core::DRbRunner","classes/RSpec/Core/DRbRunner.html#method-i-drb_argv","()",""],["drb_port","RSpec::Core::Bisect::Server","classes/RSpec/Core/Bisect/Server.html#method-i-drb_port","()",""],["drb_port","RSpec::Core::DRbRunner","classes/RSpec/Core/DRbRunner.html#method-i-drb_port","()",""],["duck_type","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-duck_type","(*args)","<p>Matches if the actual argument responds to the specified messages.\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(duck_type(:hello)) ...\n</code></pre>\n"],["dump","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-dump","(data_path)","<p>Dump <code>data_path</code> using pp\n"],["dump","RSpec::Core::ExampleStatusDumper","classes/RSpec/Core/ExampleStatusDumper.html#method-c-dump","(examples)",""],["dump","RSpec::Core::ExampleStatusDumper","classes/RSpec/Core/ExampleStatusDumper.html#method-i-dump","()",""],["dump","RSpec::Mocks::MarshalExtension","classes/RSpec/Mocks/MarshalExtension.html#method-c-dump","(object, *rest)",""],["dump_failures","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_failures","(notification)","<p>@api public\n<p>Dumps detailed information about each example failure.\n<p>@param notification [NullNotification] …\n"],["dump_pending","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_pending","(notification)","<p>@private\n"],["dump_profile","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile","(profile)",""],["dump_profile","RSpec::Core::Formatters::ProfileFormatter","classes/RSpec/Core/Formatters/ProfileFormatter.html#method-i-dump_profile","(profile)","<p>@api public\n<p>This method is invoked after the dumping the summary if profiling is enabled.\n<p>@param profile …\n"],["dump_profile_slowest_example_groups","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile_slowest_example_groups","(profile)","<p>@api private\n"],["dump_profile_slowest_examples","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_profile_slowest_examples","(profile)","<p>@api private\n"],["dump_summary","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-dump_summary","(summary)","<p>@api public\n<p>This method is invoked after the dumping of examples and failures. Each parameter is assigned …\n"],["dump_summary","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-dump_summary","(summary)",""],["dump_summary","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-dump_summary","(summary)",""],["dump_with_rspec_mocks","RSpec::Mocks::MarshalExtension","classes/RSpec/Mocks/MarshalExtension.html#method-c-dump_with_rspec_mocks","(object, *rest)",""],["dump_without_rspec_mocks","RSpec::Mocks::MarshalExtension","classes/RSpec/Mocks/MarshalExtension.html#method-c-dump_without_rspec_mocks","(object, *rest)",""],["duplicate_method","TestRakeExtension::Sample","classes/TestRakeExtension/Sample.html#method-i-duplicate_method","()",""],["duplicate_with","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-duplicate_with","(metadata_overrides={})","<p>Duplicates the example and overrides metadata with the provided hash.\n<p>@param metadata_overrides [Hash] …\n"],["each","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-each","(&block)","<p>Enumerator for the parts of this document\n"],["each","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-each","(system = true, site = true, home = true, gems = :latest, *extra_dirs)","<p>Iterates over each selected path yielding the directory and type.\n<p>Yielded types:\n<p>:system &mdash; Where Ruby&#39;s …\n"],["each","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-each","(&block)",""],["each","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-each","()","<p>We use a loop here (instead of recursion) to prevent SystemStackError\n"],["each","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-each","()","<p>For each item in the list.\n"],["each","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-each","(&block)","<p>Enumerates the arguments and their values\n"],["each_ancestor","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an RDoc::ClassModule exists.\n"],["each_ancestor","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-each_ancestor","()",""],["each_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_classmodule","RDoc::Context","classes/RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_constant","RDoc::Context","classes/RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_extend","RDoc::Context","classes/RDoc/Context.html#method-i-each_extend","()","<p>Iterator for extension modules\n"],["each_include","RDoc::Context","classes/RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_instance_variable_for_example","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-each_instance_variable_for_example","(group)","<p>@private\n"],["each_letter_group","SDoc::Helpers","classes/SDoc/Helpers.html#method-i-each_letter_group","(methods, &block)",""],["each_method","RDoc::Context","classes/RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name_of","RDoc::Markup::Attributes","classes/RDoc/Markup/Attributes.html#method-i-each_name_of","(bitmap)","<p>yields each attribute name in <code>bitmap</code>\n"],["each_pair","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-each_pair","(&block)",""],["each_pair","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-each_pair","(&block)",""],["each_parent","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also RDoc::ClassModule#each_ancestor\n"],["each_section","RDoc::Context","classes/RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section&#39;s contents sorted by title.  The <code>section</code>, the section&#39;s <code>constants</code> and …\n"],["each_unfulfilled_expectation_matching","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-each_unfulfilled_expectation_matching","(method_name, *args)","<p>@private\n"],["egrep","Rake::FileList","classes/Rake/FileList.html#method-i-egrep","(pattern, *options)","<p>Grep each of the files in the filelist using the given pattern. If a block is given, call the block on …\n"],["egrep","Rake::FileList","classes/Rake/FileList.html#method-i-egrep","(pattern, *options)","<p>Grep each of the files in the filelist using the given pattern. If a block is given, call the block on …\n"],["emphasis","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-emphasis","(text)","<p>Wraps <code>text</code> in emphasis for rdoc inline formatting\n"],["empty","Rake::LinkedList","classes/Rake/LinkedList.html#method-c-empty","()","<p>The standard empty list class for the given LinkedList class.\n"],["empty?","RDoc::Comment","classes/RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-empty-3F","()","<p>Does this document have no parts?\n"],["empty?","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-empty-3F","()","<p>Is the ListItem empty?\n"],["empty?","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-empty-3F","()",""],["empty?","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-empty-3F","()",""],["empty?","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-empty-3F","()",""],["empty?","RSpec::Support::MethodSignatureExpectation","classes/RSpec/Support/MethodSignatureExpectation.html#method-i-empty-3F","()",""],["empty?","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-empty-3F","()","<p>Is the list empty?\n"],["empty?","Rake::LinkedList::EmptyLinkedList","classes/Rake/LinkedList/EmptyLinkedList.html#method-i-empty-3F","()",""],["enable_expect","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-enable_expect","(syntax_host=::RSpec::Matchers)","<p>@api private Enables the `expect` syntax.\n"],["enable_expect","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-enable_expect","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Enables the expect syntax (`expect(dbl).to receive`, `allow(dbl).to receive`, etc).\n"],["enable_should","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-enable_should","(syntax_host=default_should_host)","<p>@api private Enables the `should` syntax.\n"],["enable_should","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-enable_should","(syntax_host=default_should_syntax_host)","<p>@api private Enables the should syntax (`dbl.stub`, `dbl.should_receive`, etc).\n"],["encode!","RDoc::Comment","classes/RDoc/Comment.html#method-i-encode-21","(encoding)","<p>HACK dubious\n"],["encode_fallback","RDoc::Text","classes/RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a <code>fallback</code> character.\n"],["end?","RDoc::Parser::RipperStateLex","classes/RDoc/Parser/RipperStateLex.html#method-c-end-3F","(token)",""],["end_accepting","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-end_accepting","()","<p>Returns the generated output\n"],["end_accepting","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-i-end_accepting","()","<p>Returns the table of contents\n"],["end_accepting","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-end_accepting","()","<p>Returns an Array of items that were wrapped in plus, tt or code.\n"],["end_with","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-end_with","(*expected)","<p>Matches if the actual value ends with the expected value(s). In the case of a string, matches against …\n"],["enhance","Rake::Task","classes/Rake/Task.html#method-i-enhance","(deps=nil, &block)","<p>Enhance a task with prerequisites or actions.  Returns self.\n"],["enhance_with_matching_rule","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-enhance_with_matching_rule","(task_name, level=0)","<p>If a rule can be found that matches the task name, enhance the task with the prerequisites and actions …\n"],["ensure_example_groups_are_configured","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-ensure_example_groups_are_configured","()","<p>@private\n"],["ensure_expected_ordering_received!","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-ensure_expected_ordering_received-21","()",""],["ensure_implemented","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-ensure_implemented","(*_args)","<p>@private\n"],["ensure_implemented","RSpec::Mocks::VerifyingPartialDoubleProxy","classes/RSpec/Mocks/VerifyingPartialDoubleProxy.html#method-i-ensure_implemented","(_method_name)",""],["ensure_implemented","RSpec::Mocks::VerifyingProxyMethods","classes/RSpec/Mocks/VerifyingProxyMethods.html#method-i-ensure_implemented","(method_name)",""],["ensure_publicly_implemented","RSpec::Mocks::VerifyingProxyMethods","classes/RSpec/Mocks/VerifyingProxyMethods.html#method-i-ensure_publicly_implemented","(method_name, _object)",""],["ensure_registered","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-ensure_registered","(object)",""],["ensure_timing_set","RSpec::Core::Example::ExecutionResult","classes/RSpec/Core/Example/ExecutionResult.html#method-i-ensure_timing_set","(clock)","<p>@api private Populates finished_at and run_time if it has not yet been set\n"],["env_var","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-env_var","()",""],["eq","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-eq","(expected)","<p>Passes if <code>actual == expected</code>.\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 for more information …\n"],["eql","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-eql","(expected)","<p>Passes if `actual.eql?(expected)`\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 for more information …\n"],["eql?","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-eql-3F","(other)",""],["eql?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["eql?","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-eql-3F","(other)",""],["equal","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-equal","(expected)","<p>Passes if <code>actual.equal?(expected)</code> (object identity).\n<p>See www.ruby-doc.org/core/classes/Object.html#M001057 …\n"],["error","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-error","(msg)","<p>Aborts with <code>msg</code>\n"],["error","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-error","(exception, req, res)","<p>Generates an error page for the <code>exception</code> while handling <code>req</code> on <code>res</code>.\n"],["error","SDoc::Merge","classes/SDoc/Merge.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error_generator","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-error_generator","()","<p>@private\n"],["error_generator","RSpec::Mocks::AnyInstance","classes/RSpec/Mocks/AnyInstance.html#method-c-error_generator","()",""],["error_message","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-error_message","()",""],["error_message","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-error_message","()",""],["error_redirect","TestRakeExtension::Redirect","classes/TestRakeExtension/Redirect.html#method-i-error_redirect","()",""],["escape","RSpec::Core::ShellEscape","classes/RSpec/Core/ShellEscape.html#method-i-escape","(argument)","<p>:nocov:\n"],["eval_template","SDoc::Templatable","classes/SDoc/Templatable.html#method-i-eval_template","(templatefile, context)","<p>Load and render the erb template in the given <code>templatefile</code> within the specified <code>context</code> (a Binding object) …\n"],["everything_filtered_message","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-everything_filtered_message","()","<p>@private\n"],["exactly","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-exactly","(number)","<p>@api public Specifies that the method is expected to yield the given number of times.\n"],["exactly","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-exactly","(n, &block)","<p>Constrain a message expectation to be received a specific number of times.\n<p>@return [MessageExpectation] …\n"],["example_count","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-example_count","()","<p>@api @return [Fixnum] the number of examples run\n"],["example_count","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-example_count","(groups=example_groups)","<p>@api private\n<p>Get count of examples to be run.\n"],["example_failed","RSpec::Core::Formatters::BaseBisectFormatter","classes/RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-example_failed","(notification)",""],["example_failed","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_failed","(failure)",""],["example_failed","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_failed","(failure)",""],["example_failed","RSpec::Core::Formatters::ProgressFormatter","classes/RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_failed","(_notification)",""],["example_failed","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_failed","(example)","<p>@private\n"],["example_finished","RSpec::Core::Formatters::BaseBisectFormatter","classes/RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-example_finished","(notification)",""],["example_finished","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_finished","(example)","<p>@private\n"],["example_group","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-example_group","()","<p>Returns the example group class that provides the context for running this example.\n"],["example_group_aliases","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-example_group_aliases","()","<p>@private\n"],["example_group_finished","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_group_finished","(_notification)",""],["example_group_finished","RSpec::Core::Profiler","classes/RSpec/Core/Profiler.html#method-i-example_group_finished","(notification)",""],["example_group_finished","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_group_finished","(group)","<p>@private\n"],["example_group_started","RSpec::Core::Formatters::BaseFormatter","classes/RSpec/Core/Formatters/BaseFormatter.html#method-i-example_group_started","(notification)","<p>@api public\n<p>@param notification [GroupNotification] containing example_group\n\n<pre><code>subclass of `RSpec::Core::ExampleGroup`\n</code></pre>\n"],["example_group_started","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Profiler","classes/RSpec/Core/Profiler.html#method-i-example_group_started","(notification)",""],["example_group_started","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_group_started","(group)","<p>@private\n"],["example_groups","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-example_groups","()","<p>:nocov:\n"],["example_passed","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_passed","(passed)",""],["example_passed","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_passed","(passed)",""],["example_passed","RSpec::Core::Formatters::ProgressFormatter","classes/RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_passed","(_notification)",""],["example_passed","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_passed","(example)","<p>@private\n"],["example_pending","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-i-example_pending","(pending)",""],["example_pending","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_pending","(pending)",""],["example_pending","RSpec::Core::Formatters::ProgressFormatter","classes/RSpec/Core/Formatters/ProgressFormatter.html#method-i-example_pending","(_notification)",""],["example_pending","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_pending","(example)","<p>@private\n"],["example_skipped?","RSpec::Core::Example::ExecutionResult","classes/RSpec/Core/Example/ExecutionResult.html#method-i-example_skipped-3F","()","<p>@return [Boolean] Indicates if the example was completely skipped\n\n<pre><code>(typically done via `:skip` metadata ...\n</code></pre>\n"],["example_started","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-example_started","(_notification)",""],["example_started","RSpec::Core::Profiler","classes/RSpec/Core/Profiler.html#method-i-example_started","(notification)",""],["example_started","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-example_started","(example)","<p>@private\n"],["example_status_persistence_file_path=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-example_status_persistence_file_path-3D","(value)","<p>Sets the file path to use for persisting example statuses. Necessary for the `–only-failures` and `–next-failure` …\n"],["examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-examples","()","<p>@private\n"],["examples","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of examples\n"],["exception","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-exception","()","<p>@return [Exception] The example failure\n"],["exception_count_description","RSpec::Core::MultipleExceptionError","classes/RSpec/Core/MultipleExceptionError.html#method-i-exception_count_description","()","<p>return [String] A description of the failure/error counts.\n"],["exception_count_description","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-exception_count_description","()","<p>return [String] A description of the failure/error counts.\n"],["exclude","RDoc::Options","classes/RDoc/Options.html#method-i-exclude","()","<p>Create a regexp for #exclude\n"],["exclude","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-exclude","(*args)",""],["exclude","Rake::FileList","classes/Rake/FileList.html#method-i-exclude","(*patterns, &block)","<p>Register a list of file name patterns that should be excluded from the list.  Patterns may be regular …\n"],["exclude","Rake::FileList","classes/Rake/FileList.html#method-i-exclude","(*patterns, &block)","<p>Register a list of file name patterns that should be excluded from the list.  Patterns may be regular …\n"],["exclude?","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-i-exclude-3F","(line)",""],["exclude_only","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-exclude_only","(*args)",""],["exclude_pattern=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-exclude_pattern-3D","(value)","<p>Set pattern to match files to exclude. @attr value [String] the filename pattern to exclude spec files …\n"],["exclude_with_low_priority","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-exclude_with_low_priority","(*args)",""],["excluded_from_list?","Rake::FileList","classes/Rake/FileList.html#method-i-excluded_from_list-3F","(fn)","<p>Should the given file name be excluded from the list?\n<p>NOTE: This method was formerly named “exclude?”, …\n"],["excluded_from_list?","Rake::FileList","classes/Rake/FileList.html#method-i-excluded_from_list-3F","(fn)","<p>Should the given file name be excluded from the list?\n<p>NOTE: This method was formerly named “exclude?”, …\n"],["exclusion_filter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-exclusion_filter","()","<p>Returns the `exclusion_filter`. If none has been set, returns an empty hash.\n"],["exclusion_filter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-exclusion_filter","()","<p>@private\n"],["exclusion_filter=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-exclusion_filter-3D","(filter)","<p>Clears and reassigns the `exclusion_filter`. Set to `nil` if you don&#39;t want any exclusion filter …\n"],["exclusive","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-i-exclusive","()","<p>@api public Makes the between comparison exclusive.\n<p>@example\n\n<pre><code>expect(3).to be_between(2, 4).exclusive\n</code></pre>\n"],["execute","Rake::Task","classes/Rake/Task.html#method-i-execute","(args=nil)","<p>Execute the actions associated with this task.\n"],["execute_with","RSpec::Core::Hooks::AroundHook","classes/RSpec/Core/Hooks/AroundHook.html#method-i-execute_with","(example, procsy)",""],["executed?","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-executed-3F","()","<p>Indicates whether or not the around hook has executed the example.\n"],["exist","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-exist","(*args)","<p>Passes if `actual.exist?` or `actual.exists?`\n<p>@example\n\n<pre><code>expect(File).to exist(&quot;path/to/file&quot;)\n</code></pre>\n"],["existing","Rake::FileList","classes/Rake/FileList.html#method-i-existing","()","<p>Return a new file list that only contains file names from the current file list that exist on the file …\n"],["existing","Rake::FileList","classes/Rake/FileList.html#method-i-existing","()","<p>Return a new file list that only contains file names from the current file list that exist on the file …\n"],["existing!","Rake::FileList","classes/Rake/FileList.html#method-i-existing-21","()","<p>Modify the current file list so that it contains only file name that exist on the file system.\n"],["existing!","Rake::FileList","classes/Rake/FileList.html#method-i-existing-21","()","<p>Modify the current file list so that it contains only file name that exist on the file system.\n"],["expand_class","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-expand_class","(klass)","<p>Expands abbreviated klass <code>klass</code> into a fully-qualified class.  “Zl::Da” will be expanded to …\n"],["expand_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-expand_name","(name)","<p>Expands the class portion of <code>name</code> into a fully-qualified class.  See #expand_class.\n"],["expand_tabs","RDoc::Text","classes/RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["expect","Object","classes/Object.html#method-i-expect","(*a, &b)","<p>This `expect` will only be called if the user is using Minitest &lt; 5.6 or if they are <em>not</em> using Minitest::Spec …\n"],["expect","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-expect","(value=::RSpec::Expectations::ExpectationTarget::UndefinedValue, &block)",""],["expect","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-expect","(target)",""],["expect_any_instance_of","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-expect_any_instance_of","(klass)",""],["expect_chain","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-expect_chain","(*chain, &block)",""],["expect_chain","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-expect_chain","(*method_names_and_optional_return_values, &block)","<p>@private\n"],["expect_chain_on","RSpec::Mocks::ExpectChain","classes/RSpec/Mocks/ExpectChain.html#method-c-expect_chain_on","(object, *chain, &blk)","<p>@api private\n"],["expect_deprecation_with_call_site","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_deprecation_with_call_site","(file, line, snippet=//)",""],["expect_deprecation_without_call_site","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_deprecation_without_call_site","(snippet=//)",""],["expect_enabled?","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-expect_enabled-3F","(syntax_host=::RSpec::Matchers)","<p>@api private Indicates whether or not the `expect` syntax is enabled.\n"],["expect_enabled?","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-expect_enabled-3F","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Indicates whether or not the expect syntax is enabled.\n"],["expect_message","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-expect_message","(subject, message, opts={}, &block)","<p>Sets a message expectation on `subject`. @param subject the subject on which the message will be expected …\n"],["expect_no_deprecation","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_no_deprecation","()",""],["expect_no_deprecations","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_no_deprecations","()",""],["expect_no_warnings","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_no_warnings","()",""],["expect_warn_deprecation","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_warn_deprecation","(snippet=//)",""],["expect_warn_deprecation_with_call_site","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_warn_deprecation_with_call_site","(file, line, snippet=//)",""],["expect_warning_with_call_site","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_warning_with_call_site","(file, line, expected=//)",""],["expect_warning_without_call_site","RSpecHelpers","classes/RSpecHelpers.html#method-i-expect_warning_without_call_site","(expected=//)",""],["expect_with","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expect_with","(*frameworks)","<p>Sets the expectation framework module(s) to be included in each example group.\n<p>`frameworks` can be `:rspec`, …\n"],["expectation_count_type","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-expectation_count_type","()",""],["expectation_framework=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expectation_framework-3D","(framework)","<p>Delegates to expect_with(framework).\n"],["expectation_frameworks","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expectation_frameworks","()","<p>Returns the configured expectation framework adapter module(s)\n"],["expectation_fulfilled!","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-expectation_fulfilled-21","()","<p>@private\n"],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectChainChain","classes/RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-expectation_fulfilled-3F","()",""],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#method-i-expectation_fulfilled-3F","()",""],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::StubChain","classes/RSpec/Mocks/AnyInstance/StubChain.html#method-i-expectation_fulfilled-3F","()","<p>@private\n"],["expectation_on_nil_message","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-expectation_on_nil_message","(method_name)",""],["expected","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-expected","()","<p>@api private @return [RSpec::Matchers::ExpectedsForMultipleDiffs]\n"],["expected","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-expected","()","<p>@api private @return [Array, Hash]\n"],["expected","RSpec::Matchers::DSL::Matcher","classes/RSpec/Matchers/DSL/Matcher.html#method-i-expected","()","<p>Provides the expected value. This will return an array if multiple arguments were passed to the matcher; …\n"],["expected_args","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-expected_args","()","<p>rubocop:enable Metrics/ParameterLists\n"],["expected_encoding?","Object","classes/Object.html#method-i-expected_encoding-3F","()","<p>Depends on chaining :with_same_encoding for it to check for string encoding.\n"],["expected_formatted","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-expected_formatted","()","<p>@private\n"],["expected_messages_received?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-expected_messages_received-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-expects_call_stack_jump-3F","()","<p>@api private\n"],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::DSL::DefaultImplementations","classes/RSpec/Matchers/DSL/DefaultImplementations.html#method-i-expects_call_stack_jump-3F","()","<p>Most matchers do not expect call stack jumps.\n"],["expose_current_running_example_as","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expose_current_running_example_as","(method_name)","<p>Exposes the current running example via the named helper method. RSpec 2.x exposed this via `example`, …\n"],["expose_dsl_globally=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expose_dsl_globally-3D","(value)","<p>Use this to expose the core RSpec DSL via `Module` and the `main` object. It will be set automatically …\n"],["expose_dsl_globally?","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-expose_dsl_globally-3F","()","<p>Indicates if the DSL has been exposed off of modules and `main`. Default: true @return [Boolean]\n"],["expose_example_group_alias","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-expose_example_group_alias","(name)","<p>@private\n"],["expose_example_group_alias_globally","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-expose_example_group_alias_globally","(method_name)","<p>@private\n"],["expose_globally!","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-expose_globally-21","()","<p>Adds the describe method to Module and the top level binding. @api private\n"],["expose_globally!","RSpec::Core::SharedExampleGroup::TopLevelDSL","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-expose_globally-21","()","<p>@api private\n<p>Adds the top level DSL methods to Module and the top level binding.\n"],["exposed_globally?","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-exposed_globally-3F","()","<p>@private\n"],["exposed_globally?","RSpec::Core::SharedExampleGroup::TopLevelDSL","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-exposed_globally-3F","()","<p>@private\n"],["expression","RSpec::Mocks::AllowanceTarget","classes/RSpec/Mocks/AllowanceTarget.html#method-i-expression","()",""],["expression","RSpec::Mocks::AnyInstanceAllowanceTarget","classes/RSpec/Mocks/AnyInstanceAllowanceTarget.html#method-i-expression","()",""],["expression","RSpec::Mocks::AnyInstanceExpectationTarget","classes/RSpec/Mocks/AnyInstanceExpectationTarget.html#method-i-expression","()",""],["expression","RSpec::Mocks::ExpectationTargetMethods","classes/RSpec/Mocks/ExpectationTargetMethods.html#method-i-expression","()",""],["expression_lines","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_lines","()",""],["expression_node","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_node","()",""],["expression_outmost_node?","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-expression_outmost_node-3F","(node)",""],["ext","Pathname","classes/Pathname.html#method-i-ext","(newext='')","<p>Return a new Pathname with <code>String#ext</code> applied to it.\n<p>This Pathname extension comes from Rake\n"],["ext","Rake::FileList","classes/Rake/FileList.html#method-i-ext","(newext='')","<p>Return a new FileList with <code>String#ext</code> method applied to each member of the array.\n<p>This method is a shortcut …\n"],["ext","Rake::FileList","classes/Rake/FileList.html#method-i-ext","(newext='')","<p>Return a new FileList with <code>String#ext</code> method applied to each member of the array.\n<p>This method is a shortcut …\n"],["ext","String","classes/String.html#method-i-ext","(newext='')","<p>Replace the file extension with <code>newext</code>.  If there is no extension on the string, append the new extension …\n"],["extend","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-extend","(mod, *filters)","<p>Tells RSpec to extend example groups with `mod`. Methods defined in `mod` are exposed to example groups …\n"],["extended","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-c-extended","(object)","<p>@private\n"],["extension","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-extension","(name)","<p>Creates extension methods for the <code>name</code> extension to enable and disable\nthe extension and to query if ...\n"],["extension","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-extension","(name, enable)","<p>Enables or disables the extension with <code>name</code>\n"],["extension?","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-extension-3F","(name)","<p>Is the extension <code>name</code> enabled?\n"],["extract","RDoc::Generator::POT::MessageExtractor","classes/RDoc/Generator/POT/MessageExtractor.html#method-i-extract","()","<p>Extracts messages from <code>store</code>, stores them into RDoc::Generator::POT::PO and returns it.\n"],["extract_call_seq","RDoc::Comment","classes/RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a &#39;call-seq&#39; in the comment to override the normal parameter handling.  The :call-seq: …\n"],["extract_comment","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-extract_comment","(comment)","<p>Extracts the comment for this section from the original comment block. If the first line contains :section:, …\n"],["extract_expression_lines_at","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-c-extract_expression_lines_at","(file_path, beginning_line_number, max_line_count=nil)",""],["extract_index_path","SDoc::Merge","classes/SDoc/Merge.html#method-i-extract_index_path","(dir)",""],["extract_line_at","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-c-extract_line_at","(file_path, line_number)",""],["extract_messages","RDoc::I18n::Text","classes/RDoc/I18n/Text.html#method-i-extract_messages","()","<p>Extracts translation target messages and yields each message.\n<p>Each yielded message is a Hash. It consists …\n"],["extras","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-extras","()","<p>Retrieve the list of values not associated with named arguments\n"],["fail","RSpec::Matchers::FailMatchers","classes/RSpec/Matchers/FailMatchers.html#method-i-fail","(&block)","<p>Matches if an expectation fails\n<p>@example\n\n<pre><code>expect { some_expectation }.to fail\n</code></pre>\n"],["fail_fast_limit_met?","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-fail_fast_limit_met-3F","()","<p>@private\n"],["fail_including","RSpec::Matchers::FailMatchers","classes/RSpec/Matchers/FailMatchers.html#method-i-fail_including","(*snippets)","<p>Matches if an expectation fails including the provided message\n<p>@example\n\n<pre><code>expect { some_expectation }.to ...\n</code></pre>\n"],["fail_with","RSpec::Expectations","classes/RSpec/Expectations.html#method-c-fail_with","(message, expected=nil, actual=nil)","<p>Raises an RSpec::Expectations::ExpectationNotMetError with message. @param [String] message @param [Object] …\n"],["fail_with","RSpec::Matchers::FailMatchers","classes/RSpec/Matchers/FailMatchers.html#method-i-fail_with","(message)","<p>Matches if an expectation fails with the provided message\n<p>@example\n\n<pre><code>expect { some_expectation }.to fail_with(&quot;some ...\n</code></pre>\n"],["fail_with_exception","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-fail_with_exception","(reporter, exception)","<p>@private\n<p>Used internally to set an exception and fail without actually executing the example when an exception …\n"],["fail_with_message","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-fail_with_message","(message)","<p>@private\n"],["failed_examples","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-failed_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of failed examples\n"],["failure_count","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-failure_count","()","<p>@api @return [Fixnum] the number of failed examples\n"],["failure_message","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-i-failure_message","()",""],["failure_message","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-i-failure_message","()",""],["failure_message","RSpec::Matchers::AliasedMatcher","classes/RSpec/Matchers/AliasedMatcher.html#method-i-failure_message","()","<p>Provides the failure_message of the aliased matcher. Aliased matchers are designed to behave identically …\n"],["failure_message","RSpec::Matchers::AliasedNegatedMatcher","classes/RSpec/Matchers/AliasedNegatedMatcher.html#method-i-failure_message","()",""],["failure_message","RSpec::Matchers::BuiltIn::All","classes/RSpec/Matchers/BuiltIn/All.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","classes/RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-i-failure_message","()","<p>@api private Provides a good generic failure message. Based on `description`. When subclassing, if you …\n"],["failure_message","RSpec::Matchers::BuiltIn::Be","classes/RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeComparedTo","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeFalsey","classes/RSpec/Matchers/BuiltIn/BeFalsey.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeNil","classes/RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeTruthy","classes/RSpec/Matchers/BuiltIn/BeTruthy.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::Compound::And","classes/RSpec/Matchers/BuiltIn/Compound/And.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Compound::Or","classes/RSpec/Matchers/BuiltIn/Compound/Or.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ContainExactly","classes/RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Eq","classes/RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Eql","classes/RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Equal","classes/RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Exist","classes/RSpec/Matchers/BuiltIn/Exist.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Satisfy","classes/RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::SpecificValuesChange","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::YieldWithNoArgs","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-failure_message","(&definition)","<p>Customizes the failure messsage to use when this matcher is asked to positively match. Only use this …\n"],["failure_message","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-failure_message","()",""],["failure_message_for_should","RSpec::Matchers::DSL::Macros::Deprecated","classes/RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-failure_message_for_should","(&definition)","<p>@deprecated Use {Macros#failure_message} instead.\n"],["failure_message_for_should_not","RSpec::Matchers::DSL::Macros::Deprecated","classes/RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-failure_message_for_should_not","(&definition)","<p>@deprecated Use {Macros#failure_message_when_negated} instead.\n"],["failure_message_when_negated","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Matchers::AliasedMatcher","classes/RSpec/Matchers/AliasedMatcher.html#method-i-failure_message_when_negated","()","<p>Provides the failure_message_when_negated of the aliased matcher. Aliased matchers are designed to behave …\n"],["failure_message_when_negated","RSpec::Matchers::AliasedNegatedMatcher","classes/RSpec/Matchers/AliasedNegatedMatcher.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","classes/RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-i-failure_message_when_negated","()","<p>@api private Provides a good generic negative failure message. Based on `description`. When subclassing, …\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Be","classes/RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeComparedTo","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeFalsey","classes/RSpec/Matchers/BuiltIn/BeFalsey.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeNil","classes/RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeTruthy","classes/RSpec/Matchers/BuiltIn/BeTruthy.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ChangeFromValue","classes/RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-failure_message_when_negated","()","<p>@private\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ContainExactly","classes/RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Eq","classes/RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Eql","classes/RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Equal","classes/RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Exist","classes/RSpec/Matchers/BuiltIn/Exist.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Satisfy","classes/RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-failure_message_when_negated","()","<p>@private\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-failure_message_when_negated","()","<p>@private\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::YieldWithNoArgs","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-failure_message_when_negated","()","<p>@private\n"],["failure_message_when_negated","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-failure_message_when_negated","(&definition)","<p>Customize the failure messsage to use when this matcher is asked to negatively match. Only use this when …\n"],["failure_message_when_negated","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-failure_message_when_negated","()",""],["failure_notifications","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-failure_notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::FailedExampleNotification&gt;]\n\n<pre><code>returns failed examples as ...\n</code></pre>\n"],["failure_notifier","RSpec::Support","classes/RSpec/Support.html#method-c-failure_notifier","()","<p>@api private\n"],["failure_notifier=","RSpec::Support","classes/RSpec/Support.html#method-c-failure_notifier-3D","(callable)","<p>@api private\n"],["failures","RSpec::Expectations::FailureAggregator","classes/RSpec/Expectations/FailureAggregator.html#method-i-failures","()",""],["failures","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-failures","()","<p>@return [Array&lt;RSpec::Expectations::ExpectationNotMetError&gt;] The list of expectation failures. …\n"],["false_positives_handler","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-false_positives_handler","()","<p>@private\n"],["fetch","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-fetch","(*args, &block)",""],["fetch","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-fetch","(*args, &block)",""],["fetch","RSpec::Core::Ordering::Registry","classes/RSpec/Core/Ordering/Registry.html#method-i-fetch","(name, &fallback)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::ContextHookMemoized","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized.html#method-c-fetch_or_store","(key, &_block)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","classes/RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html#method-i-fetch_or_store","(key)",""],["fetch_or_store","RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","classes/RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html#method-i-fetch_or_store","(key)",""],["file","Rake::DSL","classes/Rake/DSL.html#method-i-file","(*args, &block)","<p>Declare a file task.\n<p>Example:\n\n<pre><code> file &quot;config.cfg&quot; =&gt; [&quot;config.template&quot;] do\n   open(&quot;config.cfg&quot;, &quot;w&quot;) do ...\n</code></pre>\n"],["file=","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-file-3D","(location)","<p>The file this Document was created from.\n"],["file_dir","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-file_dir","()","<p>Directory where generated class HTML files live relative to the output dir.\n"],["file_dir","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-file_dir","()","<p>The directory files are written to\n"],["file_dir","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-file_dir","()",""],["file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["files_hash","RDoc::Store","classes/RDoc/Store.html#method-i-files_hash","()","<p>Hash of all files known to RDoc\n"],["files_or_directories_to_run=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-files_or_directories_to_run-3D","(*files)","<p>@private\n"],["files_to_run","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-files_to_run","()","<p>The spec files RSpec will run. @return [Array] specified files about to run\n"],["filter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter","()",""],["filter=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter-3D","(filter)",""],["filter_applies?","RSpec::Core::MetadataFilter","classes/RSpec/Core/MetadataFilter.html#method-c-filter_applies-3F","(key, filter_value, metadata)","<p>@private\n"],["filter_gem","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-i-filter_gem","(gem_name)",""],["filter_gems_from_backtrace","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter_gems_from_backtrace","(*gem_names)","<p>Adds {#backtrace_exclusion_patterns} that will filter lines from the named gems from backtraces.\n<p>@param …\n"],["filter_manager","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-filter_manager","()","<p>@private\n"],["filter_methods","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-filter_methods","(found, name)","<p>Filters the methods in <code>found</code> trying to find a match for <code>name</code>.\n"],["filter_run","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter_run","(*args)",""],["filter_run_excluding","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter_run_excluding","(*args)","<p>Adds key/value pairs to the `exclusion_filter`. If `args` includes any symbols that are not part of the …\n"],["filter_run_including","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter_run_including","(*args)","<p>Adds key/value pairs to the `inclusion_filter`. If `args` includes any symbols that are not part of the …\n"],["filter_run_when_matching","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-filter_run_when_matching","(*args)","<p>Applies the provided filter only if any of examples match, in constrast to {#filter_run}, which always …\n"],["filtered_examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-filtered_examples","()","<p>@private\n"],["find","RSpec::Core::SharedExampleGroup::Registry","classes/RSpec/Core/SharedExampleGroup/Registry.html#method-i-find","(lookup_contexts, name)",""],["find_alias_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_alias_comment","(class_name, new_name, old_name)","<p>Finds the comment for an alias on <code>class_name</code> from <code>new_name</code> to <code>old_name</code>\n"],["find_ancestor_local_symbol","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_and_eval_shared","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-find_and_eval_shared","(label, name, inclusion_location, *args, &customization_block)","<p>@private\n"],["find_attr_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_attr_comment","(var_name, attr_name, read = nil, write = nil)","<p>Finds a comment for rb_define_attr, rb_attr or Document-attr.\n<p><code>var_name</code> is the C class variable the attribute …\n"],["find_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value <code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_best_solution","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","classes/RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-find_best_solution","()",""],["find_body","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_body","(class_name, meth_name, meth_obj, file_content, quiet = false)","<p>Find the C code corresponding to a Ruby method\n"],["find_c_enclosure","RDoc::Store","classes/RDoc/Store.html#method-i-find_c_enclosure","(variable)","<p>Finds the enclosure (namespace) for the given C <code>variable</code>.\n"],["find_class","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_class","(raw_name, name)","<p>Finds a RDoc::NormalClass or RDoc::NormalModule for <code>raw_name</code>\n"],["find_class_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_class_comment","(class_name, class_mod)","<p>Look for class or module documentation above Init_+class_name+(void), in a Document-class <code>class_name</code> …\n"],["find_class_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its descendants\n"],["find_class_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace <code>from</code>\n"],["find_class_or_module","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_class_or_module","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_const_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_const_comment","(type, const_name, class_name = nil)","<p>Finds a comment matching <code>type</code> and <code>const_name</code> either above the comment or in the matching Document- section. …\n"],["find_constant_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_enclosing_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_external_alias","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value <code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_first_parent_containing","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-find_first_parent_containing","(dir)",""],["find_include_file","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-find_include_file","(name)","<p>Look for the given file in the directory containing the current file, and then in each of the directories …\n"],["find_instance_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_items_for","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-find_items_for","(metadata)",""],["find_local_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named <code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","classes/RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value <code>singleton</code>.\n"],["find_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_methods","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-find_methods","(name)","<p>Yields items matching <code>name</code> including the store they were found in, the class being searched for, the …\n"],["find_minimal_repro","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-i-find_minimal_repro","()",""],["find_modifiers","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_modifiers","(comment, meth_obj)","<p>Handles modifiers in <code>comment</code> and updates <code>meth_obj</code> as appropriate.\n"],["find_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby&#39;s scoping rules\n"],["find_module_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_override_comment","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-find_override_comment","(class_name, meth_obj)","<p>Finds a <code>Document-method</code> override for <code>meth_obj</code> on <code>class_name</code>\n"],["find_pager_jruby","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-find_pager_jruby","(pager)","<p>Finds the given <code>pager</code> for jruby.  Returns an IO if <code>pager</code> was found.\n<p>Returns false if <code>pager</code> does not exist. …\n"],["find_store","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-find_store","(name)","<p>Finds a store that matches <code>name</code> which can be the name of a gem, “ruby”, “home” or …\n"],["find_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_text_page","RDoc::Store","classes/RDoc/Store.html#method-i-find_text_page","(file_name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>file_name</code>\n"],["find_unique","RDoc::Store","classes/RDoc/Store.html#method-i-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns them as an array. Performs the alias updates …\n"],["finish","LCS::DiffCallbacks","classes/LCS/DiffCallbacks.html#method-i-finish","()","<p>Finalizes the diff process. If an unprocessed hunk still exists, then it is appended to the diff list. …\n"],["finish","RDoc::Options","classes/RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for existent files, creating a regexp …\n"],["finish","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-finish","()","<p>@private\n"],["finish_page_dir","RDoc::Options","classes/RDoc/Options.html#method-i-finish_page_dir","()","<p>Fixes the page_dir to be relative to the root_dir and adds the page_dir to the files list.\n"],["finished_a?","LCS::Change","classes/LCS/Change.html#method-i-finished_a-3F","()",""],["finished_b?","LCS::Change","classes/LCS/Change.html#method-i-finished_b-3F","()",""],["first_non_rspec_line","RSpec::CallerFilter","classes/RSpec/CallerFilter.html#method-c-first_non_rspec_line","(skip_frames=3, increment=5)","<p>This supports args because it&#39;s more efficient when the caller specifies these. It allows us to skip …\n"],["fix_basic_object_inheritance","RDoc::Store","classes/RDoc/Store.html#method-i-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["flat_map","RSpec::Core::FlatMap","classes/RSpec/Core/FlatMap.html#method-c-flat_map","(array, &block)",""],["flow","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-flow","(str)","<p>Processes <code>str</code> converting attributes, HTML and regexp handlings\n"],["flush","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-flush","()",""],["flush_left","RDoc::Text","classes/RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["foo","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-foo","()",""],["for","RDoc::Parser","classes/RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given <code>file_name</code> and <code>content</code>.\n"],["for","RSpec::Core::MultipleExceptionError::InterfaceTag","classes/RSpec/Core/MultipleExceptionError/InterfaceTag.html#method-c-for","(ex)","<p>Provides a way to force `ex` to be something that satisfies the multiple exception error interface.  …\n"],["for","RSpec::Core::Notifications::CustomNotification","classes/RSpec/Core/Notifications/CustomNotification.html#method-c-for","(options={})","<p>@param options [Hash] A hash of method / value pairs to create on this notification @return [CustomNotification] …\n"],["for","RSpec::Core::Notifications::ExampleNotification","classes/RSpec/Core/Notifications/ExampleNotification.html#method-c-for","(example)","<p>@private\n"],["for","RSpec::Expectations::ExpectationTarget","classes/RSpec/Expectations/ExpectationTarget.html#method-c-for","(value, block)","<p>@private\n"],["for","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-c-for","(object_reference, method_name)",""],["for","RSpec::Mocks::ObjectMethodReference","classes/RSpec/Mocks/ObjectMethodReference.html#method-c-for","(object_reference, method_name)",""],["for","RSpec::Mocks::ObjectReference","classes/RSpec/Mocks/ObjectReference.html#method-c-for","(object_module_or_name, allow_direct_object_refs=false)","<p>Returns an appropriate Object or Module reference based on the given argument.\n"],["for","RSpec::Mocks::VerifyingExistingMethodDouble","classes/RSpec/Mocks/VerifyingExistingMethodDouble.html#method-c-for","(object, method_name, proxy)",""],["for_failed_spec_run","RSpec::Core::Bisect::BisectFailedError","classes/RSpec/Core/Bisect/BisectFailedError.html#method-c-for_failed_spec_run","(spec_output)",""],["for_filtered_examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-for_filtered_examples","(reporter, &block)","<p>@private\n"],["for_many_matchers","RSpec::Matchers::ExpectedsForMultipleDiffs","classes/RSpec/Matchers/ExpectedsForMultipleDiffs.html#method-c-for_many_matchers","(matchers)","<p>@api private Wraps provided matcher list in instance of ExpectedForMultipleDiffs. @param [Array&lt;Any&gt;] …\n"],["force","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-force","(hash)","<p>@private\n<p>Used to set higher priority option values from the command line.\n"],["force","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-i-force","(hash)",""],["force_documentation=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned off by :enddoc:\n"],["fork_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-fork_supported-3F","()","<p>On JRuby 1.7 `–1.8` mode, `Process.respond_to?(:fork)` returns true, but when you try to fork, it raises …\n"],["format","RSpec::Mocks::TestDoubleFormatter","classes/RSpec/Mocks/TestDoubleFormatter.html#method-c-format","(dbl, unwrap=false)",""],["format","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-c-format","(object)",""],["format","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-format","(object)",""],["format=","RDoc::Comment","classes/RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["format_backtrace","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-i-format_backtrace","(backtrace, options={})",""],["format_backtrace","RSpec::Core::Formatters::ExceptionPresenter::Factory::EmptyBacktraceFormatter","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory/EmptyBacktraceFormatter.html#method-c-format_backtrace","(*)",""],["format_diffs","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-format_diffs","(diffs)",""],["format_docstrings","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-format_docstrings","(&block)","<p>Formats the docstring output using the block provided.\n<p>@example\n\n<pre><code># This will strip the descriptions of both ...\n</code></pre>\n"],["format_docstrings_block","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-format_docstrings_block","()","<p>@private\n"],["format_duration","RSpec::Core::Formatters::Helpers","classes/RSpec/Core/Formatters/Helpers.html#method-c-format_duration","(duration)","<p>@api private\n<p>Formats seconds into a human-readable string.\n<p>@param duration [Float, Fixnum] in seconds @return …\n"],["format_seconds","RSpec::Core::Formatters::Helpers","classes/RSpec/Core/Formatters/Helpers.html#method-c-format_seconds","(float, precision=nil)","<p>@api private\n<p>Formats seconds to have 5 digits of precision with trailing zeros removed if the number is …\n"],["formatted_backtrace","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-formatted_backtrace","(exception=@exception)",""],["formatted_backtrace","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-formatted_backtrace","()","<p>Returns the failures formatted backtrace.\n<p>@return [Array&lt;String&gt;] the examples backtrace lines\n"],["formatted_cause","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-formatted_cause","(exception)",""],["formatted_duration","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-formatted_duration","()","<p>@return [String] a formatted version of the time it took to run the\n\n<pre><code>suite\n</code></pre>\n"],["formatted_inclusion_location","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-i-formatted_inclusion_location","()","<p>@return [String] The {#inclusion_location}, formatted for display by a formatter.\n"],["formatted_load_time","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-formatted_load_time","()","<p>@return [String] a formatted version of the time it took to boot RSpec\n\n<pre><code>and load the spec files\n</code></pre>\n"],["formatter","RDoc::Generator::Markup","classes/RDoc/Generator/Markup.html#method-i-formatter","()","<p>Creates an RDoc::Markup::ToHtmlCrossref formatter\n"],["formatter","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-formatter","(io)","<p>Creates a new RDoc::Markup::Formatter.  If a formatter is given with -f, use it.  If we&#39;re outputting …\n"],["formatter=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-formatter-3D","(formatter, output=output_wrapper)",""],["formatter_loader","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-formatter_loader","()","<p>@private\n"],["formatters","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-formatters","()","<p>Returns a duplicate of the formatters currently loaded in the `FormatterLoader` for introspection.\n<p>Note …\n"],["formatters","RSpec::Core::Formatters::Loader","classes/RSpec/Core/Formatters/Loader.html#method-c-formatters","()","<p>@api private\n<p>Internal formatters are stored here when loaded.\n"],["framework_name","RSpec::Core::MockingAdapters::Flexmock","classes/RSpec/Core/MockingAdapters/Flexmock.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::Mocha","classes/RSpec/Core/MockingAdapters/Mocha.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::RR","classes/RSpec/Core/MockingAdapters/RR.html#method-c-framework_name","()",""],["framework_name","RSpec::Core::MockingAdapters::RSpec","classes/RSpec/Core/MockingAdapters/RSpec.html#method-c-framework_name","()",""],["freeze","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-freeze","()","<p>Override for default freeze implementation to prevent freezing of test doubles.\n"],["friendly_path","RDoc::Store","classes/RDoc/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-from","(value)","<p>@api public Specifies the original value.\n"],["from","RSpec::Matchers::BuiltIn::ChangeToValue","classes/RSpec/Matchers/BuiltIn/ChangeToValue.html#method-i-from","(value)","<p>@api public Specifies the original value.\n"],["from","RSpec::Matchers::ExpectedsForMultipleDiffs","classes/RSpec/Matchers/ExpectedsForMultipleDiffs.html#method-c-from","(expected)","<p>@api private Wraps provided expected value in instance of ExpectedForMultipleDiffs. If provided value …\n"],["from_a","LCS::Change","classes/LCS/Change.html#method-c-from_a","(arr)",""],["from_a","LCS::ContextChange","classes/LCS/ContextChange.html#method-c-from_a","(arr)",""],["from_file","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-c-from_file","(path)",""],["from_hash","RSpec::Core::Notifications::DeprecationNotification","classes/RSpec/Core/Notifications/DeprecationNotification.html#method-c-from_hash","(data)","<p>@api Convenience way to initialize the notification\n"],["from_module","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy of module <code>module</code>. Used to promote modules …\n"],["full_backtrace=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-full_backtrace-3D","(true_or_false)","<p>Toggle full backtrace. @attr true_or_false [Boolean] toggle full backtrace display\n"],["full_backtrace?","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-i-full_backtrace-3F","()",""],["full_backtrace?","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-full_backtrace-3F","()","<p>Check if full backtrace is enabled. @return [Boolean] is full backtrace enabled\n"],["full_comment","Rake::Task","classes/Rake/Task.html#method-i-full_comment","()","<p>Full collection of comments. Multiple comments are separated by newlines.\n"],["full_description","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-full_description","()","<p>@return [Array] full description filter\n"],["full_description=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-full_description-3D","(description)","<p>Run examples matching on `description` in all files to run. @param description [String, Regexp] the pattern …\n"],["full_name","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Constant","classes/RDoc/Constant.html#method-i-full_name","()","<p>Full constant name including namespace\n"],["full_name","RDoc::Context","classes/RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc&#39;s cached value\n"],["full_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["fully_documented?","RDoc::Context","classes/RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn&#39;t …\n"],["fully_documented?","RDoc::Stats","classes/RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%, <code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["fully_formatted","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-fully_formatted","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)",""],["fully_formatted","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-fully_formatted","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The failure information fully formatted in the way that\n\n<pre><code>RSpec&#39;s built-in formatters emit.\n</code></pre>\n"],["fully_formatted","RSpec::Core::Notifications::SeedNotification","classes/RSpec/Core/Notifications/SeedNotification.html#method-i-fully_formatted","()","<p>@return [String] The seed information fully formatted in the way that\n\n<pre><code>RSpec&#39;s built-in formatters emit.\n</code></pre>\n"],["fully_formatted","RSpec::Core::Notifications::SkippedExampleNotification","classes/RSpec/Core/Notifications/SkippedExampleNotification.html#method-i-fully_formatted","(pending_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The pending detail fully formatted in the way that\n\n<pre><code>RSpec&#39;s built-in formatters emit.\n</code></pre>\n"],["fully_formatted","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-fully_formatted","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The summary information fully formatted in the way that\n\n<pre><code>RSpec&#39;s built-in formatters emit.\n</code></pre>\n"],["fully_formatted_failed_examples","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-fully_formatted_failed_examples","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The list of failed examples, fully formatted in the way\n\n<pre><code>that RSpec&#39;s built-in formatters ...\n</code></pre>\n"],["fully_formatted_lines","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-fully_formatted_lines","(failure_number, colorizer)",""],["fully_formatted_lines","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-fully_formatted_lines","(failure_number, colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [Array&lt;string&gt;] The failure information fully formatted in the way that\n\n<pre><code>RSpec&#39;s built-in ...\n</code></pre>\n"],["fully_formatted_pending_examples","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-fully_formatted_pending_examples","(colorizer=::RSpec::Core::Formatters::ConsoleCodes)","<p>@return [String] The list of pending examples, fully formatted in the\n\n<pre><code>way that RSpec&#39;s built-in formatters ...\n</code></pre>\n"],["gather_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in <code>files</code>.\n"],["gem_dir","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-gem_dir","(name, version)","<p>The ri directory for the gem with <code>gem_name</code>.\n"],["gemdirs","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-gemdirs","(filter = :latest)","<p>The latest installed gems&#39; ri directories.  <code>filter</code> can be :all or :latest.\n<p>A <code>filter</code> :all includes …\n"],["gen_body_table","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-gen_body_table","(file_content)","<p>Generate a Ruby-method table\n"],["gen_const_table","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-gen_const_table","(file_content)","<p>Generate a const table\n"],["gen_relative_url","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-c-gen_relative_url","(path, target)","<p>Converts a target url to one that is relative to a given path\n"],["gen_sub_directories","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-gen_sub_directories","()","<p>Create the directories the generated docs will live in if they don&#39;t already exist.\n"],["gen_url","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-gen_url","(url, text)","<p>Generate a link to <code>url</code> with content <code>text</code>.  Handles the special cases for img: and link: described under …\n"],["gen_url","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-gen_url","(url, text)","<p>Generates links for <code>rdoc-ref:</code> scheme URLs and allows RDoc::Markup::ToHtml to handle other schemes.\n"],["gen_url","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-gen_url","(url, text)","<p>Returns just the text of <code>link</code>, <code>url</code> is only used to determine the link type.\n"],["gen_url","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-gen_url","(url, text)","<p>Creates a Markdown-style URL from <code>url</code> with <code>text</code>.\n"],["generate","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate","()","<p>Build the initial indices and output objects based on an array of TopLevel objects containing the extracted …\n"],["generate","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-generate","()","<p>Writes the JSON index to disk\n"],["generate","RDoc::Generator::POT","classes/RDoc/Generator/POT.html#method-i-generate","()","<p>Writes .pot to disk.\n"],["generate","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-generate","()","<p>Writes the parsed data store to disk for use by ri.\n"],["generate","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate","()",""],["generate","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-generate","()","<p>Generates documentation for <code>file_info</code> (from #parse_files) into the output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate_class","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_class","(klass, template_file = nil)","<p>Generates a class file for <code>klass</code>\n"],["generate_class_files","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_class_files","()","<p>Generate a documentation file for each class and module\n"],["generate_class_files","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_class_files","()","<p>Generate a documentation file for each class\n"],["generate_class_tree","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_class_tree","()","<p>Create class tree structure and write it as json\n"],["generate_class_tree_level","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_class_tree_level","(classes, visited = {})","<p>Recursivly build class tree structure\n"],["generate_error","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-generate_error","()",""],["generate_file_files","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_file_files","()","<p>Generate a documentation file for each file\n"],["generate_file_files","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_file_files","()","<p>Generate a documentation file for each file\n"],["generate_file_tree","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_file_tree","()",""],["generate_file_tree_level","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_file_tree_level","(tree)",""],["generate_gzipped","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-generate_gzipped","()","<p>Compress the search_index.js file using gzip\n"],["generate_index","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_index","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generate_index_file","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_index_file","()","<p>Create index.html with frameset\n"],["generate_index_file","SDoc::Merge","classes/SDoc/Merge.html#method-i-generate_index_file","()",""],["generate_page","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_page","(file)","<p>Generate a page file for <code>file</code>\n"],["generate_search_index","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-generate_search_index","()","<p>Generate file with links for the search engine\n"],["generate_servlet_not_found","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_servlet_not_found","(message)","<p>Generates the 404 page for the RDoc servlet\n"],["generate_servlet_root","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_servlet_root","(installed)","<p>Generates the servlet root page for the RDoc servlet\n"],["generate_table_of_contents","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-generate_table_of_contents","()","<p>Generate an index page which lists all the classes which are documented.\n"],["generated_description","RSpec::Matchers","classes/RSpec/Matchers.html#method-c-generated_description","()","<p>@api private Generates an an example description based on the last expectation. Used by rspec-core&#39;s …\n"],["generation_hook","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in <code>specs</code>\n"],["generator_descriptions","RDoc::Options","classes/RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generator_for","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-generator_for","(store)","<p>Instantiates a Darkfish generator for <code>store</code>\n"],["get","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-get","()","<p>Pulls the next token from the stream.\n"],["get","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-get","(klass, operator)","<p>@private\n"],["get_bool","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_bool","()","<p>Looks for a true or false token.\n"],["get_class_or_module","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_class_or_module","(container, ignore_constants = false)","<p>Look for the name of a class of module (optionally with a leading  &mdash; or\n<p>with  &mdash; separated named) and return …\n\n"],["get_class_specification","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_class_specification","()","<p>Return a superclass, which can be either a constant of an expression\n"],["get_const_defined_on","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-get_const_defined_on","(mod, const_name)",""],["get_constant","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_constant","()","<p>Parse a constant, which might be qualified by one or more class or module names\n"],["get_included_module_with_optional_parens","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_included_module_with_optional_parens","()","<p>Get an included module that may be surrounded by parens\n"],["get_reader","TestPrivateAttrs::Sample","classes/TestPrivateAttrs/Sample.html#method-i-get_reader","()",""],["get_sorted_module_list","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-get_sorted_module_list","(classes)","<p>Return a list of the documented modules sorted by salience first, then by name.\n"],["get_squashed_tk","RDoc::Parser::RipperStateLex","classes/RDoc/Parser/RipperStateLex.html#method-i-get_squashed_tk","()",""],["get_svninfo","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-get_svninfo","(klass)","<p>Try to extract Subversion information out of the first constant whose value looks like a subversion  …\n"],["get_symbol_or_name","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-get_symbol_or_name","()","<p>Extracts a name or symbol from the token stream.\n"],["get_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tk","()","<p>Fetches the next token from the scanner\n"],["get_tk_until","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tk_until","(*tokens)","<p>Reads and returns all tokens up to one of <code>tokens</code>.  Leaves the matched token in the token list.\n"],["get_tkread","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-get_tkread","()","<p>Retrieves a String representation of the read tokens\n"],["github","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-github","","<p>Allow Github Flavored Markdown\n"],["github_url","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-github_url","(path)",""],["glob","Rake::FileList","classes/Rake/FileList.html#method-c-glob","(pattern, *args)","<p>Get a sorted list of files matching the pattern. This method should be preferred to Dir and Dir.glob(pattern) …\n"],["glob","Rake::FileList","classes/Rake/FileList.html#method-c-glob","(pattern, *args)","<p>Get a sorted list of files matching the pattern. This method should be preferred to Dir and Dir.glob(pattern) …\n"],["great_job","RDoc::Stats","classes/RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["group_entries","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-group_entries","(entries)","<p>Groups <code>entries</code> by date.\n"],["group_name","SDoc::Helpers","classes/SDoc/Helpers.html#method-i-group_name","(name)",""],["gsub","Rake::FileList","classes/Rake/FileList.html#method-i-gsub","(pat, rep)","<p>Return a new FileList with the results of running <code>gsub</code> against each element of the original list.\n<p>Example: …\n"],["gsub","Rake::FileList","classes/Rake/FileList.html#method-i-gsub","(pat, rep)","<p>Return a new FileList with the results of running <code>gsub</code> against each element of the original list.\n<p>Example: …\n"],["gsub!","Rake::FileList","classes/Rake/FileList.html#method-i-gsub-21","(pat, rep)","<p>Same as <code>gsub</code> except that the original file list is modified.\n"],["gsub!","Rake::FileList","classes/Rake/FileList.html#method-i-gsub-21","(pat, rep)","<p>Same as <code>gsub</code> except that the original file list is modified.\n"],["handle","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-handle","(text, code_object = nil, &block)","<p>Look for directives in the given <code>text</code>.\n<p>Options that we don&#39;t handle are yielded.  If the block returns …\n"],["handle_attr","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_attr","(var_name, attr_name, read, write)","<p>Creates a new RDoc::Attr <code>attr_name</code> on class <code>var_name</code> that is either <code>read</code>, <code>write</code> or both\n"],["handle_class_module","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_class_module","(var_name, type, class_name, parent, in_module)","<p>Creates a new RDoc::NormalClass or RDoc::NormalModule based on <code>type</code> named <code>class_name</code> in <code>parent</code> which …\n"],["handle_constants","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_constants","(type, var_name, const_name, definition)","<p>Adds constants.  By providing some_value: at the start of the comment you can override the C value of …\n"],["handle_directive","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-handle_directive","(prefix, directive, param, code_object = nil, encoding = nil)","<p>Performs the actions described by <code>directive</code> and its parameter <code>param</code>.\n<p><code>code_object</code> is used for directives …\n"],["handle_failure","RSpec::Expectations::ExpectationHelper","classes/RSpec/Expectations/ExpectationHelper.html#method-c-handle_failure","(matcher, message, failure_message_method)",""],["handle_ifdefs_in","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_ifdefs_in","(body)","<p>Removes #ifdefs that would otherwise confuse us\n"],["handle_interrupt","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-handle_interrupt","()","<p>@private\n"],["handle_matcher","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#method-c-handle_matcher","(actual, initial_matcher, message=nil, &block)",""],["handle_matcher","RSpec::Expectations::PositiveExpectationHandler","classes/RSpec/Expectations/PositiveExpectationHandler.html#method-c-handle_matcher","(actual, initial_matcher, message=nil, &block)",""],["handle_method","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_method","(type, var_name, meth_name, function, param_count, source_file = nil)","<p>Adds an RDoc::AnyMethod <code>meth_name</code> defined on a class or module assigned to <code>var_name</code>.  <code>type</code> is the type …\n"],["handle_order_constraint","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-handle_order_constraint","(expectation)","<p>@private\n"],["handle_pipe","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handle_rdoc_link","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-handle_rdoc_link","(url)","<p>Handles <code>rdoc-</code> type links for footnotes.\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_CROSSREF","(target)","<p>We&#39;re invoked when any text matches the CROSSREF pattern.  If we find the corresponding reference, …\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-handle_regexp_CROSSREF","(target)","<p>Removes escaping from the cross-references in <code>target</code>\n"],["handle_regexp_CROSSREF","RDoc::Markup::ToLabel","classes/RDoc/Markup/ToLabel.html#method-i-handle_regexp_CROSSREF","(target)","<p>Converts the CROSSREF <code>target</code> to plain text, removing the suppression marker, if any\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_regexp_HARD_BREAK","(target)","<p><code>target</code> is a <code><br></code>\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-handle_regexp_HARD_BREAK","(target)","<p><code>target</code> is a <code><br></code>\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_HARD_BREAK","(target)","<p>Adds a newline to the output\n"],["handle_regexp_HARD_BREAK","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-handle_regexp_HARD_BREAK","(target)","<p>Adds a newline to the output\n"],["handle_regexp_HYPERLINK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_regexp_HYPERLINK","(target)","<p><code>target</code> is a potential link.  The following schemes are handled:\n<p><code>mailto:</code> &mdash; Inserted as-is.\n<p><code>http:</code> &mdash; Links are …\n"],["handle_regexp_HYPERLINK","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_HYPERLINK","(target)","<p>Handles <code>rdoc-ref:</code> scheme links and allows RDoc::Markup::ToHtml to handle other schemes.\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_regexp_RDOCLINK","(target)","<p><code>target</code> is an rdoc-schemed link that will be converted into a hyperlink.\n<p>For the <code>rdoc-ref</code> scheme the named …\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-handle_regexp_RDOCLINK","(target)","<p><code>target</code> is an rdoc-schemed link that will be converted into a hyperlink. For the rdoc-ref scheme the cross-reference …\n"],["handle_regexp_RDOCLINK","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_RDOCLINK","(target)","<p>Converts the rdoc-…: links into a Markdown.style links.\n"],["handle_regexp_SUPPRESSED_CROSSREF","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-handle_regexp_SUPPRESSED_CROSSREF","(target)","<p>Removes preceding \\ from the suppressed crossref <code>target</code>\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-handle_regexp_TIDYLINK","(target)","<p>This <code>target</code> is a link where the label is different from the URL <code>label[url]</code> or <code>{long label}[url]</code>\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToLabel","classes/RDoc/Markup/ToLabel.html#method-i-handle_regexp_TIDYLINK","(target)","<p>Converts the TIDYLINK <code>target</code> to just the text part\n"],["handle_regexp_TIDYLINK","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-handle_regexp_TIDYLINK","(target)","<p>Converts the RDoc markup tidylink into a Markdown.style link.\n"],["handle_restoration_failures","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-i-handle_restoration_failures","()","<p>ruby 2.0.0-p247 and 2.0.0-p195 both have a bug that we can&#39;t work around :(. bugs.ruby-lang.org/issues/8686 …\n"],["handle_singleton","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_singleton","(sclass_var, class_var)","<p>Registers a singleton class <code>sclass_var</code> as a singleton of <code>class_var</code>\n"],["handle_tab_width","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-handle_tab_width","(body)","<p>Normalizes tabs in <code>body</code>\n"],["has_block?","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-has_block-3F","()",""],["has_default_failure_messages?","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","classes/RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-c-has_default_failure_messages-3F","(matcher)","<p>@private\n"],["has_expectation?","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-has_expectation-3F","(method_name)","<p>@private\n"],["has_key?","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-has_key-3F","(key)","<p>Returns true if <code>key</code> is one of the arguments\n"],["has_kw_args_in?","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-i-has_kw_args_in-3F","(args)",""],["has_kw_args_in?","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-has_kw_args_in-3F","(args)",""],["has_negative_expectation?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-has_negative_expectation-3F","(message)","<p>@private\n"],["has_output?","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-has_output-3F","()",""],["hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same relative_name\n"],["hash_attribute_names","RSpec::Core::HashImitatable::ClassMethods","classes/RSpec/Core/HashImitatable/ClassMethods.html#method-i-hash_attribute_names","()",""],["hash_excluding","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-hash_excluding","(*args)","<p>Matches a hash that doesn&#39;t include the specified key(s) or key/value.\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(hash_excluding(:key ...\n</code></pre>\n"],["hash_including","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-hash_including","(*args)","<p>Matches a hash that includes the specified key(s) or key/value pairs. Ignores any additional keys.\n<p>@example …\n"],["hash_not_including","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-hash_not_including","(*args)",""],["hash_with_backwards_compatibility_default_proc","RSpec::Core::Metadata::ExampleGroupHash","classes/RSpec/Core/Metadata/ExampleGroupHash.html#method-c-hash_with_backwards_compatibility_default_proc","()",""],["have_attributes","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-have_attributes","(expected)","<p>Passes if actual&#39;s attribute values match the expected attributes hash. This works no matter how …\n"],["have_git?","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-have_git-3F","()",""],["have_received","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-have_received","(method_name, &block)","<p>Verifies that the given object received the expected message during the course of the test. On a spy …\n"],["have_successful_no_warnings_output","Object","classes/Object.html#method-i-have_successful_no_warnings_output","()",""],["hello","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-hello","()",""],["hello_ary","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-hello_ary","()",""],["hidden?","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-hidden-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has hidden\n\n<pre><code>this constant.\n</code></pre>\n"],["hide","RSpec::Mocks::ConstantMutator","classes/RSpec/Mocks/ConstantMutator.html#method-c-hide","(constant_name)","<p>Hides a constant.\n<p>@param (see ExampleMethods#hide_const)\n<p>@see ExampleMethods#hide_const @note It&#39;s …\n"],["hide_const","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-hide_const","(constant_name)","<p>Hides the named constant with the given value. The constant will be undefined for the duration of the …\n"],["highlight","RSpec::Core::Formatters::SyntaxHighlighter","classes/RSpec/Core/Formatters/SyntaxHighlighter.html#method-i-highlight","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::CodeRayImplementation","classes/RSpec/Core/Formatters/SyntaxHighlighter/CodeRayImplementation.html#method-c-highlight_syntax","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","classes/RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html#method-c-highlight_syntax","(lines)",""],["highlight_syntax","RSpec::Core::Formatters::SyntaxHighlighter::NoSyntaxHighlightingImplementation","classes/RSpec/Core/Formatters/SyntaxHighlighter/NoSyntaxHighlightingImplementation.html#method-c-highlight_syntax","(lines)",""],["home_dir","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-home_dir","()","<p>The location of the rdoc data in the user&#39;s home directory.\n<p>Like ::system, ri data in the user&#39;s …\n"],["hook_description","RSpec::Core::Hooks::AroundHook","classes/RSpec/Core/Hooks/AroundHook.html#method-i-hook_description","()",""],["hook_expression","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-hook_expression","()",""],["hook_expression","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-hook_expression","()",""],["hook_intention","RSpec::Core::MemoizedHelpers::ContextHookMemoized::After","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/After.html#method-c-hook_intention","()",""],["hook_intention","RSpec::Core::MemoizedHelpers::ContextHookMemoized::Before","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized/Before.html#method-c-hook_intention","()",""],["hooks","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-hooks","()","<p>@private Holds the various registered hooks. Here we use a FilterableItemRepository implementation that …\n"],["hooks","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-hooks","()","<p>@private Holds the various registered hooks.\n"],["html","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-html","","<p>Allow HTML\n"],["html_list_name","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-html_list_name","(list_type, open_tag)","<p>Determines the HTML list element for <code>list_type</code> and <code>open_tag</code>\n"],["html_list_name","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-html_list_name","(list_type, open_tag)","<p>In snippets, there are no lists\n"],["html_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["http_url","RDoc::Context","classes/RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["hunks","RSpec::Support::HunkGenerator","classes/RSpec/Support/HunkGenerator.html#method-i-hunks","()",""],["id","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-id","()","<p>@return [String] the unique id of this example. Pass\n\n<pre><code>this at the command line to re-run this exact example.\n</code></pre>\n"],["id","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-id","()","<p>@return [String] the unique id of this example group. Pass\n\n<pre><code>this at the command line to re-run this exact ...\n</code></pre>\n"],["id_from","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-id_from","(metadata)","<p>@private\n"],["idempotently_define_singleton_method","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-idempotently_define_singleton_method","(name, &definition)","<p>Define a singleton method for the singleton class (remove the method if it&#39;s already been defined). …\n"],["idempotently_reset","RSpec::Mocks::ConstantMutator::BaseMutator","classes/RSpec/Mocks/ConstantMutator/BaseMutator.html#method-i-idempotently_reset","()",""],["if_modified_since","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-if_modified_since","(req, res, path = nil)","<p>Handles the If-Modified-Since HTTP header on <code>req</code> for <code>path</code>.  If the file has not been modified a Not  …\n"],["ignore","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again (#record_location is called). …\n"],["ignore","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-ignore","(*node)","<p>Use ignore in your subclass to ignore the content of a node.\n\n<pre><code>##\n# We don&#39;t support raw nodes in ToNoRaw ...\n</code></pre>\n"],["ignore_deprecations","Rake::TestCase","classes/Rake/TestCase.html#method-i-ignore_deprecations","()",""],["ignored?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n<p>See also #ignore\n"],["ignoring_args?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-ignoring_args-3F","()",""],["implemented?","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-i-implemented-3F","()","<p>A method is implemented if sending the message does not result in a `NoMethodError`. It might be dynamically …\n"],["import","Rake::DSL","classes/Rake/DSL.html#method-i-import","(*fns)","<p>Import the partial Rakefiles <code>fn</code>.  Imported files are loaded <em>after</em> the current file is completely loaded. …\n"],["improve_hash_formatting","RSpec::Matchers::BuiltIn::BaseMatcher::HashFormatting","classes/RSpec/Matchers/BuiltIn/BaseMatcher/HashFormatting.html#method-c-improve_hash_formatting","(inspect_string)","<p>`{ :a =&gt; 5, :b =&gt; 2 }.inspect` produces:\n\n<pre><code>{:a=&gt;5, :b=&gt;2}\n</code></pre>\n<p>…but it looks much better as:\n"],["in_files","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-in_files","()","<p>The files comments in this section come from\n"],["in_namespace","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-in_namespace","(name)","<p>Evaluate the block in a nested namespace named <code>name</code>.  Create an anonymous namespace if <code>name</code> is nil.\n"],["in_path?","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-in_path-3F","(file)","<p>Is <code>file</code> in ENV?\n"],["in_project_source_dir_regex","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-in_project_source_dir_regex","()","<p>@private\n"],["in_sub_process","RSpec::Support::InSubProcess","classes/RSpec/Support/InSubProcess.html#method-i-in_sub_process","(prevent_warnings=true)","<p>rubocop:disable MethodLength\n"],["in_sub_process_if_possible","RSpec::Support::InSubProcess","classes/RSpec/Support/InSubProcess.html#method-i-in_sub_process_if_possible","(prevent_warnings=true)","<p>rubocop:enable MethodLength\n"],["in_tt?","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-in_tt-3F","()","<p>Are we currently inside tt tags?\n"],["include","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-include","(mod, *filters)","<p>Tells RSpec to include `mod` in example groups. Methods defined in `mod` are exposed to examples (not …\n"],["include","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-include","(*args)",""],["include","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-include","(*expected)","<p>Passes if actual includes expected. This works for collections and Strings. You can also pass in multiple …\n"],["include","Rake::FileList","classes/Rake/FileList.html#method-i-include","(*filenames)","<p>Add file names defined by glob patterns to the file list.  If an array is given, add each element of …\n"],["include","Rake::FileList","classes/Rake/FileList.html#method-i-include","(*filenames)","<p>Add file names defined by glob patterns to the file list.  If an array is given, add each element of …\n"],["include?","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-include-3F","(key)",""],["include_chain_clauses_in_custom_matcher_descriptions?","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-include_chain_clauses_in_custom_matcher_descriptions-3F","()","<p>Indicates whether or not custom matcher descriptions and failure messages should include clauses from …\n"],["include_context","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-include_context","(shared_group_name, *filters)","<p>Tells RSpec to include the named shared example group in example groups. Use `filters` to constrain the …\n"],["include_context","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-include_context","(name, *args, &block)","<p>Includes shared content mapped to `name` directly in the group in which it is declared, as opposed to …\n"],["include_example?","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-include_example-3F","(example)",""],["include_example?","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-include_example-3F","(example)",""],["include_example?","RSpec::Core::InclusionRules","classes/RSpec/Core/InclusionRules.html#method-i-include_example-3F","(example)",""],["include_examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-include_examples","(name, *args, &block)","<p>Includes shared content mapped to `name` directly in the group in which it is declared, as opposed to …\n"],["include_file","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-i-include_file","(name, indent, encoding)","<p>Handles the <code>:include: <em>filename</em></code> directive.\n<p>If the first line of the included file starts with &#39;#&#39;, …\n"],["include_in","RSpec::Core::SharedExampleGroupModule","classes/RSpec/Core/SharedExampleGroupModule.html#method-i-include_in","(klass, inclusion_line, args, customization_block)","<p>@private\n"],["include_only","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-include_only","(*args)",""],["include_template","SDoc::Templatable","classes/SDoc/Templatable.html#method-i-include_template","(template_name, local_assigns = {})","<p>Load and render the erb template with the given <code>template_name</code> within current context. Adds all <code>local_assigns</code> …\n"],["include_with_low_priority","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-include_with_low_priority","(*args)",""],["included","RSpec::Core::HashImitatable","classes/RSpec/Core/HashImitatable.html#method-c-included","(klass)",""],["included","RSpec::Core::SharedContext","classes/RSpec/Core/SharedContext.html#method-i-included","(group)","<p>@private\n"],["included","RSpec::Core::SharedExampleGroupModule","classes/RSpec/Core/SharedExampleGroupModule.html#method-i-included","(klass)","<p>Ruby callback for when a module is included in another module is class. Our definition evaluates the …\n"],["included","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-c-included","(klass)","<p>@private\n"],["inclusion_filter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-inclusion_filter","()","<p>Returns the `inclusion_filter`. If none has been set, returns an empty hash.\n"],["inclusion_filter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-inclusion_filter","()","<p>@private\n"],["inclusion_filter=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-inclusion_filter-3D","(filter)","<p>Clears and reassigns the `inclusion_filter`. Set to `nil` if you don&#39;t want any inclusion filter …\n"],["inclusive","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-i-inclusive","()","<p>@api public Makes the between comparison inclusive.\n<p>@example\n\n<pre><code>expect(3).to be_between(2, 3).inclusive\n</code></pre>\n"],["increase_actual_received_count!","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-increase_actual_received_count-21","()",""],["index_classes","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-index_classes","()","<p>Adds classes and modules to the index\n"],["index_methods","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-index_methods","()","<p>Adds methods to the index\n"],["index_pages","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-index_pages","()","<p>Adds pages to the index\n"],["index_path","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-i-index_path","()","<p>Determines index path based on @options.main_page (or lack thereof)\n"],["inherited","RSpec::Core::Formatters::BaseBisectFormatter","classes/RSpec/Core/Formatters/BaseBisectFormatter.html#method-c-inherited","(formatter)",""],["inherited","RSpec::Mocks::ArgumentMatchers::SingletonMatcher","classes/RSpec/Mocks/ArgumentMatchers/SingletonMatcher.html#method-c-inherited","(subklass)",""],["init","Rake::Application","classes/Rake/Application.html#method-i-init","(app_name='rake')","<p>Initialize the command line parameters and app name.\n"],["init","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-init","(name, version)","<p>Initialization that bypasses the “yield self” and “define” step.\n"],["init_tags","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-init_tags","()","<p>Maps attributes to ANSI sequences\n"],["init_tags","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-i-init_tags","()","<p>Sets a flag that is picked up by #annotate to do the right thing in #convert_string\n"],["init_tags","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-init_tags","()","<p>Maps attributes to HTML tags\n"],["init_tags","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["init_tags","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-init_tags","()","<p>Maps attributes to HTML sequences\n"],["initial_action=","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-initial_action-3D","(_value)",""],["initialize","RDoc::Generator::POT","classes/RDoc/Generator/POT.html#method-i-initialize","(store, options)","<p>Set up a new .pot generator\n"],["initialize","RDoc::Generator::RI","classes/RDoc/Generator/RI.html#method-i-initialize","(store, options)","<p>Set up a new ri generator\n"],["initialize","RDoc::RD::Inline","classes/RDoc/RD/Inline.html#method-i-initialize","(rdoc, reference)","<p>Initializes the Inline with <code>rdoc</code> and <code>inline</code>\n"],["initialize_copy","RSpec::Matchers::MatcherDelegator","classes/RSpec/Matchers/MatcherDelegator.html#method-i-initialize_copy","(other)",""],["initialize_methods_etc","RDoc::Context","classes/RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["inline","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-inline","(rdoc, reference = rdoc)","<p>Creates a new RDoc::RD::Inline for the <code>rdoc</code> markup and the raw <code>reference</code>\n"],["inner_action","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-inner_action","()",""],["inner_action=","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-inner_action-3D","(_value)",""],["inspect","LCS::Change","classes/LCS/Change.html#method-i-inspect","()",""],["inspect","LCS::ContextChange","classes/LCS/ContextChange.html#method-i-inspect","(*args)",""],["inspect","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-inspect","()","<p>Provide a human-readable representation of this class\n"],["inspect","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-inspect","()","<p>@private\n"],["inspect","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-i-inspect","()","<p>@private\n"],["inspect","RSpec::Core::SharedExampleGroupModule","classes/RSpec/Core/SharedExampleGroupModule.html#method-i-inspect","()","<p>Provides a human-readable representation of this module.\n"],["inspect","RSpec::Matchers::DSL::Matcher","classes/RSpec/Matchers/DSL/Matcher.html#method-i-inspect","()","<p>Adds the name (rather than a cryptic hex number) so we can identify an instance of the matcher in error …\n"],["inspect","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-inspect","()",""],["inspect","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-inspect","()",""],["inspect","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-inspect","()","<p>@private\n"],["inspect","RSpec::Support::ObjectFormatter::BigDecimalInspector","classes/RSpec/Support/ObjectFormatter/BigDecimalInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::ObjectFormatter::DateTimeInspector","classes/RSpec/Support/ObjectFormatter/DateTimeInspector.html#method-i-inspect","()","<p>ActiveSupport sometimes overrides inspect. If `ActiveSupport` is defined use a custom format string that …\n"],["inspect","RSpec::Support::ObjectFormatter::DelegatorInspector","classes/RSpec/Support/ObjectFormatter/DelegatorInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::ObjectFormatter::DescribableMatcherInspector","classes/RSpec/Support/ObjectFormatter/DescribableMatcherInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::ObjectFormatter::InspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/InspectableObjectInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::ObjectFormatter::TimeInspector","classes/RSpec/Support/ObjectFormatter/TimeInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::ObjectFormatter::UninspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/UninspectableObjectInspector.html#method-i-inspect","()",""],["inspect","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-inspect","()",""],["inspect","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-inspect","()",""],["inspect","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-inspect","()",""],["inspect","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-inspect","()","<p>Same as <code>to_s</code>, but with inspected items.\n"],["inspect_output","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-inspect_output","()","<p>Returns a description of the example that always includes the location.\n"],["install_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["installed_at_exit?","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-installed_at_exit-3F","()","<p>@private\n"],["installed_docs","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-installed_docs","()","<p>Returns an Array of installed documentation.\n<p>Each entry contains the documentation name (gem name, &#39;Ruby …\n"],["instance_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-instance_double","(doubled_class, *args)","<p>@overload instance_double(doubled_class)\n\n<pre><code>@param doubled_class [String, Class]\n</code></pre>\n<p>@overload instance_double …\n"],["instance_exec","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-instance_exec","(*args, &block)","<p>@private\n"],["instance_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_method_visibility_for","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-c-instance_method_visibility_for","(klass, method_name)",""],["instance_methods","RDoc::Store","classes/RDoc/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance methods (not full name).\n"],["instance_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-instance_of","(klass)","<p>Matches if `arg.instance_of?(klass)`\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(instance_of(Thing))\n</code></pre>\n"],["instance_spy","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-instance_spy","(*args)","<p>@overload instance_spy(doubled_class)\n\n<pre><code>@param doubled_class [String, Class]\n</code></pre>\n<p>@overload instance_spy(doubled_class, …\n"],["instance_that_received","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-instance_that_received","(method_name)","<p>@private\n"],["interactive","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-interactive","()","<p>Runs ri interactively using Readline if it is available.\n"],["interface_matches?","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-c-interface_matches-3F","(matcher)","<p>Note: `failure_message` is part of the RSpec 3 protocol (paired with `failure_message_when_negated`), …\n"],["interface_matches?","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","classes/RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-c-interface_matches-3F","(matcher)",""],["intern","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-intern","(task_class, task_name)","<p>Lookup a task.  Return an existing task if found, otherwise create a task of the current type.\n"],["intro","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-intro","(unwrapped=false)","<p>@private\n"],["intuit_diff_direction","Diff::LCS::Internals","classes/Diff/LCS/Internals.html#method-c-intuit_diff_direction","(src, patchset, limit = nil)","<p>Examine the patchset and the source to see in which direction the patch should be applied.\n<p>WARNING: By …\n"],["invalid_kw_args_from","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-i-invalid_kw_args_from","(_kw_args)",""],["invalid_kw_args_from","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-invalid_kw_args_from","(given_kw_args)",""],["investigation","Rake::Task","classes/Rake/Task.html#method-i-investigation","()","<p>Return a string describing the internal state of a task.  Useful for debugging.\n"],["invoke","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-invoke","()","<p>Runs the suite of specs and exits the process with an appropriate exit code.\n"],["invoke","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-invoke","(parent_stub, *args, &block)",""],["invoke","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-i-invoke","(*_)",""],["invoke","Rake::Task","classes/Rake/Task.html#method-i-invoke","(*args)","<p>Invoke the task if it is needed.  Prerequisites are invoked first.\n"],["invoke","TestRakeBacktrace","classes/TestRakeBacktrace.html#method-i-invoke","(*args)",""],["invoke_normal","TestRakeReduceCompat","classes/TestRakeReduceCompat.html#method-i-invoke_normal","(task_name)",""],["invoke_without_incrementing_received_count","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-invoke_without_incrementing_received_count","(parent_stub, *args, &block)",""],["invoked","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-invoked","(message)",""],["is_a?","Rake::FileList","classes/Rake/FileList.html#method-i-is_a-3F","(klass)","<p>Lie about our class.\n"],["is_a?","Rake::FileList","classes/Rake/FileList.html#method-i-is_a-3F","(klass)","<p>Lie about our class.\n"],["is_a_matcher?","RSpec::Support","classes/RSpec/Support.html#method-c-is_a_matcher-3F","(object)","<p>@private\n"],["is_alias_for","RDoc::Constant","classes/RDoc/Constant.html#method-i-is_alias_for","()","<p>The module or class this constant is an alias for\n"],["is_expected","RSpec::Core::MemoizedHelpers","classes/RSpec/Core/MemoizedHelpers.html#method-i-is_expected","()","<p>Wraps the `subject` in `expect` to make it the target of an expectation. Designed to read nicely for …\n"],["isolate_for_context_hook","RSpec::Core::MemoizedHelpers::ContextHookMemoized","classes/RSpec/Core/MemoizedHelpers/ContextHookMemoized.html#method-c-isolate_for_context_hook","(example_group_instance)",""],["items_for","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-items_for","(metadata)",""],["items_for","RSpec::Core::FilterableItemRepository::UpdateOptimized","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-items_for","(request_meta)",""],["jruby?","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-jruby-3F","()",""],["jruby_9000?","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-jruby_9000-3F","()",""],["jruby_version","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-jruby_version","()",""],["keyword?","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-keyword-3F","()",""],["keywords=","RSpec::Support::MethodSignatureExpectation","classes/RSpec/Support/MethodSignatureExpectation.html#method-i-keywords-3D","(values)",""],["kind_of","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-kind_of","(klass)","<p>Matches if `arg.kind_of?(klass)`\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(kind_of(Thing))\n</code></pre>\n"],["kind_of?","Rake::FileList","classes/Rake/FileList.html#method-i-kind_of-3F","(klass)",""],["kind_of?","Rake::FileList","classes/Rake/FileList.html#method-i-kind_of-3F","(klass)",""],["klass","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-klass","()",""],["klass","RSpec::Support::ObjectFormatter::UninspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/UninspectableObjectInspector.html#method-i-klass","()",""],["kw_args_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-kw_args_supported-3F","()",""],["last","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-last","()","<p>Returns the last item in the list\n"],["last_commit_sha1","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-last_commit_sha1","()",""],["last_description","RSpec::Matchers","classes/RSpec/Matchers.html#method-c-last_description","()","<p>@private\n"],["last_modified","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["last_run_statuses","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-last_run_statuses","()","<p>@private\n"],["lcs","Diff::LCS::Internals","classes/Diff/LCS/Internals.html#method-c-lcs","(a, b)","<p>Compute the longest common subsequence between the sequenced Enumerables <code>a</code> and <code>b</code>. The result is an array …\n"],["lcs","LCS","classes/LCS.html#method-i-lcs","(other, &block)","<p>Returns an Array containing the longest common subsequence(s) between <code>self</code> and <code>other</code>. See Diff::LCS#LCS. …\n"],["lcs","LCS","classes/LCS.html#method-c-lcs","(seq1, seq2, &block)",""],["least_indentation_from","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-c-least_indentation_from","(lines)",""],["length","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-length","()","<p>Length of parts in the ListItem\n"],["let","RSpec::Core::MemoizedHelpers::ClassMethods","classes/RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-let","(name, &block)","<p>Generates a method whose return value is memoized after the first call. Useful for reducing duplication …\n"],["let!","RSpec::Core::MemoizedHelpers::ClassMethods","classes/RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-let-21","(name, &block)","<p>Just like `let`, except the block is invoked by an implicit `before` hook. This serves a dual purpose …\n"],["libs=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-libs-3D","(libs)","<p>@private\n"],["line_index","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-line_index","()","<p>Current line number\n"],["line_range_of_expression","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-line_range_of_expression","()",""],["line_range_of_location_nodes_in_expression","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-line_range_of_location_nodes_in_expression","()",""],["lines","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-lines","()",""],["lines_around","RSpec::Core::Formatters::HtmlSnippetExtractor","classes/RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-lines_around","(file, line)","<p>@api private\n<p>Extract lines of code centered around a particular line within a source file.\n<p>@param file …\n"],["link","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-i-link","(name, text, code = true)","<p>Creates an HTML link to <code>name</code> with the given <code>text</code>.\n"],["link_to","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-link_to","(content, label = content, text = nil)","<p>Finds a link reference for <code>label</code> and creates a new link to it with\n<code>content</code> as the link text. If <code>label</code> ...\n"],["list","RSpec::Matchers::EnglishPhrasing","classes/RSpec/Matchers/EnglishPhrasing.html#method-c-list","(obj)","<p>@note The returned string has a leading space except when given an empty list.\n<p>Converts an object (often …\n"],["list_end_for","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-list_end_for","(list_type)","<p>Returns the HTML end-tag for <code>list_type</code>\n"],["list_files_in_directory","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that this directory doesn&#39;t have …\n"],["list_item_from","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-list_item_from","(unparsed)","<p>Creates an RDoc::Markup::ListItem by parsing the <code>unparsed</code> content from\nthe first parsing pass.\n"],["list_item_start","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-list_item_start","(list_item, list_type)","<p>Returns the HTML tag for <code>list_type</code>, possible using a label from <code>list_item</code>\n"],["list_item_start","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-list_item_start","(list_item, list_type)","<p>Lists are paragraphs, but notes and labels have a separator\n"],["list_known_classes","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-list_known_classes","(names = [])","<p>Lists classes known to ri starting with <code>names</code>.  If <code>names</code> is empty all known classes are shown.\n"],["list_methods_matching","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-list_methods_matching","(name)","<p>Returns an Array of methods matching <code>name</code>\n"],["ln","TestRakeFileUtils::BadLink","classes/TestRakeFileUtils/BadLink.html#method-i-ln","(*args)",""],["load","RDoc::I18n::Locale","classes/RDoc/I18n/Locale.html#method-i-load","(locale_directory)","<p>Loads translation messages from <code>locale_directory</code>/+@name+/rdoc.po or <code>locale_directory</code>/+@name+.po. The …\n"],["load","Rake::DefaultLoader","classes/Rake/DefaultLoader.html#method-i-load","(fn)","<p>Loads a rakefile into the current application from <code>fn</code>\n"],["load_all","RDoc::Store","classes/RDoc/Store.html#method-i-load_all","()","<p>Loads all items from this store into memory.  This recreates a documentation tree for use by a generator …\n"],["load_all_files","Object","classes/Object.html#method-i-load_all_files","(files, preamble, postamble=nil)",""],["load_cache","RDoc::Store","classes/RDoc/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_class","RDoc::Store","classes/RDoc/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code> and hooks it up to this store.\n"],["load_class_data","RDoc::Store","classes/RDoc/Store.html#method-i-load_class_data","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_from","RSpec::Core::ExampleStatusPersister","classes/RSpec/Core/ExampleStatusPersister.html#method-c-load_from","(file_name)",""],["load_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-load_method","(store, cache, klass, type, name)","<p>Loads RI data for method <code>name</code> on <code>klass</code> from <code>store</code>.  <code>type</code> and <code>cache</code> indicate if it is a class or instance …\n"],["load_method","RDoc::Store","classes/RDoc/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_methods_matching","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-load_methods_matching","(name)","<p>Returns an Array of RI data for methods matching <code>name</code>\n"],["load_options","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a new RDoc::Options instance. …\n"],["load_page","RDoc::Store","classes/RDoc/Store.html#method-i-load_page","(page_name)","<p>Loads ri data for <code>page_name</code>\n"],["load_phony","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-load_phony","()",""],["load_rakefile","Rake","classes/Rake.html#method-c-load_rakefile","(path)","<p>Load a rakefile.\n"],["load_rakefile","Rake::Application","classes/Rake/Application.html#method-i-load_rakefile","()","<p>Find the rakefile and then load it and any pending imports.\n"],["load_rdoc","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_spec_files","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-load_spec_files","()","<p>@private\n"],["load_variable_map","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-load_variable_map","(map_name)","<p>Loads the variable map with the given <code>name</code> from the RDoc::Store, if present.\n"],["load_yaml","RDoc","classes/RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["location","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-location","()",""],["location","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-location","()",""],["location_nodes_at_beginning_line","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-location_nodes_at_beginning_line","()",""],["location_rerun_argument","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-location_rerun_argument","()","<p>Returns the location-based argument that can be passed to the `rspec` command to rerun this example. …\n"],["location_tuple_from","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-location_tuple_from","(metadata)","<p>@private\n"],["lock","RSpec::Support::Mutex","classes/RSpec/Support/Mutex.html#method-i-lock","()","<p>@private\n"],["look_for_directives_in","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-look_for_directives_in","(context, comment)","<p>Look for directives in a normal comment block:\n\n<pre><code>* :title: My Awesome Project\n</code></pre>\n<p>This method modifies the <code>comment</code> …\n"],["look_for_directives_in","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-look_for_directives_in","(container, comment)","<p>Look for directives in a normal comment block:\n\n<pre><code># :stopdoc:\n# Don&#39;t display comment from this point forward\n</code></pre>\n"],["lookup","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-lookup","(task_name, initial_scope=nil)","<p>Lookup a task, using scope and the scope hints in the task name. This method performs straight lookups …\n"],["lookup_method","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-lookup_method","(name)","<p>Returns a filtered list of methods matching <code>name</code>\n"],["main","RDoc::Store","classes/RDoc/Store.html#method-i-main","()","<p>Gets the main page for this RDoc store.  This page is used as the root of the RDoc server.\n"],["main=","RDoc::Store","classes/RDoc/Store.html#method-i-main-3D","(page)","<p>Sets the main page for this RDoc store.\n"],["make","Rake::LinkedList","classes/Rake/LinkedList.html#method-c-make","(*args)","<p>Make a list out of the given arguments. This method is polymorphic\n"],["make_example_group_header_red","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_example_group_header_red","(group_id)",""],["make_example_group_header_yellow","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_example_group_header_yellow","(group_id)",""],["make_header_red","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_header_red","()",""],["make_header_yellow","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-make_header_yellow","()",""],["make_message","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-make_message","(message)","<p>Adds useful info about the parser to <code>message</code>\n"],["make_variable_map","RDoc::Store","classes/RDoc/Store.html#method-i-make_variable_map","(variables)","<p>Converts the variable =&gt; ClassModule map <code>variables</code> from a C parser into a variable =&gt; class name …\n"],["map_diffs","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-map_diffs","(diffs, klass = Diff::LCS::ContextChange)",""],["map_to_no_change","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-map_to_no_change","(change_result)",""],["mark_fixed!","RSpec::Core::Pending","classes/RSpec/Core/Pending.html#method-c-mark_fixed-21","(example)","<p>@private\n<p>Mark example as fixed.\n<p>@param example [RSpec::Core::Example] the example to mark as fixed\n"],["mark_pending!","RSpec::Core::Pending","classes/RSpec/Core/Pending.html#method-c-mark_pending-21","(example, message_or_bool)","<p>@private\n<p>Mark example as pending.\n<p>@param example [RSpec::Core::Example] the example to mark as pending …\n"],["mark_skipped!","RSpec::Core::Pending","classes/RSpec/Core/Pending.html#method-c-mark_skipped-21","(example, message_or_bool)","<p>@private\n<p>Mark example as skipped.\n<p>@param example [RSpec::Core::Example] the example to mark as skipped …\n"],["markup","RDoc::Text","classes/RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["markup_code","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-markup_code","()","<p>Turns the method&#39;s token stream into HTML.\n<p>Prepends line numbers if <code>options.line_numbers</code> is true. …\n"],["marshal_dump","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Constant","classes/RDoc/Constant.html#method-i-marshal_dump","()","<p>Dumps this Constant for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-marshal_dump","()","<p>Serializes this Section.  The title and parsed comment are saved, but not the section parent which must …\n"],["marshal_dump","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-marshal_dump","()","<p>Dumps this TopLevel for use by ri.  See also #marshal_load\n"],["marshal_dump_with_unmarshable_object_handling","RSpec::Support::InSubProcess","classes/RSpec/Support/InSubProcess.html#method-i-marshal_dump_with_unmarshable_object_handling","(object)",""],["marshal_load","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the following methods will return cached values: …\n"],["marshal_load","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following methods will return cached values:\n<p>#full_name …\n"],["marshal_load","RDoc::Constant","classes/RDoc/Constant.html#method-i-marshal_load","(array)","<p>Loads this Constant from <code>array</code>.  For a loaded Constant the following methods will return cached values: …\n"],["marshal_load","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-marshal_load","(array)","<p>De-serializes this Section.  The section parent must be restored manually.\n"],["mask_protected_sequences","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-mask_protected_sequences","()","<p>Escapes regexp handling sequences of text to prevent conversion to RDoc\n"],["match","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","LCS::DefaultCallbacks","classes/LCS/DefaultCallbacks.html#method-c-match","(event)","<p>Called when two items match.\n"],["match","LCS::DiffCallbacks","classes/LCS/DiffCallbacks.html#method-i-match","(event)",""],["match","LCS::HTMLDiff::Callbacks","classes/LCS/HTMLDiff/Callbacks.html#method-i-match","(event)","<p>This will be called with both lines are the same\n"],["match","LCS::SDiffCallbacks","classes/LCS/SDiffCallbacks.html#method-i-match","(event)",""],["match","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-match","(expected)","<p>Given a `Regexp` or `String`, passes if `actual.match(pattern)` Given an arbitrary nested data structure …\n"],["match","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-match","(options={}, &match_block)","<p>Stores the block that is used to determine whether this matcher passes or fails. The block should return …\n"],["match_array","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-match_array","(items)","<p>An alternate form of `contain_exactly` that accepts the expected contents as a single array arg rather …\n"],["match_for_should","RSpec::Matchers::DSL::Macros::Deprecated","classes/RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-match_for_should","(&definition)","<p>@deprecated Use {Macros#match} instead.\n"],["match_for_should_not","RSpec::Matchers::DSL::Macros::Deprecated","classes/RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-match_for_should_not","(&definition)","<p>@deprecated Use {Macros#match_when_negated} instead.\n"],["match_unless_raises","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-match_unless_raises","(*exceptions)","<p>@api private Used to wrap a block of code that will indicate failure by raising one of the named exceptions. …\n"],["match_unless_raises","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-match_unless_raises","(expected_exception=Exception, &match_block)","<p>Use this instead of `match` when the block will raise an exception rather than returning false to indicate …\n"],["match_when_negated","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-match_when_negated","(&match_block)","<p>Use this to define the block for a negative expectation (`expect(…).not_to`) when the positive and …\n"],["matcher","RSpec::Matchers::DSL","classes/RSpec/Matchers/DSL.html#method-i-matcher","(name, &declarations)",""],["matcher_definitions","RSpec::Support","classes/RSpec/Support.html#method-c-matcher_definitions","()","<p>@private\n"],["matcher_matches?","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","classes/RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-i-matcher_matches-3F","(matcher)",""],["matcher_matches?","RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","classes/RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html#method-i-matcher_matches-3F","(matcher)",""],["matcher_name","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-c-matcher_name","()","<p>@private\n"],["matcher_name","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-matcher_name","()","<p>@private\n"],["matches?","RSpec::Matchers::AliasedNegatedMatcher","classes/RSpec/Matchers/AliasedNegatedMatcher.html#method-i-matches-3F","(*args, &block)",""],["matches?","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-matches-3F","(actual)","<p>@api private Indicates if the match is successful. Delegates to `match`, which should be defined on a …\n"],["matches?","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::BeComparedTo","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-i-matches-3F","(actual, &block)",""],["matches?","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-matches-3F","(actual)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::Cover","classes/RSpec/Matchers/BuiltIn/Cover.html#method-i-matches-3F","(range)",""],["matches?","RSpec::Matchers::BuiltIn::Exist","classes/RSpec/Matchers/BuiltIn/Exist.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-i-matches-3F","(actual, &block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-matches-3F","(given_proc, negative_expectation=false, &block)","<p>rubocop:disable MethodLength @private\n"],["matches?","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-matches-3F","(actual)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::Satisfy","classes/RSpec/Matchers/BuiltIn/Satisfy.html#method-i-matches-3F","(actual, &block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::SpecificValuesChange","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-matches-3F","(given_proc)","<p>rubocop:disable MethodLength @private\n"],["matches?","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-matches-3F","(block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-matches-3F","(block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-matches-3F","(block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::YieldWithNoArgs","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-matches-3F","(block)","<p>@private\n"],["matches?","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-matches-3F","(subject, &block)",""],["matches?","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-matches-3F","(subject, &block)",""],["matches?","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-matches-3F","(subject, &block)",""],["matches?","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-matches-3F","(subject)",""],["matches?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-matches-3F","(message, *args)",""],["matches?","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-i-matches-3F","(message, *_)",""],["matches_args?","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-matches_args-3F","(*args)","<p>@private\n"],["matches_at_least_count?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-matches_at_least_count-3F","()",""],["matches_at_most_count?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-matches_at_most_count-3F","()",""],["matches_exact_count?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-matches_exact_count-3F","()",""],["matches_name_but_not_args","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-matches_name_but_not_args","(message, *args)",""],["matching_encoding","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-matching_encoding","(string)","<p>Encoding Exceptions:\n<p>Raised by Encoding and String methods:\n\n<pre><code>Encoding::UndefinedConversionError:\n  when ...\n</code></pre>\n"],["matching_hooks_for","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-matching_hooks_for","(position, scope, example_or_group)",""],["max_count=","RSpec::Support::MethodSignatureExpectation","classes/RSpec/Support/MethodSignatureExpectation.html#method-i-max_count-3D","(number)",""],["max_formatted_output_length=","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-max_formatted_output_length-3D","(length)","<p>Configures the maximum character length that RSpec will print while formatting an object. You can set …\n"],["member?","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-member-3F","(invocation)","<p>Is the invocation already in the chain?\n"],["member?","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-member-3F","(obj)",""],["merge","LCS::Hunk","classes/LCS/Hunk.html#method-i-merge","(hunk)","<p>Merges this hunk and the provided hunk together if they overlap. Returns a truthy value so that if there …\n"],["merge","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","RDoc::Generator::POT::POEntry","classes/RDoc/Generator/POT/POEntry.html#method-i-merge","(other_entry)","<p>Merges the PO entry with <code>other_entry</code>.\n"],["merge","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-merge","(other)","<p>When this is a collection of documents (#file is not set and this document contains only other documents …\n"],["merge","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-merge","(other)","<p>Appends <code>other</code>&#39;s parts\n"],["merge","RSpec::Core::ExampleStatusMerger","classes/RSpec/Core/ExampleStatusMerger.html#method-c-merge","(this_run, from_previous_runs)",""],["merge","RSpec::Core::ExampleStatusMerger","classes/RSpec/Core/ExampleStatusMerger.html#method-i-merge","()",""],["merge","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-i-merge","(values)",""],["merge","SDoc::Merge","classes/SDoc/Merge.html#method-i-merge","(options)",""],["merge_search_index","SDoc::Merge","classes/SDoc/Merge.html#method-i-merge_search_index","()",""],["merge_tree","SDoc::Merge","classes/SDoc/Merge.html#method-i-merge_tree","()",""],["merged?","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-merged-3F","()","<p>Does this Document contain other Documents?\n"],["message","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-message","(notification)","<p>@api public\n<p>Used by the reporter to send messages to the output stream.\n<p>@param notification [MessageNotification] …\n"],["message","RSpec::Core::Formatters::FallbackMessageFormatter","classes/RSpec/Core/Formatters/FallbackMessageFormatter.html#method-i-message","(notification)","<p>@api public\n<p>Used by the reporter to send messages to the output stream.\n<p>@param notification [MessageNotification] …\n"],["message","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-message","(notification)",""],["message","RSpec::Core::MultipleExceptionError","classes/RSpec/Core/MultipleExceptionError.html#method-i-message","()","<p>@return [String] Combines all the exception messages into a single string. @note RSpec does not actually …\n"],["message","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-message","(message)","<p>@param message [#to_s] A message object to send to formatters\n<p>Send a custom message to supporting formatters. …\n"],["message","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-message","()","<p>@return [String] The fully formatted exception message.\n"],["message","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-i-message","()",""],["message_expectation_class","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-message_expectation_class","()","<p>The type of message expectation to create has been extracted to its own method so that subclasses can …\n"],["message_expectation_class","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-i-message_expectation_class","()",""],["message_lines","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-i-message_lines","()",""],["message_lines","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-i-message_lines","()","<p>Returns the message generated for this failure line by line.\n<p>@return [Array&lt;String&gt;] The example …\n"],["message_received","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-message_received","(message, *args, &block)",""],["message_received","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-message_received","(message, *args, &block)","<p>@private\n"],["message_with_diff","RSpec::Matchers::ExpectedsForMultipleDiffs","classes/RSpec/Matchers/ExpectedsForMultipleDiffs.html#method-i-message_with_diff","(message, differ, actual)","<p>@api private Returns message with diff(s) appended for provided differ factory and actual value if there …\n"],["messages_arg_list","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-messages_arg_list","()","<p>@private\n"],["metadata","RSpec::Core::AnonymousExampleGroup","classes/RSpec/Core/AnonymousExampleGroup.html#method-c-metadata","()",""],["metadata","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-metadata","()","<p>The [Metadata](Metadata) object associated with this group. @see Metadata\n"],["method_call_args_description","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-method_call_args_description","(args, generic_prefix=\" with arguments: \", matcher_prefix=\" with \")","<p>@private\n"],["method_defined_at_any_visibility?","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-c-method_defined_at_any_visibility-3F","(klass, method_name)",""],["method_document","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-method_document","(name, filtered)","<p>Builds a RDoc::Markup::Document from <code>found</code>, <code>klasses</code> and <code>includes</code>\n"],["method_double_from_ancestor_for","RSpec::Mocks::PartialClassDoubleProxyMethods","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html#method-i-method_double_from_ancestor_for","(message)",""],["method_double_if_exists_for_message","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-method_double_if_exists_for_message","(message)","<p>@private\n"],["method_file","RDoc::Store","classes/RDoc/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_handle_for","RSpec::Support","classes/RSpec/Support.html#method-c-method_handle_for","(object, method_name)",""],["method_is_stashed?","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-i-method_is_stashed-3F","()","<p>@private\n"],["method_missing","RSpec::Core::OutputWrapper","classes/RSpec/Core/OutputWrapper.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","RSpec::Matchers::AliasedMatcher","classes/RSpec/Matchers/AliasedMatcher.html#method-i-method_missing","(*)","<p>Forward messages on to the wrapped matcher. Since many matchers provide a fluent interface (e.g. `a_value_within(0.1).of(3)`), …\n"],["method_missing","RSpec::Matchers::MatcherDelegator","classes/RSpec/Matchers/MatcherDelegator.html#method-i-method_missing","(*args, &block)",""],["method_missing","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","classes/RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-method_missing","(*args, &block)",""],["method_missing","RSpec::Mocks::VerifyingDouble","classes/RSpec/Mocks/VerifyingDouble.html#method-i-method_missing","(message, *args, &block)",""],["method_missing","RSpec::Mocks::VerifyingDouble::SilentIO","classes/RSpec/Mocks/VerifyingDouble/SilentIO.html#method-c-method_missing","(*)",""],["method_missing","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-method_missing","(sym, *args)","<p>Returns the value of the given argument via method_missing\n"],["method_reference","RSpec::Mocks::VerifyingPartialDoubleProxy","classes/RSpec/Mocks/VerifyingPartialDoubleProxy.html#method-i-method_reference","()",""],["method_reference","RSpec::Mocks::VerifyingProxy","classes/RSpec/Mocks/VerifyingProxy.html#method-i-method_reference","()",""],["method_type","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-method_type","(selector)","<p>Returns the type of method (:both, :instance, :class) for <code>selector</code>\n"],["method_visibility_for","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-c-method_visibility_for","(object, method_name)",""],["methods_by_type","RDoc::Context","classes/RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code> or <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","classes/RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in <code>methods</code>.\n"],["min_count=","RSpec::Support::MethodSignatureExpectation","classes/RSpec/Support/MethodSignatureExpectation.html#method-i-min_count-3D","(number)",""],["missing_kw_args_from","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-i-missing_kw_args_from","(_kw_args)",""],["missing_kw_args_from","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-missing_kw_args_from","(given_kw_args)",""],["mkdir_p","RSpec::Support::DirectoryMaker","classes/RSpec/Support/DirectoryMaker.html#method-c-mkdir_p","(path)","<p>@api private\n<p>Implements nested directory construction\n"],["mock_framework","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-mock_framework","()","<p>Returns the configured mock framework adapter module. @return [Symbol]\n"],["mock_framework=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-mock_framework-3D","(framework)","<p>Delegates to mock_framework=(framework).\n"],["mock_with","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-mock_with","(framework)","<p>Sets the mock framework adapter module.\n<p>`framework` can be a Symbol or a Module.\n<p>Given any of `:rspec`, …\n"],["modern_matcher_from","RSpec::Expectations::ExpectationHelper","classes/RSpec/Expectations/ExpectationHelper.html#method-c-modern_matcher_from","(matcher)","<p>Returns an RSpec-3+ compatible matcher, wrapping a legacy one in an adapter if necessary.\n<p>@private\n"],["module","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not known.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_names","RDoc::Store","classes/RDoc/Store.html#method-i-module_names","()","<p>Modules cache accessor.  An Array of all the module (and class) names in the store.\n"],["module_prepends_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-module_prepends_supported-3F","()",""],["module_refinement_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-module_refinement_supported-3F","()",""],["modules","RDoc::Context","classes/RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules_hash","RDoc::Context","classes/RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::Store","classes/RDoc/Store.html#method-i-modules_hash","()","<p>Hash of all modules known to RDoc\n"],["move_progress","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-move_progress","(percent_done)",""],["mri?","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-mri-3F","()",""],["multitask","Rake::DSL","classes/Rake/DSL.html#method-i-multitask","(*args, &block)","<p>Declare a task that performs its prerequisites in parallel. Multitasks does <strong>not</strong> guarantee that its prerequisites …\n"],["mutate","RSpec::Mocks::ConstantMutator","classes/RSpec/Mocks/ConstantMutator.html#method-c-mutate","(mutator)","<p>Uses the mutator to mutate (stub or hide) a constant. Ensures that the mutator is correctly registered …\n"],["mutate","RSpec::Mocks::ConstantMutator::ConstantHider","classes/RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-mutate","()",""],["mutate","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-mutate","()",""],["mutate","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","classes/RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-mutate","()",""],["mutated?","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-mutated-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has mutated\n\n<pre><code>(stubbed or hidden) this constant.\n</code></pre>\n"],["name","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::RI::Driver::NotFoundError","classes/RDoc/RI/Driver/NotFoundError.html#method-i-name","()","<p>Name that wasn&#39;t found\n"],["name","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-c-name","()",""],["name","RSpec::Core::Bisect::ShellRunner","classes/RSpec/Core/Bisect/ShellRunner.html#method-c-name","()",""],["name","RSpec::Matchers::BuiltIn::CaptureStderr","classes/RSpec/Matchers/BuiltIn/CaptureStderr.html#method-c-name","()",""],["name","RSpec::Matchers::BuiltIn::CaptureStdout","classes/RSpec/Matchers/BuiltIn/CaptureStdout.html#method-c-name","()",""],["name","RSpec::Matchers::BuiltIn::NullCapture","classes/RSpec/Matchers/BuiltIn/NullCapture.html#method-c-name","()",""],["name","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-name","()",""],["name","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-name","()",""],["name","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-name","()",""],["name","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-name","()",""],["name","Rake::Task","classes/Rake/Task.html#method-i-name","()","<p>Name of the task, including any namespace qualifiers.\n"],["name=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name_for_path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for another module or class return …\n"],["name_for_path","RDoc::Context","classes/RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_prefix","RDoc::Alias","classes/RDoc/Alias.html#method-i-name_prefix","()","<p>&#39;::&#39; for the alias of a singleton method/attribute, &#39;#&#39; for instance-level.\n"],["name_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-name_prefix","()","<p>&#39;::&#39; for a class method/attribute, &#39;#&#39; for an instance method.\n"],["name_regexp","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-name_regexp","(name)","<p>Returns a regular expression for <code>name</code> that will match an RDoc::AnyMethod&#39;s name.\n"],["names","RSpec::Matchers::BuiltIn::ReliableMatchData","classes/RSpec/Matchers/BuiltIn/ReliableMatchData.html#method-i-names","()","<p>@api private Returns match data names for named captures @return Array\n"],["namespace","Rake::DSL","classes/Rake/DSL.html#method-i-namespace","(name=nil, &block)","<p>Create a new rake namespace and use it for evaluating the given block.  Returns a NameSpace object that …\n"],["native_object_id","RSpec::Support::ObjectFormatter::UninspectableObjectInspector","classes/RSpec/Support/ObjectFormatter/UninspectableObjectInspector.html#method-i-native_object_id","()","<p>stackoverflow.com/a/2818916\n"],["needed?","Rake::FileCreationTask","classes/Rake/FileCreationTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn&#39;t exist.\n"],["needed?","Rake::FileTask","classes/Rake/FileTask.html#method-i-needed-3F","()","<p>Is this file task needed?  Yes if it doesn&#39;t exist, or if its time stamp is out of date.\n"],["needed?","Rake::Task","classes/Rake/Task.html#method-i-needed-3F","()","<p>Is this task needed?\n"],["negative?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-negative-3F","()",""],["negative_expectation_for?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-negative_expectation_for-3F","(message)",""],["never","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-never","()",""],["never","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-never","()","<p>Expect a message not to be received at all.\n<p>@return [MessageExpectation] self, to support further chaining. …\n"],["new","FourthDimensional::Event","classes/FourthDimensional/Event.html#method-c-new","(aggregate_id:, data: nil, metadata: nil)","<p>Initializes an event with the required <code>aggregate_id</code> and optional <code>data</code> and <code>metadata</code>.\n\n<pre><code>event = MyEvent.new(aggregate_id: ...\n</code></pre>\n"],["new","LCS::Block","classes/LCS/Block.html#method-c-new","(chunk)",""],["new","LCS::Change","classes/LCS/Change.html#method-c-new","(*args)",""],["new","LCS::ContextChange","classes/LCS/ContextChange.html#method-c-new","(*args)",""],["new","LCS::DiffCallbacks","classes/LCS/DiffCallbacks.html#method-c-new","()",""],["new","LCS::HTMLDiff","classes/LCS/HTMLDiff.html#method-c-new","(left, right, options = nil)",""],["new","LCS::HTMLDiff::Callbacks","classes/LCS/HTMLDiff/Callbacks.html#method-c-new","(output, options = {})",""],["new","LCS::Hunk","classes/LCS/Hunk.html#method-c-new","(data_old, data_new, piece, flag_context, file_length_difference)","<p>Create a hunk using references to both the old and new data, as well as the piece of data.\n"],["new","LCS::SDiffCallbacks","classes/LCS/SDiffCallbacks.html#method-c-new","()",""],["new","RDoc::Alias","classes/RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases <code>old_name</code> to <code>new_name</code>, has <code>comment</code> and is …\n"],["new","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and <code>name</code>\n"],["new","RDoc::Attr","classes/RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>, read/write status <code>rw</code> and <code>comment</code>.  <code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional <code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","classes/RDoc/Comment.html#method-c-new","(text = nil, location = nil)","<p>Creates a new comment with <code>text</code> that is found in the RDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","classes/RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and <code>comment</code>\n"],["new","RDoc::Context","classes/RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-c-new","(parent, title, comment)","<p>Creates a new section with <code>title</code> and <code>comment</code>\n"],["new","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given <code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')","<p>Defaults <code>eoutvar</code> to &#39;io&#39;, otherwise is identical to ERB&#39;s initialize\n"],["new","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-c-new","(store, options)","<p>Initialize a few instance variables before we start\n"],["new","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-c-new","(parent_generator, options)","<p>Creates a new generator.  <code>parent_generator</code> is used to determine the class_dir and file_dir of links in …\n"],["new","RDoc::Generator::POT::MessageExtractor","classes/RDoc/Generator/POT/MessageExtractor.html#method-c-new","(store)","<p>Creates a message extractor for <code>store</code>.\n"],["new","RDoc::Generator::POT::PO","classes/RDoc/Generator/POT/PO.html#method-c-new","()","<p>Creates an object that represents PO format.\n"],["new","RDoc::Generator::POT::POEntry","classes/RDoc/Generator/POT/POEntry.html#method-c-new","(msgid, options = {})","<p>Creates a PO entry for <code>msgid</code>. Other valus can be specified by <code>options</code>.\n"],["new","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-c-new","(store, options)",""],["new","RDoc::I18n::Locale","classes/RDoc/I18n/Locale.html#method-c-new","(name)","<p>Creates a new locale object for <code>name</code> locale. <code>name</code> must follow IETF language tag format.\n"],["new","RDoc::I18n::Text","classes/RDoc/I18n/Text.html#method-c-new","(raw)","<p>Creates a new i18n supported text for <code>raw</code> text.\n"],["new","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-new","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>Creates a new markdown parser that enables the given <code>extensions</code>.\n"],["new","RDoc::Markup","classes/RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure (paragraphs, lists, and so …\n"],["new","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-c-new","(length)","<p>Creates a new AttrSpan for <code>length</code> characters\n"],["new","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-c-new","()","<p>Creates a new attribute manager that understands bold, emphasized and teletype text.\n"],["new","RDoc::Markup::Attributes","classes/RDoc/Markup/Attributes.html#method-c-new","()","<p>Creates a new attributes set.\n"],["new","RDoc::Markup::BlankLine","classes/RDoc/Markup/BlankLine.html#method-c-new","()","<p>RDoc::Markup::BlankLine is a singleton\n"],["new","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-c-new","(*parts)","<p>Creates a new Document with <code>parts</code>\n"],["new","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-c-new","(options, markup = nil)","<p>Creates a new Formatter\n"],["new","RDoc::Markup::HardBreak","classes/RDoc/Markup/HardBreak.html#method-c-new","()","<p>RDoc::Markup::HardBreak is a singleton\n"],["new","RDoc::Markup::Include","classes/RDoc/Markup/Include.html#method-c-new","(file, include_path)","<p>Creates a new include that will import <code>file</code> from <code>include_path</code>\n"],["new","RDoc::Markup::IndentedParagraph","classes/RDoc/Markup/IndentedParagraph.html#method-c-new","(indent, *parts)","<p>Creates a new IndentedParagraph containing <code>parts</code> indented with <code>indent</code> spaces\n"],["new","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-c-new","(type = nil, *items)","<p>Creates a new list of <code>type</code> with <code>items</code>.  Valid list types are: <code>:BULLET</code>, <code>:LABEL</code>, <code>:LALPHA</code>, <code>:NOTE</code>, <code>:NUMBER</code> …\n"],["new","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-c-new","(label = nil, *parts)","<p>Creates a new ListItem with an optional <code>label</code> containing <code>parts</code>\n"],["new","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-new","()","<p>Creates a new Parser.  See also ::parse\n"],["new","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-new","(input_file_name, include_path)","<p>Creates a new pre-processor for <code>input_file_name</code> that will look for included files in <code>include_path</code>\n"],["new","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-c-new","(*parts)","<p>Creates a new Raw containing <code>parts</code>\n"],["new","RDoc::Markup::RegexpHandling","classes/RDoc/Markup/RegexpHandling.html#method-c-new","(type, text)","<p>Creates a new regexp handling sequence of <code>type</code> with <code>text</code>\n"],["new","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-c-new","(markup = nil)","<p>Creates a new ToAnsi visitor that is ready to output vibrant ANSI color!\n"],["new","RDoc::Markup::ToBs","classes/RDoc/Markup/ToBs.html#method-c-new","(markup = nil)","<p>Returns a new ToBs that is ready for hot backspace action!\n"],["new","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-c-new","(options, markup = nil)","<p>Creates a new formatter that will output HTML\n"],["new","RDoc::Markup::ToHtmlCrossref","classes/RDoc/Markup/ToHtmlCrossref.html#method-c-new","(options, from_path, context, markup = nil)","<p>Creates a new crossref resolver that generates links relative to <code>context</code> which lives at <code>from_path</code> in …\n"],["new","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-c-new","(options, characters = 100, paragraphs = 3, markup = nil)","<p>Creates a new ToHtmlSnippet formatter that will cut off the input on the next word boundary after the …\n"],["new","RDoc::Markup::ToLabel","classes/RDoc/Markup/ToLabel.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output HTML-safe labels\n"],["new","RDoc::Markup::ToMarkdown","classes/RDoc/Markup/ToMarkdown.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output Markdown format text\n"],["new","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-c-new","(markup = nil)","<p>Creates a new formatter that will output (mostly) RDoc markup\n"],["new","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-c-new","(markup = nil)","<p>Creates a new tt-only formatter.\n"],["new","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or attribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Mixin","classes/RDoc/Mixin.html#method-c-new","(name, comment)","<p>Creates a new Mixin for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Parser","classes/RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>, <code>file_name</code>, <code>content</code>, <code>options</code> and <code>stats</code> in instance variables. …\n"],["new","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepares for parsing a C file.  See RDoc::Parser#initialize for details on the arguments.\n"],["new","RDoc::Parser::RipperStateLex","classes/RDoc/Parser/RipperStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-c-new","(code)",""],["new","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Ruby parser.\n"],["new","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Prepare to parse a plain file\n"],["new","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-c-new","()","<p>Creates a new RDoc::RD::BlockParser.  Use #parse to parse an rd-format document.\n"],["new","RDoc::RD::Inline","classes/RDoc/RD/Inline.html#method-c-new","(rdoc, reference = rdoc)","<p>Creates a new Inline for <code>rdoc</code> and <code>reference</code>.\n<p><code>rdoc</code> may be another Inline or a String.  If <code>reference</code> is …\n"],["new","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-c-new","(block_parser)","<p>Creates a new parser for inline markup in the rd format.  The <code>block_parser</code> is used to for footnotes and …\n"],["new","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and generate documentation.\n"],["new","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-new","(initial_options = {})","<p>Creates a new driver using <code>initial_options</code> from ::process_args\n"],["new","RDoc::RI::Task","classes/RDoc/RI/Task.html#method-c-new","(name = DEFAULT_NAMES)","<p>Create an ri task with the given name. See RDoc::Task for documentation on setting names.\n"],["new","RDoc::Require","classes/RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with <code>comment</code>\n"],["new","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri data generation can be enabled or disabled …\n"],["new","RDoc::Servlet","classes/RDoc/Servlet.html#method-c-new","(server, stores, cache, mount_path = nil, extra_doc_dirs = [])","<p>Creates a new WEBrick servlet.\n<p>Use <code>mount_path</code> when mounting the servlet somewhere other than /.\n<p>Use <code>extra_doc_dirs</code> …\n"],["new","RDoc::Stats","classes/RDoc/Stats.html#method-c-new","(store, num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>.  <code>verbosity</code> defaults to 1 which will create an RDoc::Stats::Normal …\n"],["new","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-c-new","(num_files)","<p>Creates a new Quiet that will print nothing\n"],["new","RDoc::Store","classes/RDoc/Store.html#method-c-new","(path = nil, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to <code>path</code>\n"],["new","RDoc::Store::MissingFileError","classes/RDoc/Store/MissingFileError.html#method-c-new","(store, file, name)","<p>Creates a new MissingFileError for the missing <code>file</code> for the given <code>name</code> that should have been in the  …\n"],["new","RDoc::Task","classes/RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview for documentation.\n"],["new","RDoc::Task","classes/RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview for documentation.\n"],["new","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-new","(absolute_name, relative_name = absolute_name)","<p>Creates a new TopLevel for the file at <code>absolute_name</code>.  If documentation is being generated outside the …\n"],["new","RSpec::Core::BacktraceFormatter","classes/RSpec/Core/BacktraceFormatter.html#method-c-new","()",""],["new","RSpec::Core::Bisect::Channel","classes/RSpec/Core/Bisect/Channel.html#method-c-new","()",""],["new","RSpec::Core::Bisect::Coordinator","classes/RSpec/Core/Bisect/Coordinator.html#method-c-new","(spec_runner, original_cli_args, formatter)",""],["new","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-c-new","(shell_command, runner, notifier)",""],["new","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-c-new","(shell_command, spec_runner)",""],["new","RSpec::Core::Bisect::ForkRunner::RunDispatcher","classes/RSpec/Core/Bisect/ForkRunner/RunDispatcher.html#method-c-new","(runner, channel)",""],["new","RSpec::Core::Bisect::Notifier","classes/RSpec/Core/Bisect/Notifier.html#method-c-new","(formatter)",""],["new","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-c-new","(original_cli_args)",""],["new","RSpec::Core::Bisect::ShellRunner","classes/RSpec/Core/Bisect/ShellRunner.html#method-c-new","(server, shell_command)",""],["new","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-c-new","()","<p>Build an object to store runtime configuration options and set defaults\n"],["new","RSpec::Core::Configuration::DeprecationReporterBuffer","classes/RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-c-new","()",""],["new","RSpec::Core::ConfigurationOptions","classes/RSpec/Core/ConfigurationOptions.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] command line arguments\n"],["new","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-c-new","(submitted_options, filter_manager)",""],["new","RSpec::Core::DRbRunner","classes/RSpec/Core/DRbRunner.html#method-c-new","(options, configuration=RSpec.configuration)",""],["new","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-c-new","(example_group_class, description, user_metadata, example_block=nil)","<p>Creates a new instance of Example. @param example_group_class [Class] the subclass of ExampleGroup in …\n"],["new","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-c-new","(example, &block)",""],["new","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-new","(inspect_output=nil)",""],["new","RSpec::Core::ExampleStatusDumper","classes/RSpec/Core/ExampleStatusDumper.html#method-c-new","(examples)",""],["new","RSpec::Core::ExampleStatusMerger","classes/RSpec/Core/ExampleStatusMerger.html#method-c-new","(this_run, from_previous_runs)",""],["new","RSpec::Core::ExampleStatusParser","classes/RSpec/Core/ExampleStatusParser.html#method-c-new","(string)",""],["new","RSpec::Core::ExampleStatusPersister","classes/RSpec/Core/ExampleStatusPersister.html#method-c-new","(examples, file_name)",""],["new","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-c-new","()",""],["new","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-c-new","(rules={})",""],["new","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-c-new","(rules={})",""],["new","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-c-new","(applies_predicate)",""],["new","RSpec::Core::FilterableItemRepository::UpdateOptimized","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-c-new","(applies_predicate)",""],["new","RSpec::Core::Formatters::BaseBisectFormatter","classes/RSpec/Core/Formatters/BaseBisectFormatter.html#method-c-new","(expected_failures)",""],["new","RSpec::Core::Formatters::BaseFormatter","classes/RSpec/Core/Formatters/BaseFormatter.html#method-c-new","(output)","<p>@api public @param output [IO] the formatter output @see RSpec::Core::Formatters::Protocol#initialize …\n"],["new","RSpec::Core::Formatters::BisectDRbFormatter","classes/RSpec/Core/Formatters/BisectDRbFormatter.html#method-c-new","(_output)",""],["new","RSpec::Core::Formatters::BisectProgressFormatter","classes/RSpec/Core/Formatters/BisectProgressFormatter.html#method-c-new","(output, bisect_runner)",""],["new","RSpec::Core::Formatters::DeprecationFormatter","classes/RSpec/Core/Formatters/DeprecationFormatter.html#method-c-new","(deprecation_stream, summary_stream)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-c-new","(deprecation_stream, summary_stream, deprecation_formatter)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::FileStream","classes/RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-c-new","(file)",""],["new","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-c-new","(deprecation_stream, summary_stream, deprecation_formatter)",""],["new","RSpec::Core::Formatters::DocumentationFormatter","classes/RSpec/Core/Formatters/DocumentationFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::ExceptionPresenter","classes/RSpec/Core/Formatters/ExceptionPresenter.html#method-c-new","(exception, example, options={})",""],["new","RSpec::Core::Formatters::ExceptionPresenter::Factory","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory.html#method-c-new","(example)",""],["new","RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html#method-c-new","(parent)",""],["new","RSpec::Core::Formatters::FallbackMessageFormatter","classes/RSpec/Core/Formatters/FallbackMessageFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::Loader","classes/RSpec/Core/Formatters/Loader.html#method-c-new","(reporter)","<p>@api private\n"],["new","RSpec::Core::Formatters::ProfileFormatter","classes/RSpec/Core/Formatters/ProfileFormatter.html#method-c-new","(output)",""],["new","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-c-new","(source, beginning_line_number, max_line_count=nil)",""],["new","RSpec::Core::Formatters::SyntaxHighlighter","classes/RSpec/Core/Formatters/SyntaxHighlighter.html#method-c-new","(configuration)",""],["new","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-c-new","(owner, filterable_item_repo_class)",""],["new","RSpec::Core::LegacyExampleGroupHash","classes/RSpec/Core/LegacyExampleGroupHash.html#method-c-new","(metadata)",""],["new","RSpec::Core::MemoizedHelpers","classes/RSpec/Core/MemoizedHelpers.html#method-c-new","(*)","<p>@private\n"],["new","RSpec::Core::MemoizedHelpers::NonThreadSafeMemoized","classes/RSpec/Core/MemoizedHelpers/NonThreadSafeMemoized.html#method-c-new","()",""],["new","RSpec::Core::MemoizedHelpers::ThreadsafeMemoized","classes/RSpec/Core/MemoizedHelpers/ThreadsafeMemoized.html#method-c-new","()",""],["new","RSpec::Core::Metadata::HashPopulator","classes/RSpec/Core/Metadata/HashPopulator.html#method-c-new","(metadata, user_metadata, index_provider, description_args, block)",""],["new","RSpec::Core::MultipleExceptionError","classes/RSpec/Core/MultipleExceptionError.html#method-c-new","(*exceptions)","<p>@param exceptions [Array&lt;Exception&gt;] The initial list of exceptions.\n"],["new","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-c-new","(reporter)",""],["new","RSpec::Core::Notifications::FailedExampleNotification","classes/RSpec/Core/Notifications/FailedExampleNotification.html#method-c-new","(example, exception_presenter=Formatters::ExceptionPresenter::Factory.new(example).build)",""],["new","RSpec::Core::Notifications::ProfileNotification","classes/RSpec/Core/Notifications/ProfileNotification.html#method-c-new","(duration, examples, number_of_examples, example_groups)",""],["new","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-c-new","()",""],["new","RSpec::Core::Ordering::Custom","classes/RSpec/Core/Ordering/Custom.html#method-c-new","(callable)",""],["new","RSpec::Core::Ordering::Random","classes/RSpec/Core/Ordering/Random.html#method-c-new","(configuration)",""],["new","RSpec::Core::Ordering::Registry","classes/RSpec/Core/Ordering/Registry.html#method-c-new","(configuration)",""],["new","RSpec::Core::OutputWrapper","classes/RSpec/Core/OutputWrapper.html#method-c-new","(output)","<p>@private\n"],["new","RSpec::Core::Parser","classes/RSpec/Core/Parser.html#method-c-new","(original_args)",""],["new","RSpec::Core::Pending::SkipDeclaredInExample","classes/RSpec/Core/Pending/SkipDeclaredInExample.html#method-c-new","(argument)",""],["new","RSpec::Core::Profiler","classes/RSpec/Core/Profiler.html#method-c-new","()",""],["new","RSpec::Core::ProjectInitializer","classes/RSpec/Core/ProjectInitializer.html#method-c-new","(opts={})",""],["new","RSpec::Core::RakeTask","classes/RSpec/Core/RakeTask.html#method-c-new","(*args, &task_block)",""],["new","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-c-new","(configuration)",""],["new","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-new","(options, configuration=RSpec.configuration, world=RSpec.world)",""],["new","RSpec::Core::Set","classes/RSpec/Core/Set.html#method-c-new","(array=[])",""],["new","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-new","(shared_group_name, inclusion_location)",""],["new","RSpec::Core::SharedExampleGroupModule","classes/RSpec/Core/SharedExampleGroupModule.html#method-c-new","(description, definition, metadata)",""],["new","RSpec::Core::SuiteHookContext","classes/RSpec/Core/SuiteHookContext.html#method-c-new","(hook_description, reporter)",""],["new","RSpec::Core::World","classes/RSpec/Core/World.html#method-c-new","(configuration=RSpec.configuration)",""],["new","RSpec::Expectations::BlockSnippetExtractor","classes/RSpec/Expectations/BlockSnippetExtractor.html#method-c-new","(proc, method_name)",""],["new","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-c-new","()",""],["new","RSpec::Expectations::ExpectationTarget","classes/RSpec/Expectations/ExpectationTarget.html#method-c-new","(value)","<p>@api private\n"],["new","RSpec::Expectations::FailureAggregator","classes/RSpec/Expectations/FailureAggregator.html#method-c-new","(block_label, metadata)",""],["new","RSpec::Expectations::LegacyMatcherAdapter","classes/RSpec/Expectations/LegacyMatcherAdapter.html#method-c-new","(matcher)",""],["new","RSpec::Expectations::LegacyMatcherAdapter","classes/RSpec/Expectations/LegacyMatcherAdapter.html#method-c-new","(matcher)",""],["new","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-c-new","(failure_aggregator)",""],["new","RSpec::Matchers::AliasedMatcher","classes/RSpec/Matchers/AliasedMatcher.html#method-c-new","(base_matcher, description_block)",""],["new","RSpec::Matchers::BuiltIn::All","classes/RSpec/Matchers/BuiltIn/All.html#method-c-new","(matcher)",""],["new","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-c-new","(expected=UNDEFINED)",""],["new","RSpec::Matchers::BuiltIn::Be","classes/RSpec/Matchers/BuiltIn/Be.html#method-c-new","(*args)",""],["new","RSpec::Matchers::BuiltIn::BeBetween","classes/RSpec/Matchers/BuiltIn/BeBetween.html#method-c-new","(min, max)",""],["new","RSpec::Matchers::BuiltIn::BeComparedTo","classes/RSpec/Matchers/BuiltIn/BeComparedTo.html#method-c-new","(operand, operator)",""],["new","RSpec::Matchers::BuiltIn::BePredicate","classes/RSpec/Matchers/BuiltIn/BePredicate.html#method-c-new","(*args, &block)",""],["new","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-c-new","(delta)",""],["new","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-c-new","(receiver=nil, message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::ChangeDetails","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html#method-c-new","(matcher_name, receiver=nil, message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::ChangeFromValue","classes/RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-c-new","(change_details, expected_before)",""],["new","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-c-new","(change_details, expected_delta, relativity, &comparer)",""],["new","RSpec::Matchers::BuiltIn::ChangeToValue","classes/RSpec/Matchers/BuiltIn/ChangeToValue.html#method-c-new","(change_details, expected_after)",""],["new","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-c-new","(matcher_1, matcher_2)",""],["new","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","classes/RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-c-new","(actual, matcher_1, matcher_2)",""],["new","RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","classes/RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html#method-c-new","(actual, *)",""],["new","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","classes/RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-c-new","(expected_to_actual_matched_indexes, actual_to_expected_matched_indexes)",""],["new","RSpec::Matchers::BuiltIn::Cover","classes/RSpec/Matchers/BuiltIn/Cover.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Exist","classes/RSpec/Matchers/BuiltIn/Exist.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Has","classes/RSpec/Matchers/BuiltIn/Has.html#method-c-new","(method_name, *args, &block)",""],["new","RSpec::Matchers::BuiltIn::HaveAttributes","classes/RSpec/Matchers/BuiltIn/HaveAttributes.html#method-c-new","(expected)",""],["new","RSpec::Matchers::BuiltIn::Include","classes/RSpec/Matchers/BuiltIn/Include.html#method-c-new","(*expecteds)",""],["new","RSpec::Matchers::BuiltIn::Match","classes/RSpec/Matchers/BuiltIn/Match.html#method-c-new","(expected)",""],["new","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-new","(actual)",""],["new","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-c-new","(expected)",""],["new","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-c-new","(expected_error_or_message=nil, expected_message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::ReliableMatchData","classes/RSpec/Matchers/BuiltIn/ReliableMatchData.html#method-c-new","(match_data)",""],["new","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-c-new","(*names)",""],["new","RSpec::Matchers::BuiltIn::Satisfy","classes/RSpec/Matchers/BuiltIn/Satisfy.html#method-c-new","(description=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::SpecificValuesChange","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-c-new","(change_details, from, to)",""],["new","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::StartOrEndWith","classes/RSpec/Matchers/BuiltIn/StartOrEndWith.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-c-new","(expected_symbol=nil, expected_arg=nil)",""],["new","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-c-new","()",""],["new","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-c-new","(block, &callback)",""],["new","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-c-new","(*args)",""],["new","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-c-new","(*args)",""],["new","RSpec::Matchers::DSL::Matcher","classes/RSpec/Matchers/DSL/Matcher.html#method-c-new","(name, declarations, matcher_execution_context, *expected, &block_arg)","<p>@api private\n"],["new","RSpec::Matchers::ExpectedsForMultipleDiffs","classes/RSpec/Matchers/ExpectedsForMultipleDiffs.html#method-c-new","(expected_list)",""],["new","RSpec::Matchers::MatcherDelegator","classes/RSpec/Matchers/MatcherDelegator.html#method-c-new","(base_matcher)",""],["new","RSpec::Mocks::AndReturnImplementation","classes/RSpec/Mocks/AndReturnImplementation.html#method-c-new","(values_to_return)",""],["new","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-c-new","(method, block)",""],["new","RSpec::Mocks::AndYieldImplementation","classes/RSpec/Mocks/AndYieldImplementation.html#method-c-new","(args_to_yield, eval_context, error_generator)",""],["new","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-c-new","(recorder, *args, &block)",""],["new","RSpec::Mocks::AnyInstance::ExpectChainChain","classes/RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-c-new","(*args)",""],["new","RSpec::Mocks::AnyInstance::ExpectationChain","classes/RSpec/Mocks/AnyInstance/ExpectationChain.html#method-c-new","(*args, &block)",""],["new","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","classes/RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-c-new","(targets)",""],["new","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-c-new","()",""],["new","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-c-new","(recorder, target_proxies)",""],["new","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-c-new","(klass)",""],["new","RSpec::Mocks::AnyInstance::StubChainChain","classes/RSpec/Mocks/AnyInstance/StubChainChain.html#method-c-new","(*args)",""],["new","RSpec::Mocks::ArgumentListMatcher","classes/RSpec/Mocks/ArgumentListMatcher.html#method-c-new","(*expected_args)","<p>@api public @param [Array] expected_args a list of expected literals and/or argument matchers\n<p>Initializes …\n"],["new","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","classes/RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","classes/RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","classes/RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-c-new","(*methods_to_respond_to)",""],["new","RSpec::Mocks::ArgumentMatchers::InstanceOf","classes/RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::ArgumentMatchers::KindOf","classes/RSpec/Mocks/ArgumentMatchers/KindOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-c-new","()",""],["new","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-c-new","(name)","<p>@api private\n"],["new","RSpec::Mocks::ConstantMutator::BaseMutator","classes/RSpec/Mocks/ConstantMutator/BaseMutator.html#method-c-new","(full_constant_name, mutated_value, transfer_nested_constants)",""],["new","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-c-new","(*args)",""],["new","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-c-new","(object)","<p>@param object [Object] the object to which this refers\n"],["new","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-c-new","(target=nil)",""],["new","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-c-new","(object, method)",""],["new","RSpec::Mocks::Matchers::ExpectationCustomization","classes/RSpec/Mocks/Matchers/ExpectationCustomization.html#method-c-new","(method_name, args, block)",""],["new","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-c-new","(method_name, &block)",""],["new","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-c-new","(message, block)",""],["new","RSpec::Mocks::Matchers::Receive::DefaultDescribable","classes/RSpec/Mocks/Matchers/Receive/DefaultDescribable.html#method-c-new","(message)",""],["new","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-c-new","(chain, &block)",""],["new","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-c-new","(message_return_value_hash)",""],["new","RSpec::Mocks::MessageChain","classes/RSpec/Mocks/MessageChain.html#method-c-new","(object, *chain, &blk)",""],["new","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-c-new","(error_generator, expectation_ordering, expected_from, method_double, type=:expectation, opts={}, &implementation_block)","<p>rubocop:disable Metrics/ParameterLists\n"],["new","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-c-new","(object, method_name, proxy)","<p>@private\n"],["new","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-c-new","(object_reference, method_name)",""],["new","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-c-new","(const_name)","<p>@param const_name [String] constant name\n"],["new","RSpec::Mocks::NestedSpace","classes/RSpec/Mocks/NestedSpace.html#method-c-new","(parent)",""],["new","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-c-new","()",""],["new","RSpec::Mocks::PartialClassDoubleProxyMethods","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html#method-c-new","(source_space, *args)",""],["new","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-c-new","(object, order_group, options={})","<p>@private\n"],["new","RSpec::Mocks::ProxyForNil","classes/RSpec/Mocks/ProxyForNil.html#method-c-new","(order_group)",""],["new","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-c-new","(message, response, error_generator, backtrace_line=nil)",""],["new","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-c-new","()",""],["new","RSpec::Mocks::TargetBase","classes/RSpec/Mocks/TargetBase.html#method-c-new","(target)",""],["new","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-c-new","(name=nil, stubs={})","<p>Creates a new test double with a `name` (that will be used in error messages only)\n"],["new","RSpec::Mocks::VerifyingDouble","classes/RSpec/Mocks/VerifyingDouble.html#method-c-new","(doubled_module, *args)",""],["new","RSpec::Mocks::VerifyingExistingMethodDouble","classes/RSpec/Mocks/VerifyingExistingMethodDouble.html#method-c-new","(object, method_name, proxy)",""],["new","RSpec::Mocks::VerifyingMessageExpectation","classes/RSpec/Mocks/VerifyingMessageExpectation.html#method-c-new","(*args)",""],["new","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-c-new","(object, method_name, proxy, method_reference)",""],["new","RSpec::Mocks::VerifyingPartialDoubleProxy","classes/RSpec/Mocks/VerifyingPartialDoubleProxy.html#method-c-new","(object, expectation_ordering, optional_callback_invocation_strategy=DEFAULT_CALLBACK_INVOCATION_STRATEGY)",""],["new","RSpec::Mocks::VerifyingProxy","classes/RSpec/Mocks/VerifyingProxy.html#method-c-new","(object, order_group, doubled_module, method_reference_class)",""],["new","RSpec::Support::ComparableVersion","classes/RSpec/Support/ComparableVersion.html#method-c-new","(string)",""],["new","RSpec::Support::Differ","classes/RSpec/Support/Differ.html#method-c-new","(opts={})",""],["new","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-c-new","(string, encoding=nil)",""],["new","RSpec::Support::HunkGenerator","classes/RSpec/Support/HunkGenerator.html#method-c-new","(actual, expected)",""],["new","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-c-new","(signature)",""],["new","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-c-new","(method)",""],["new","RSpec::Support::MethodSignatureExpectation","classes/RSpec/Support/MethodSignatureExpectation.html#method-c-new","()",""],["new","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-c-new","(signature, args=[])",""],["new","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-c-new","(signature, args=[])",""],["new","RSpec::Support::Mutex","classes/RSpec/Support/Mutex.html#method-c-new","()",""],["new","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-c-new","(max_formatted_output_length=200)",""],["new","RSpec::Support::ReentrantMutex","classes/RSpec/Support/ReentrantMutex.html#method-c-new","()",""],["new","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-c-new","(source_string, path=nil)",""],["new","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-c-new","(ripper_sexp, parent=nil)",""],["new","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-c-new","(ripper_token)",""],["new","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-c-new","(original)",""],["new","Rake::Application","classes/Rake/Application.html#method-c-new","()","<p>Initialize a Rake::Application object.\n"],["new","Rake::FileList","classes/Rake/FileList.html#method-c-new","(*patterns)","<p>Create a file list from the globbable patterns given.  If you wish to perform multiple includes or excludes …\n"],["new","Rake::FileList","classes/Rake/FileList.html#method-c-new","(*patterns)","<p>Create a file list from the globbable patterns given.  If you wish to perform multiple includes or excludes …\n"],["new","Rake::LinkedList","classes/Rake/LinkedList.html#method-c-new","(head, tail=EMPTY)",""],["new","Rake::LinkedList::EmptyLinkedList","classes/Rake/LinkedList/EmptyLinkedList.html#method-c-new","()",""],["new","Rake::NameSpace","classes/Rake/NameSpace.html#method-c-new","(task_manager, scope_list)","<p>Create a namespace lookup object using the given task manager and the list of scopes.\n"],["new","Rake::PackageTask","classes/Rake/PackageTask.html#method-c-new","(name=nil, version=nil)","<p>Create a Package Task with the given name and version.  Use <code>:noversion</code> as the version to build a package …\n"],["new","Rake::RuleRecursionOverflowError","classes/Rake/RuleRecursionOverflowError.html#method-c-new","(*args)",""],["new","Rake::Task","classes/Rake/Task.html#method-c-new","(task_name, app)","<p>Create a task named <code>task_name</code> with no actions or prerequisites. Use <code>enhance</code> to add actions and prerequisites. …\n"],["new","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-c-new","(names, values, parent=nil)","<p>Create a TaskArgument object with a list of argument <code>names</code> and a set of associated <code>values</code>.  <code>parent</code> is …\n"],["new","Rake::TestTask","classes/Rake/TestTask.html#method-c-new","(name=:test)","<p>Create a testing task.\n"],["new","SDoc::Merge","classes/SDoc/Merge.html#method-c-new","()",""],["new","TestPrivateAttrs::Sample","classes/TestPrivateAttrs/Sample.html#method-c-new","()",""],["new","TestRakeFileUtils::BadLink","classes/TestRakeFileUtils/BadLink.html#method-c-new","(klass)",""],["new","TestTraceOutput::PrintSpy","classes/TestTraceOutput/PrintSpy.html#method-c-new","()",""],["new_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-new_comment","(comment)","<p>Creates a comment with the correct format\n"],["new_rspec_prepended_module","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-new_rspec_prepended_module","()",""],["new_scope","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-new_scope","()",""],["new_scope","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-new_scope","()",""],["new_scope","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-new_scope","(names)","<p>Create a new argument scope using the prerequisite argument names.\n"],["next_runnable_index_for","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-next_runnable_index_for","(file)","<p>@private\n"],["next_token","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-next_token","()","<p>Returns the next token from the inline text\n"],["next_words_on_error","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-next_words_on_error","()","<p>Returns words following an error\n"],["no_args","RSpec::Mocks::ArgumentMatchers","classes/RSpec/Mocks/ArgumentMatchers.html#method-i-no_args","()","<p>Matches no arguments.\n<p>@example\n\n<pre><code>expect(object).to receive(:message).with(no_args)\n</code></pre>\n"],["nodes_by_line_number","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-nodes_by_line_number","()",""],["nodoc","RDoc::Stats::Verbose","classes/RDoc/Stats/Verbose.html#method-i-nodoc","(co)","<p>Returns a marker for RDoc::CodeObject <code>co</code> being undocumented\n"],["non_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another class or module. For use by formatters …\n"],["non_example_failure","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-non_example_failure","()",""],["non_example_failure=","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-non_example_failure-3D","(_)",""],["non_kw_args_arity_description","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-i-non_kw_args_arity_description","()",""],["non_kw_args_arity_description","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-non_kw_args_arity_description","()",""],["non_mri?","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-non_mri-3F","()",""],["normalize","RDoc::Comment","classes/RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-normalize","()","<p>Collapses 3+ newlines into two newlines\n"],["normalize_comment","RDoc::Text","classes/RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalize_const_name","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-normalize_const_name","(const_name)",""],["normalized_file_list","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files they contain.\n<p>If <code>force_doc</code> …\n"],["not_found","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-not_found","(generator, req, res, message = nil)","<p>Returns a 404 page built by <code>generator</code> for <code>req</code> on <code>res</code>.\n"],["not_to","Object","classes/Object.html#method-i-not_to","(*args)",""],["not_to","RSpec::Expectations::BlockExpectationTarget","classes/RSpec/Expectations/BlockExpectationTarget.html#method-i-not_to","(matcher, message=nil, &block)",""],["not_to","RSpec::Expectations::ExpectationTarget::InstanceMethods","classes/RSpec/Expectations/ExpectationTarget/InstanceMethods.html#method-i-not_to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns false. @example\n\n<pre><code>expect(value).not_to eq(5)\n</code></pre>\n<p>@param …\n"],["note","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-note","(label)","<p>Stores <code>label</code> as a note and fills in previously unknown note references.\n"],["note_for","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-note_for","(ref)","<p>Creates a new link for the footnote <code>reference</code> and adds the reference to\nthe note order list for proper ...\n"],["notes","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-notes","","<p>Enables the notes extension\n"],["notifications","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::ExampleNotification&gt;]\n\n<pre><code>returns examples as notifications\n</code></pre>\n"],["notify","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-notify","(event, notification)","<p>@private\n"],["notify_failure","RSpec::Support","classes/RSpec/Support.html#method-c-notify_failure","(failure, options={})","<p>@api private\n"],["notify_non_example_exception","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-notify_non_example_exception","(exception, context_description)","<p>@private Provides a way to notify of an exception that is not tied to any particular example (such as …\n"],["notify_received_message","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-notify_received_message","(_object, message, args, _blk)","<p>@private\n"],["notify_results","RSpec::Core::Formatters::BisectDRbFormatter","classes/RSpec/Core/Formatters/BisectDRbFormatter.html#method-i-notify_results","(results)",""],["now","FakeDate","classes/FakeDate.html#method-c-now","()",""],["nowrite","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["nowrite","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-nowrite","(value=nil)","<p>Get/set the nowrite flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["null_object?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-null_object-3F","()","<p>@private\n"],["null_object?","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-null_object-3F","()",""],["null_object?","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-null_object-3F","()","<p>Returns true if this object has received `as_null_object`\n"],["num_example_groups_defined_in","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-num_example_groups_defined_in","(file)","<p>@private\n"],["object_class","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["object_double","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-object_double","(object_or_name, *args)","<p>@overload object_double(object_or_name)\n\n<pre><code>@param object_or_name [String, Object]\n</code></pre>\n<p>@overload object_double …\n"],["object_singleton_class","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-object_singleton_class","()","<p>@private\n"],["object_spy","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-object_spy","(*args)","<p>@overload object_spy(object_or_name)\n\n<pre><code>@param object_or_name [String, Object]\n</code></pre>\n<p>@overload object_spy(object_or_name, …\n"],["of","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-of","(expected)","<p>@api public Sets the expected value.\n"],["off_tags","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-off_tags","(res, item)","<p>Turns off tags for <code>item</code> on <code>res</code>\n"],["off_tags","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-off_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See RDoc::Markup::Formatter.\n"],["on_CHAR","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_CHAR","(tok, data)",""],["on_backref","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_backref","(tok, data)",""],["on_comma","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comma","(tok, data)",""],["on_comment","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_comment","(tok, data)",""],["on_const","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_const","(tok, data)",""],["on_cvar","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_cvar","(tok, data)",""],["on_default","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_default","(event, tok, data)",""],["on_error","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-on_error","(et, ev, _values)","<p>Raises a ParseError when invalid formatting is found\n"],["on_error","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-on_error","(et, ev, values)","<p>Raises a ParseError when invalid formatting is found\n"],["on_example_group_definition","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-on_example_group_definition","(&block)","<p>Invokes block before defining an example group\n"],["on_example_group_definition_callbacks","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-on_example_group_definition_callbacks","()","<p>@api private Returns an array of blocks to call before defining an example group\n"],["on_float","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_float","(tok, data)",""],["on_gvar","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_gvar","(tok, data)",""],["on_heredoc_beg","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_beg","(tok, data)",""],["on_heredoc_end","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_heredoc_end","(tok, data)",""],["on_ident","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ident","(tok, data)",""],["on_ignored_nl","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_nl","(tok, data)",""],["on_ignored_sp","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ignored_sp","(tok, data)",""],["on_imaginary","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_imaginary","(tok, data)",""],["on_int","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_int","(tok, data)",""],["on_ivar","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_ivar","(tok, data)",""],["on_kw","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_kw","(tok, data)",""],["on_lbrace","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbrace","(tok, data)",""],["on_lbracket","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lbracket","(tok, data)",""],["on_lparen","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_lparen","(tok, data)",""],["on_nl","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_nl","(tok, data)",""],["on_op","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_op","(tok, data)",""],["on_period","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_period","(tok, data)",""],["on_potential_false_positives=","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-on_potential_false_positives-3D","(behavior)","<p>Configures what RSpec will do about matcher use which will potentially cause false positives in tests. …\n"],["on_rational","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rational","(tok, data)",""],["on_rbrace","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbrace","(tok, data)",""],["on_rbracket","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rbracket","(tok, data)",""],["on_rparen","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_rparen","(tok, data)",""],["on_sp","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_sp","(tok, data)",""],["on_symbeg","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_symbeg","(tok, data)",""],["on_tags","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-on_tags","(res, item)","<p>Turns on tags for <code>item</code> on <code>res</code>\n"],["on_tags","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-on_tags","(res, item)","<p>Maintains a bitmask to allow HTML elements to be closed properly.  See RDoc::Markup::Formatter.\n"],["on_tstring_beg","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_beg","(tok, data)",""],["on_tstring_end","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-on_tstring_end","(tok, data)",""],["once","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-once","()","<p>@api public Specifies that the method is expected to yield once.\n"],["once","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-once","(&block)","<p>Expect a message to be received exactly one time.\n<p>@return [MessageExpectation] self, to support further …\n"],["ongoing_visibility=","RDoc::Context","classes/RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["only_failures_but_not_configured?","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-only_failures_but_not_configured-3F","()","<p>@private\n"],["op","LCS::Block","classes/LCS/Block.html#method-i-op","()",""],["opening?","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-opening-3F","()",""],["opposite_should_method","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#method-c-opposite_should_method","()",""],["opposite_should_method","RSpec::Expectations::PositiveExpectationHandler","classes/RSpec/Expectations/PositiveExpectationHandler.html#method-c-opposite_should_method","()",""],["option_list","RDoc::Task","classes/RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["option_list","RDoc::Task","classes/RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["optional_and_splat_args_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-optional_and_splat_args_supported-3F","()",""],["options","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-options","()","<p>The options instance from the store this CodeObject is attached to, or a default options instance if …\n"],["options","RSpec::Core::DRbOptions","classes/RSpec/Core/DRbOptions.html#method-i-options","()",""],["options","Rake::Application","classes/Rake/Application.html#method-i-options","()","<p>Application options from the command line\n"],["opts","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-opts","()","<p>@private\n"],["or","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-i-or","(matcher)","<p>Creates a compound `or` expectation. The matcher will pass if either sub-matcher passes. This can be …\n"],["order","RSpec::Core::Ordering::Custom","classes/RSpec/Core/Ordering/Custom.html#method-i-order","(list)",""],["order","RSpec::Core::Ordering::Identity","classes/RSpec/Core/Ordering/Identity.html#method-i-order","(items)",""],["order","RSpec::Core::Ordering::Random","classes/RSpec/Core/Ordering/Random.html#method-i-order","(items)",""],["order=","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-i-order-3D","(type)",""],["ordered","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-ordered","(&block)","<p>Expect messages to be received in a specific order.\n<p>@return [MessageExpectation] self, to support further …\n"],["ordered?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-ordered-3F","()",""],["ordered_example_groups","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-ordered_example_groups","()","<p>@api private\n<p>Apply ordering strategy from configuration to example groups.\n"],["ordering_strategy","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-ordering_strategy","()","<p>@private\n"],["organize_ids","RSpec::Core::Formatters::Helpers","classes/RSpec/Core/Formatters/Helpers.html#method-c-organize_ids","(ids)","<p>@api private Given a list of example ids, organizes them into a compact, ordered list.\n"],["orig_initialize","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-orig_initialize","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>TODO remove when kpeg 0.10 is released\n"],["original","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-c-original","(name)","<p>Queries rspec-mocks to find out information about the named constant.\n<p>@param [String] name the name of …\n"],["original_dir","Rake","classes/Rake.html#method-c-original_dir","()","<p>Return the original directory where the Rake application was started.\n"],["original_implementation_callable","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-original_implementation_callable","()",""],["original_locations","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-i-original_locations","()",""],["original_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-original_method","()",""],["original_method_handle_for","RSpec::Mocks::PartialClassDoubleProxyMethods","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html#method-i-original_method_handle_for","(message)","<p>Consider this situation:\n\n<pre><code>class A; end\nclass B &lt; A; end\n\nallow(A).to receive(:new)\nexpect(B).to receive(:new).and_call_original\n</code></pre>\n"],["original_method_handle_for","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-original_method_handle_for","(message)",""],["original_method_handle_for","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-original_method_handle_for","(_message)","<p>@private\n"],["original_results","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-i-original_results","()",""],["original_results","RSpec::Core::Bisect::ShellRunner","classes/RSpec/Core/Bisect/ShellRunner.html#method-i-original_results","()",""],["original_unbound_method_handle_from_ancestor_for","RSpec::Mocks::PartialClassDoubleProxyMethods","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html#method-i-original_unbound_method_handle_from_ancestor_for","(message)",""],["other_errors","RSpec::Expectations::FailureAggregator","classes/RSpec/Expectations/FailureAggregator.html#method-i-other_errors","()",""],["other_errors","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-other_errors","()","<p>@return [Array&lt;Exception&gt;] The list of other exceptions.\n"],["output","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-output","(expected=nil)","<p>With no arg, passes if the block outputs `to_stdout` or `to_stderr`. With a string, passes if the block …\n"],["output","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-output","()",""],["output_flag_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is used like <code>SomeClass.method_name</code> …\n"],["output_stream=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-output_stream-3D","(value)","<p>Set the output stream for reporter. @attr value [IO, String] IO to write to or filename to write to, …\n"],["overlaps?","LCS::Hunk","classes/LCS/Hunk.html#method-i-overlaps-3F","(hunk)","<p>Determines whether there is an overlap between this hunk and the provided hunk. This will be true if …\n"],["package_dir_path","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-package_dir_path","()","<p>The directory this package will be built in\n"],["package_name","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-package_name","()","<p>The name of this package\n"],["page","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-page","()","<p>Paginates output through a pager program.\n"],["page","RDoc::Store","classes/RDoc/Store.html#method-i-page","(name)","<p>Returns the RDoc::TopLevel that is a text file and has the given <code>name</code>\n"],["page_file","RDoc::Store","classes/RDoc/Store.html#method-i-page_file","(page_name)","<p>Path to the ri data for <code>page_name</code>\n"],["page_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["paging?","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-paging-3F","()","<p>Are we using a pager?\n"],["paragraph","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-paragraph","(parts)","<p>Creates an RDoc::Markup::Paragraph from <code>parts</code> and including\nextension-specific behavior\n"],["paragraph","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-paragraph","(value)","<p>Creates a paragraph for <code>value</code>\n"],["param_list","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method&#39;s method and yield parameters.  <code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method&#39;s parameters were given by <code>call-seq</code> it is preferred …\n"],["parent","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent","()","<p>Our parent CodeObject.  The parent may be missing for classes loaded from legacy RI data stores.\n"],["parent_file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_groups","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-parent_groups","()","<p>@private\n"],["parent_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parse","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document composed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","classes/RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is cached until the text is changed. …\n"],["parse","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-parse","()","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document composed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-parse","(markdown)","<p>Parses the <code>markdown</code> document into an RDoc::Document using the default\nextensions.\n"],["parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-parse","(markdown)","<p>Parses <code>markdown</code> into an RDoc::Document\n"],["parse","RDoc::Markup","classes/RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-parse","(str)","<p>Parses <code>str</code> into a Document.\n<p>Use RDoc::Markup#parse instead of this method.\n"],["parse","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-parse","(parent, indent = 0)","<p>Parses the tokens into an array of RDoc::Markup::XXX objects, and appends them to the passed <code>parent</code>  …\n"],["parse","RDoc::Options","classes/RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::Parser::RipperStateLex","classes/RDoc/Parser/RipperStateLex.html#method-c-parse","(code)",""],["parse","RDoc::RD","classes/RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If the <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::RD::BlockParser","classes/RDoc/RD/BlockParser.html#method-i-parse","(src)","<p>Parses <code>src</code> and returns an RDoc::Markup::Document.\n"],["parse","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-parse","(inline)","<p>Parses the <code>inline</code> text from RD format into RDoc format.\n"],["parse","RDoc::Text","classes/RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse","RSpec::Core::ExampleStatusParser","classes/RSpec/Core/ExampleStatusParser.html#method-c-parse","(string)",""],["parse","RSpec::Core::ExampleStatusParser","classes/RSpec/Core/ExampleStatusParser.html#method-i-parse","()",""],["parse","RSpec::Core::Parser","classes/RSpec/Core/Parser.html#method-c-parse","(args, source=nil)",""],["parse","RSpec::Core::Parser","classes/RSpec/Core/Parser.html#method-i-parse","(source=nil)",""],["parse_alias","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_alias","(context, single, tk, comment)","<p>Parses an <code>alias</code> in <code>context</code> with <code>comment</code>\n"],["parse_attr","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_attr","(context, single, tk, comment)","<p>Creates an RDoc::Attr for the name following <code>tk</code>, setting the comment to <code>comment</code>.\n"],["parse_attr_accessor","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_attr_accessor","(context, single, tk, comment)","<p>Creates an RDoc::Attr for each attribute listed after <code>tk</code>, setting the comment for each to <code>comment</code>.\n"],["parse_call_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_call_parameters","(tk)","<p>Extracts call parameters from the token stream.\n"],["parse_class","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_class","(container, single, tk, comment)","<p>Parses a class in <code>context</code> with <code>comment</code>\n"],["parse_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_comment","(container, tk, comment)","<p>Generates an RDoc::Method or RDoc::Attr from <code>comment</code> by looking for :method: or :attr: directives in …\n"],["parse_comment_tomdoc","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_comment_tomdoc","(container, tk, comment)","<p>Creates an RDoc::Method on <code>container</code> from <code>comment</code> if there is a Signature section in the comment\n"],["parse_constant","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_constant","(container, tk, comment, ignore_constants = false)","<p>Parses a constant in <code>context</code> with <code>comment</code>.  If <code>ignore_constants</code> is true, no found constants will be added …\n"],["parse_constant_visibility","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_constant_visibility","(container, single, tk)","<p>Parses a Module#private_constant or Module#public_constant call from <code>tk</code>.\n"],["parse_dot_doc_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns, representing candidates for documentation. …\n"],["parse_entries","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-parse_entries","()","<p>Parses the entries in the ChangeLog.\n<p>Returns an Array of each ChangeLog entry in order of parsing.\n<p>A ChangeLog …\n"],["parse_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","classes/RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_id","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-c-parse_id","(id)","<p>@private\n"],["parse_meta_attr","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_meta_attr","(context, single, tk, comment)","<p>Parses a meta-programmed attribute and creates an RDoc::Attr.\n<p>To create foo and bar attributes on class …\n"],["parse_meta_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_meta_method","(container, single, tk, comment)","<p>Parses a meta-programmed method\n"],["parse_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method","(container, single, tk, comment)","<p>Parses a normal method defined by <code>def</code>\n"],["parse_method_dummy","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_dummy","(container)","<p>Parses a method that needs to be ignored.\n"],["parse_method_or_yield_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_or_yield_parameters","(method = nil, modifiers = RDoc::METHOD_MODIFIERS)","<p>Extracts <code>yield</code> parameters from <code>method</code>\n"],["parse_method_parameters","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_parameters","(method)","<p>Capture the method&#39;s parameters. Along the way, look for a comment containing:\n\n<pre><code># yields: ....\n</code></pre>\n<p>and add …\n"],["parse_method_params_and_body","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_method_params_and_body","(container, single, meth, added_container)","<p>Parses the parameters and body of <code>meth</code>\n"],["parse_module","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_module","(container, single, tk, comment)","<p>Parses an RDoc::NormalModule in <code>container</code> with <code>comment</code>\n"],["parse_name","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-parse_name","(name)","<p>Extracts the class, selector and method name parts from <code>name</code> like Foo::Bar#baz.\n<p>NOTE: Given Foo::Bar, …\n"],["parse_options","SDoc::Merge","classes/SDoc/Merge.html#method-i-parse_options","(options)",""],["parse_require","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_require","(context, comment)","<p>Parses an RDoc::Require in <code>context</code> containing <code>comment</code>\n"],["parse_rescue","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_rescue","()","<p>Parses a rescue\n"],["parse_statements","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_statements","(container, single = NORMAL, current_method = nil, comment = new_comment(''))","<p>The core of the Ruby parser.\n"],["parse_symbol_arg","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_symbol_arg","(no = nil)","<p>Parse up to <code>no</code> symbol arguments\n"],["parse_symbol_in_arg","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_symbol_in_arg","()","<p>Returns symbol text from the next token\n"],["parse_top_level_statements","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_top_level_statements","(container)","<p>Parses statements in the top-level <code>container</code>\n"],["parse_url","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-parse_url","(url)","<p>Extracts and a scheme, url and an anchor id from <code>url</code> and returns them.\n"],["parse_visibility","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_visibility","(container, single, tk)","<p>Determines the visibility in <code>container</code> from <code>tk</code>\n"],["parse_yield","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-parse_yield","(context, single, tk, method)","<p>Determines the block parameter for <code>context</code>\n"],["parseable?","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-parseable-3F","(text)","<p>Returns true if text is valid ruby syntax\n"],["parser=","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-parser-3D","(val)",""],["patch","LCS","classes/LCS.html#method-i-patch","(patchset)","<p>Attempts to patch <code>self</code> with the provided <code>patchset</code>. A new sequence based on <code>self</code> and the <code>patchset</code> will …\n"],["patch","LCS","classes/LCS.html#method-c-patch","(src, patchset, direction = nil)","<p>Applies a <code>patchset</code> to the sequence <code>src</code> according to the <code>direction</code> (<code>:patch</code> or <code>:unpatch</code>), producing a new …\n"],["patch!","LCS","classes/LCS.html#method-i-patch-21","(patchset)","<p>Attempts to patch <code>self</code> with the provided <code>patchset</code>. A new sequence based on <code>self</code> and the <code>patchset</code> will …\n"],["patch!","LCS","classes/LCS.html#method-c-patch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the next version. Does no auto-discovery.\n"],["patch!","RSpec::Mocks::MarshalExtension","classes/RSpec/Mocks/MarshalExtension.html#method-c-patch-21","()",""],["patch_marshal_to_support_partial_doubles=","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-patch_marshal_to_support_partial_doubles-3D","(val)","<p>Monkey-patch `Marshal.dump` to enable dumping of mocked or stubbed objects. By default this will not …\n"],["patch_me","LCS","classes/LCS.html#method-i-patch_me","(patchset)","<p>Attempts to patch <code>self</code> with the provided <code>patchset</code>, using #patch!. If the sequence this is used on supports …\n"],["path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module for use with HTML generator output.\n"],["path","RDoc::Constant","classes/RDoc/Constant.html#method-i-path","()","<p>Path to this constant for use with HTML generator output.\n"],["path","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method for use with HTML generator output.\n"],["path","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-path","(system = true, site = true, home = true, gems = :latest, *extra_dirs)","<p>Returns existing directories from the selected documentation directories as an Array.\n<p>See also ::each …\n"],["path","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-path","()","<p>Path to this file for use with HTML generator output.\n"],["path_relative_to_repository","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-path_relative_to_repository","(path)",""],["path_to_executable","RSpec::Core","classes/RSpec/Core.html#method-c-path_to_executable","()","<p>@private path to executable file.\n"],["path_to_git_dir","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-path_to_git_dir","(path)",""],["pathmap","Pathname","classes/Pathname.html#method-i-pathmap","(spec=nil, &block)","<p>Apply the pathmap spec to the Pathname, returning a new Pathname with the modified paths.  (See String#pathmap …\n"],["pathmap","Rake::FileList","classes/Rake/FileList.html#method-i-pathmap","(spec=nil)","<p>Apply the pathmap spec to each of the included file names, returning a new file list with the modified …\n"],["pathmap","Rake::FileList","classes/Rake/FileList.html#method-i-pathmap","(spec=nil)","<p>Apply the pathmap spec to each of the included file names, returning a new file list with the modified …\n"],["pathmap","String","classes/String.html#method-i-pathmap","(spec=nil, &block)","<p>Map the path according to the given specification.  The specification controls the details of the mapping. …\n"],["pathmap_explode","String","classes/String.html#method-i-pathmap_explode","()","<p>Explode a path into individual components.  Used by <code>pathmap</code>.\n<p>This String extension comes from Rake\n"],["pathmap_partial","String","classes/String.html#method-i-pathmap_partial","(n)","<p>Extract a partial path from the path.  Include <code>n</code> directories from the front end (left hand side) if  …\n"],["pathmap_replace","String","classes/String.html#method-i-pathmap_replace","(patterns, &block)","<p>Perform the pathmap replacement operations on the given path. The patterns take the form &#39;pat1,rep1;pat2,rep2…&#39;. …\n"],["pattern=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-pattern-3D","(value)","<p>Set pattern to match files to load. @attr value [String] the filename pattern to filter spec files by …\n"],["peek_read","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-peek_read","()","<p>Peek equivalent for get_tkread\n"],["peek_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-peek_tk","()","<p>Peek at the next token, but don&#39;t remove it from the stream\n"],["peek_token","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-peek_token","()","<p>Returns the next token on the stream without modifying the stream\n"],["peg_parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-peg_parse","(markdown)","<p>The internal kpeg parse method\n"],["pending","RSpec::Core::Pending","classes/RSpec/Core/Pending.html#method-i-pending","(message=nil)","<p>@overload pending() @overload pending(message)\n<p>Marks an example as pending. The rest of the example will …\n"],["pending_count","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-pending_count","()","<p>@api @return [Fixnum] the number of pending examples\n"],["pending_examples","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-pending_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] list of pending examples\n"],["pending_notifications","RSpec::Core::Notifications::ExamplesNotification","classes/RSpec/Core/Notifications/ExamplesNotification.html#method-i-pending_notifications","()","<p>@return [Array&lt;RSpec::Core::Notifications::SkippedExampleNotification,\n\n<pre><code>        RSpec::Core::Notifications::PendingExampleFailedAsExpectedNotification&gt;] ...\n</code></pre>\n"],["percent_doc","RDoc::Stats","classes/RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["percent_of","RSpec::Matchers::BuiltIn::BeWithin","classes/RSpec/Matchers/BuiltIn/BeWithin.html#method-i-percent_of","(expected)","<p>@api public Sets the expected value, and makes the matcher do a percent comparison.\n"],["percentage","RSpec::Core::Notifications::ProfileNotification","classes/RSpec/Core/Notifications/ProfileNotification.html#method-i-percentage","()","<p>@return [String] the percentage of total time taken\n"],["perform_at_exit","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-perform_at_exit","()","<p>@private\n"],["perform_change","RSpec::Matchers::BuiltIn::ChangeDetails","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-perform_change","(event_proc)",""],["persist","RSpec::Core::ExampleStatusPersister","classes/RSpec/Core/ExampleStatusPersister.html#method-c-persist","(examples, file_name)",""],["persist","RSpec::Core::ExampleStatusPersister","classes/RSpec/Core/ExampleStatusPersister.html#method-i-persist","()",""],["pick_encoding","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-c-pick_encoding","(source_a, source_b)",""],["plain_html","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-plain_html","()","<p>The section&#39;s title, or &#39;Top Section&#39; if the title is nil.\n<p>This is used by the table of contents …\n"],["play_onto","RSpec::Core::Configuration::DeprecationReporterBuffer","classes/RSpec/Core/Configuration/DeprecationReporterBuffer.html#method-i-play_onto","(reporter)",""],["playback!","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-playback-21","(instance)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::ExpectChainChain","classes/RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-playback-21","(instance)",""],["playback!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback_onto","RSpec::Mocks::Matchers::ExpectationCustomization","classes/RSpec/Mocks/Matchers/ExpectationCustomization.html#method-i-playback_onto","(expectation)",""],["pluralize","RSpec::Core::Formatters::Helpers","classes/RSpec/Core/Formatters/Helpers.html#method-c-pluralize","(count, string)","<p>@api private\n<p>Pluralize a word based on a count.\n<p>@param count [Fixnum] number of objects @param string [String] …\n"],["pop_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["populate","RSpec::Core::Metadata::HashPopulator","classes/RSpec/Core/Metadata/HashPopulator.html#method-i-populate","()",""],["post_process","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-post_process","(&block)","<p>Adds a post-process handler for directives.  The handler will be called with the result RDoc::Comment …\n"],["post_process","RSpec::Core::Formatters::HtmlSnippetExtractor","classes/RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-post_process","(highlighted, offending_line)","<p>@api private\n<p>Adds line numbers to all lines and highlights the line where the failure occurred using html …\n"],["post_processors","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-post_processors","()","<p>Registered post-processors\n"],["preceding_declaration_line","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-preceding_declaration_line","(absolute_file_name, filter_line)","<p>@api private\n<p>Find line number of previous declaration.\n"],["prepare_array","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-prepare_array","(array)",""],["prepare_default","RSpec::Core::Formatters::Loader","classes/RSpec/Core/Formatters/Loader.html#method-i-prepare_default","(output_stream, deprecation_stream)","<p>@private\n"],["prepare_default","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-prepare_default","(loader, output_stream, deprecation_stream)","<p>@private\n"],["prepare_element","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-prepare_element","(element)",""],["prepare_example_filtering","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-prepare_example_filtering","()","<p>@api public\n<p>Prepares filters so that they apply to example groups when they run.\n<p>This is a separate method …\n"],["prepare_for_inspection","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-c-prepare_for_inspection","(object)",""],["prepare_for_inspection","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-prepare_for_inspection","(object)","<p>Prepares the provided object to be formatted by wrapping it as needed in something that, when `inspect` …\n"],["prepare_hash","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-prepare_hash","(input_hash)",""],["prepend","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-prepend","(mod, *filters)","<p>Tells RSpec to prepend example groups with `mod`. Methods defined in `mod` are exposed to examples (not …\n"],["prepend","RSpec::Core::FilterableItemRepository::QueryOptimized","classes/RSpec/Core/FilterableItemRepository/QueryOptimized.html#method-i-prepend","(item, metadata)",""],["prepend","RSpec::Core::FilterableItemRepository::UpdateOptimized","classes/RSpec/Core/FilterableItemRepository/UpdateOptimized.html#method-i-prepend","(item, metadata)",""],["prepend_after","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-prepend_after","(scope=nil, *meta, &block)",""],["prepend_after","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-prepend_after","(*args, &block)",""],["prepend_before","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-prepend_before","(scope=nil, *meta, &block)","<p>Adds `block` to the start of the list of `before` blocks in the same scope (`:example`, `:context`, or …\n"],["prepend_before","RSpec::Core::Hooks","classes/RSpec/Core/Hooks.html#method-i-prepend_before","(*args, &block)","<p>Adds `block` to the front of the list of `before` blocks in the same scope (`:example`, `:context`, or …\n"],["prepended_modules_of","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-c-prepended_modules_of","(klass)",""],["prepended_modules_of_singleton_class","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-prepended_modules_of_singleton_class","()",""],["prerequisite_tasks","Rake::Task","classes/Rake/Task.html#method-i-prerequisite_tasks","()","<p>List of prerequisite tasks\n"],["present?","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-present-3F","()",""],["present?","RSpec::Mocks::Implementation","classes/RSpec/Mocks/Implementation.html#method-i-present-3F","()",""],["pretty_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["prev_words_on_error","RDoc::RD::InlineParser","classes/RDoc/RD/InlineParser.html#method-i-prev_words_on_error","(ev)","<p>Returns words before the error\n"],["previously_defined?","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-previously_defined-3F","()","<p>@return [Boolean] Whether or not the constant was defined\n\n<pre><code>before the current example.\n</code></pre>\n"],["print","TestTraceOutput::PrintSpy","classes/TestTraceOutput/PrintSpy.html#method-i-print","(string)",""],["print_alias","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_alias","(*)","<p>Prints when an alias is added\n"],["print_attribute","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_attribute","(*)","<p>Prints when an attribute is added\n"],["print_class","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_class","(*)","<p>Prints when a class is added\n"],["print_constant","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_constant","(*)","<p>Prints when a constant is added\n"],["print_deferred_deprecation_warnings","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-print_deferred_deprecation_warnings","()",""],["print_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-print_deprecation_message","(data)",""],["print_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::ImmediatePrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/ImmediatePrinter.html#method-i-print_deprecation_message","(data)",""],["print_example_failed","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_failed","(pending_fixed, description, run_time, failure_id, exception, extra_content)","<p>rubocop:disable Metrics/ParameterLists\n"],["print_example_group_end","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_group_end","()",""],["print_example_group_start","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_group_start","(group_id, description, number_of_parents)",""],["print_example_passed","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_passed","(description, run_time)",""],["print_example_pending","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_example_pending","(description, pending_message)",""],["print_file","RDoc::Stats::Normal","classes/RDoc/Stats/Normal.html#method-i-print_file","(files_so_far, filename)","<p>Prints a file with a progress bar\n"],["print_file","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_file","(*)","<p>Prints when a file is added\n"],["print_html_start","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_html_start","()",""],["print_method","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_method","(*)","<p>Prints when a method is added\n"],["print_module","RDoc::Stats::Quiet","classes/RDoc/Stats/Quiet.html#method-i-print_module","(*)","<p>Prints when a module is added\n"],["print_summary","RSpec::Core::Formatters::HtmlPrinter","classes/RSpec/Core/Formatters/HtmlPrinter.html#method-i-print_summary","(duration, example_count, failure_count, pending_count)",""],["printer","RSpec::Core::Formatters::DeprecationFormatter","classes/RSpec/Core/Formatters/DeprecationFormatter.html#method-i-printer","()",""],["probe","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-c-probe","(block, &callback)",""],["probe","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-probe","()",""],["process_args","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-process_args","(argv)","<p>Parses <code>argv</code> and returns a Hash of options\n"],["processable_hooks_for","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-processable_hooks_for","(position, scope, host)",""],["profile_examples","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-profile_examples","()","<p>@api private\n<p>Defaults `profile_examples` to 10 examples when `@profile_examples` is `true`.\n"],["proxies_of","RSpec::Mocks::NestedSpace","classes/RSpec/Mocks/NestedSpace.html#method-i-proxies_of","(klass)",""],["proxies_of","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-proxies_of","(klass)",""],["proxy_for","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-proxy_for","(*_args)",""],["proxy_for","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-proxy_for","(object)",""],["proxy_method_invoked","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-proxy_method_invoked","(_obj, *args, &block)","<p>The implementation of the proxied method. Subclasses may override this method to perform additional operations. …\n"],["proxy_method_invoked","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-i-proxy_method_invoked","(obj, *args, &block)",""],["prune","RSpec::Core::FilterManager","classes/RSpec/Core/FilterManager.html#method-i-prune","(examples)",""],["publish","RSpec::Core::Bisect::Notifier","classes/RSpec/Core/Bisect/Notifier.html#method-i-publish","(event, *args)",""],["publish","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-publish","(event, options={})","<p>@param event [Symbol] Name of the custom event to trigger on formatters @param options [Hash] Hash of …\n"],["push","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-push","(*parts)","<p>Appends <code>parts</code> to the document\n"],["push","RDoc::Markup::List","classes/RDoc/Markup/List.html#method-i-push","(*items)","<p>Appends <code>items</code> to the list\n"],["push","RDoc::Markup::ListItem","classes/RDoc/Markup/ListItem.html#method-i-push","(*parts)","<p>Adds <code>parts</code> to the ListItem\n"],["push","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-push","(*texts)","<p>Appends <code>texts</code> onto this Paragraph\n"],["puts","RSpec::Core::Formatters::DeprecationFormatter::FileStream","classes/RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-i-puts","(*args)",""],["puts","RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","classes/RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html#method-i-puts","(message)",""],["quiet","RDoc::Options","classes/RDoc/Options.html#method-i-quiet","()","<p>Don&#39;t display progress as we process the files\n"],["quiet=","RDoc::Options","classes/RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["quote","RSpec::Core::ShellEscape","classes/RSpec/Core/ShellEscape.html#method-i-quote","(argument)",""],["raise_already_invoked_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_already_invoked_error","(message, calling_customization)","<p>@private\n"],["raise_cant_constrain_count_for_negated_have_received_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_cant_constrain_count_for_negated_have_received_error","(count_constraint)","<p>@private\n"],["raise_does_not_implement_error","RSpec::Mocks::AnyInstance::ErrorGenerator","classes/RSpec/Mocks/AnyInstance/ErrorGenerator.html#method-i-raise_does_not_implement_error","(klass, method_name)",""],["raise_double_negation_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_double_negation_error","(wrapped_expression)","<p>@private\n"],["raise_error","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-raise_error","(error=nil, message=nil, &block)","<p>With no args, matches if any error is raised. With a named error, matches only if that specific error …\n"],["raise_errors_for_deprecations!","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-raise_errors_for_deprecations-21","()","<p>Turns deprecation warnings into errors, in order to surface the full backtrace of the call site. This …\n"],["raise_exception","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-raise_exception","(error=nil, message=nil, &block)",""],["raise_expectation_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_error","(message, expected_received_count, argument_list_matcher, actual_received_count, expectation_count_type, args, backtrace_line=nil, source_id=nil)","<p>rubocop:disable Metrics/ParameterLists @private\n"],["raise_expectation_on_mocked_method","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_mocked_method","(method)","<p>@private\n"],["raise_expectation_on_nil_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_nil_error","(method_name)",""],["raise_expectation_on_unstubbed_method","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_unstubbed_method","(method)","<p>@private\n"],["raise_expired_test_double_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_expired_test_double_error","()","<p>@private\n"],["raise_have_received_disallowed","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_have_received_disallowed","(type, reason)","<p>@private\n"],["raise_invalid_arguments_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_invalid_arguments_error","(verifier)","<p>@private\n"],["raise_message_already_received_by_other_instance_error","RSpec::Mocks::AnyInstance::ErrorGenerator","classes/RSpec/Mocks/AnyInstance/ErrorGenerator.html#method-i-raise_message_already_received_by_other_instance_error","(method_name, object_inspect, invoked_instance)",""],["raise_method_not_stubbed_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_method_not_stubbed_error","(method_name)","<p>@private\n"],["raise_method_not_stubbed_error","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-raise_method_not_stubbed_error","()","<p>@private\n"],["raise_missing_block_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_block_error","(args_to_yield)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_default_stub_error","(expectation, args_for_multiple_calls)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-raise_missing_default_stub_error","(expectation, args_for_multiple_calls)","<p>@private\n"],["raise_non_public_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_non_public_error","(method_name, visibility)","<p>@private\n"],["raise_not_supported_with_prepend_error","RSpec::Mocks::AnyInstance::ErrorGenerator","classes/RSpec/Mocks/AnyInstance/ErrorGenerator.html#method-i-raise_not_supported_with_prepend_error","(method_name, problem_mod)",""],["raise_on_invalid_const","RSpec::Mocks::ConstantMutator","classes/RSpec/Mocks/ConstantMutator.html#method-c-raise_on_invalid_const","()","<p>Used internally by the constant stubbing to raise a helpful error when a constant like “A::B::C” …\n"],["raise_on_warning=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-raise_on_warning-3D","(value)","<p>Turns warnings into errors. This can be useful when you want RSpec to run in a &#39;strict&#39; no warning …\n"],["raise_only_valid_on_a_partial_double","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_only_valid_on_a_partial_double","(method)","<p>@private\n"],["raise_out_of_order_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_out_of_order_error","(message)","<p>@private\n"],["raise_out_of_order_error","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-raise_out_of_order_error","()",""],["raise_second_instance_received_message_error","RSpec::Mocks::AnyInstance::ErrorGenerator","classes/RSpec/Mocks/AnyInstance/ErrorGenerator.html#method-i-raise_second_instance_received_message_error","(unfulfilled_expectations)",""],["raise_similar_message_args_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_similar_message_args_error","(expectation, args_for_multiple_calls, backtrace_line=nil)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_args_error","(expectation, args_for_multiple_calls, source_id=nil)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-raise_unexpected_message_args_error","(args_for_multiple_calls)",""],["raise_unexpected_message_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_error","(message, args)","<p>@private\n"],["raise_unexpected_message_error","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-raise_unexpected_message_error","(method_name, args)","<p>@private\n"],["raise_unimplemented_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_unimplemented_error","(doubled_module, method_name, object)","<p>@private\n"],["raise_verifying_double_not_defined_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_verifying_double_not_defined_error","(ref)","<p>@private\n"],["raise_wrong_arity_error","RSpec::Mocks::ErrorGenerator","classes/RSpec/Mocks/ErrorGenerator.html#method-i-raise_wrong_arity_error","(args_to_yield, signature)","<p>@private\n"],["rake","RubyRunner","classes/RubyRunner.html#method-i-rake","(*rake_options)","<p>Run a command line rake with the give rake options.  Default command line ruby options are included. …\n"],["rake_check_options","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_check_options","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_check_options","(options, *optdecl)","<p>Check that the options do not contain options not listed in <code>optdecl</code>.  An ArgumentError exception is thrown …\n"],["rake_merge_option","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_merge_option","(args, defaults)","<p>Merge the given options with the default values.\n"],["rake_merge_option","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_merge_option","(args, defaults)","<p>Merge the given options with the default values.\n"],["rake_output_message","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["rake_output_message","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-rake_output_message","(message)","<p>Send the message to the default rake output (which is $stderr).\n"],["rake_system_dir","Rake::TestCase","classes/Rake/TestCase.html#method-i-rake_system_dir","()",""],["rakefile","Rake::TestCase","classes/Rake/TestCase.html#method-i-rakefile","(contents)",""],["rakefile_access","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_access","()",""],["rakefile_chains","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_chains","()",""],["rakefile_comments","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_comments","()",""],["rakefile_default","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_default","()",""],["rakefile_dryrun","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_dryrun","()",""],["rakefile_extra","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_extra","()",""],["rakefile_failing_test_task","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_failing_test_task","()",""],["rakefile_file_creation","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_file_creation","()",""],["rakefile_imports","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_imports","()",""],["rakefile_multidesc","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_multidesc","()",""],["rakefile_namespace","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_namespace","()",""],["rakefile_nosearch","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_nosearch","()",""],["rakefile_rakelib","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_rakelib","()",""],["rakefile_rbext","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_rbext","()",""],["rakefile_regenerate_imports","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_regenerate_imports","()",""],["rakefile_stand_alone_filelist","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_stand_alone_filelist","()",""],["rakefile_test_signal","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_test_signal","()",""],["rakefile_test_task","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_test_task","()",""],["rakefile_unittest","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_unittest","()",""],["rakefile_verbose","RakefileDefinitions","classes/RakefileDefinitions.html#method-i-rakefile_verbose","()",""],["raw_path","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-raw_path","(system, site, home, gems, *extra_dirs)","<p>Returns selected documentation directories including nonexistent directories.\n<p>See also ::each\n"],["rb_scan_args","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-rb_scan_args","(method_body)","<p>Extracts parameters from the <code>method_body</code> and returns a method parameter string.  Follows 1.9.3dev&#39;s …\n"],["rbx?","RSpec::Support::Ruby","classes/RSpec/Support/Ruby.html#method-i-rbx-3F","()",""],["rdoc_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["read_directive","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-read_directive","(allowed)","<p>Directives are modifier comments that can appear after class, module, or method names. For example:\n\n<pre><code>def ...\n</code></pre>\n"],["read_documentation_modifiers","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-read_documentation_modifiers","(context, allowed)","<p>Handles directives following the definition for <code>context</code> (any RDoc::CodeObject) if the directives are …\n"],["read_file","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding directives in the file.\n<p>The content will be converted …\n"],["ready_for?","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-ready_for-3F","(expectation)","<p>@private\n"],["receive","RSpec::Core::Bisect::Channel","classes/RSpec/Core/Bisect/Channel.html#method-i-receive","()","<p>rubocop:disable Security/MarshalLoad\n"],["receive","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-receive","(method_name, &block)",""],["receive_message_chain","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-receive_message_chain","(*messages, &block)",""],["receive_messages","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-receive_messages","(message_return_value_hash)",""],["received_expected_message!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-received_expected_message-21","(method_name)","<p>@private\n"],["received_message?","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-received_message-3F","(method_name, *args, &block)","<p>@private\n"],["received_message?","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-received_message-3F","(message, *args, &block)",""],["record","RSpec::Core::SharedContext","classes/RSpec/Core/SharedContext.html#method-c-record","(methods)","<p>@private\n"],["record","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-record","(example_group)","<p>@api private\n<p>Records an example group.\n"],["record","RSpec::Mocks::AnyInstance::Chain::Customizations","classes/RSpec/Mocks/AnyInstance/Chain/Customizations.html#method-c-record","(method_name)","<p>@macro [attach] record\n\n<pre><code>@method $1(*args, &amp;block)\nRecords the `$1` message for playback against an instance ...\n</code></pre>\n"],["record_finished","RSpec::Core::Example::ExecutionResult","classes/RSpec/Core/Example/ExecutionResult.html#method-i-record_finished","(status, finished_at)","<p>@api private Records the finished status of the example.\n"],["record_location","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","classes/RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["record_message_received","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-record_message_received","(message, *args, &block)","<p>@private\n"],["recursive_const_defined?","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-recursive_const_defined-3F","(const_name)",""],["recursive_const_get","RSpec::Support::RecursiveConstMethods","classes/RSpec/Support/RecursiveConstMethods.html#method-i-recursive_const_get","(const_name)",""],["recursive_structure?","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-recursive_structure-3F","(object)",""],["reenable","Rake::Task","classes/Rake/Task.html#method-i-reenable","()","<p>Reenable the task, allowing its tasks to be executed if the task is invoked again.\n"],["reference","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-reference","(label, link)","<p>Stores <code>label</code> as a reference to <code>link</code> and fills in previously unknown\nlink references.\n"],["register","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-register","(directive, &block)","<p>Registers <code>directive</code> as one handled by RDoc.  If a block is given the directive will be replaced by the …\n"],["register","RSpec::Core::Formatters","classes/RSpec/Core/Formatters.html#method-c-register","(formatter_class, *notifications)","<p>Register the formatter class @param formatter_class [Class] formatter class to register @param notifications …\n"],["register","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-register","(prepend_or_append, position, *args, &block)",""],["register","RSpec::Core::Ordering::Registry","classes/RSpec/Core/Ordering/Registry.html#method-i-register","(sym, strategy)",""],["register","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-register","(klass, operator, matcher)","<p>@private\n"],["register","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-register","(expectation)","<p>@private\n"],["register_constant_mutator","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-register_constant_mutator","(_mutator)",""],["register_constant_mutator","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-register_constant_mutator","(mutator)",""],["register_global_singleton_context_hooks","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-register_global_singleton_context_hooks","(example, globals)",""],["register_globals","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-register_globals","(host, globals)",""],["register_listener","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-register_listener","(listener, *notifications)","<p>Registers a listener to a list of notifications. The reporter will send notification of events to all …\n"],["register_matcher_definition","RSpec::Support","classes/RSpec/Support.html#method-c-register_matcher_definition","(&block)","<p>Used internally to break cyclic dependency between mocks, expectations, and support. We don&#39;t currently …\n"],["register_ordering","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-i-register_ordering","(name, strategy=Custom.new(Proc.new { |l| yield l }))",""],["registered","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-registered","()","<p>Registered directives\n"],["registered?","RSpec::Mocks::NestedSpace","classes/RSpec/Mocks/NestedSpace.html#method-i-registered-3F","(object)",""],["registered?","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-registered-3F","(_object)",""],["registered?","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-registered-3F","(object)",""],["registered_example_group_files","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-registered_example_group_files","()","<p>@private\n"],["registered_example_group_files","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-registered_example_group_files","()",""],["registered_listeners","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-registered_listeners","(notification)","<p>@private\n"],["registry","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-registry","()","<p>@private\n"],["relative_path","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-relative_path","(line)","<p>@api private\n<p>@param line [String] current code line @return [String] relative path to line\n"],["relative_path_regex","RSpec::Core::Metadata","classes/RSpec/Core/Metadata.html#method-c-relative_path_regex","()","<p>Matches strings either at the beginning of the input or prefixed with a whitespace, containing the current …\n"],["remove","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove_all_constants","RSpec::ExampleGroups","classes/RSpec/ExampleGroups.html#method-c-remove_all_constants","()",""],["remove_coding_comment","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-remove_coding_comment","(text)","<p>Removes the encoding magic comment from <code>text</code>\n"],["remove_comment","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-remove_comment","(comment)","<p>Removes a comment from this section if it is from the same file as <code>comment</code>\n"],["remove_commented_out_lines","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-remove_commented_out_lines","()","<p>Removes lines that are commented out that might otherwise get picked up when scanning for classes and …\n"],["remove_example","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-remove_example","(example)","<p>Removes an example from the example group\n"],["remove_from_documentation?","RDoc::Context","classes/RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_frozen_string_literal","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-remove_frozen_string_literal","(string)",""],["remove_globally!","RSpec::Core::DSL","classes/RSpec/Core/DSL.html#method-c-remove_globally-21","()","<p>Removes the describe method from Module and the top level binding. @api private\n"],["remove_globally!","RSpec::Core::SharedExampleGroup::TopLevelDSL","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-c-remove_globally-21","()","<p>@api private\n<p>Removes the top level DSL methods to Module and the top level binding.\n"],["remove_invalid_bytes","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-remove_invalid_bytes","(string)","<p>github.com/ruby/ruby/blob/eeb05e8c11/doc/NEWS-2.1.0#L120-L123 github.com/ruby/ruby/blob/v2_1_0/string.c#L8242 …\n"],["remove_invisible","RDoc::Context","classes/RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than <code>min_visibility</code>.\n"],["remove_magic_comment","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-remove_magic_comment","(string)","<p>Removes magic comments and shebang\n"],["remove_modeline","RDoc::Parser","classes/RDoc/Parser.html#method-c-remove_modeline","(content)","<p>Removes an emacs-style modeline from the first line of the document\n"],["remove_nodoc","RDoc::Store","classes/RDoc/Store.html#method-i-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no content.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by deleting the ones that have been removed …\n"],["remove_private","RDoc::Comment","classes/RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to the comment marker and start …\n"],["remove_private_comment","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-remove_private_comment","(comment)","<p>Removes private comments.\n<p>Unlike RDoc::Comment#remove_private this implementation only looks for two dashes …\n"],["remove_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_stub","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-remove_stub","()","<p>@private\n"],["remove_stub","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-remove_stub","(method_name)","<p>@private\n"],["remove_stub_chains_for!","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-remove_stub_chains_for-21","(method_name)","<p>@private\n"],["remove_stub_if_present","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-remove_stub_if_present","()","<p>@private\n"],["remove_stub_if_present","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-remove_stub_if_present","(method_name)","<p>@private\n"],["remove_token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-remove_token_listener","(obj)","<p>Removes the token listener <code>obj</code>\n"],["remove_unparseable","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and TAGS files for emacs and vim.\n"],["render","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-render","(file_name)","<p>Renders the ERb contained in <code>file_name</code> relative to the template directory and returns the result based …\n"],["render_template","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-render_template","(template_file, out_file = nil)","<p>Load and render the erb template in the given <code>template_file</code> and write it out to <code>out_file</code>.\n<p>Both <code>template_file</code> …\n"],["render_template","SDoc::Templatable","classes/SDoc/Templatable.html#method-i-render_template","( templatefile, context, outfile )","<p>Load and render the erb template in the given <code>templatefile</code> within the specified <code>context</code> (a Binding object) …\n"],["reopen","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-reopen","(*args)",""],["replace_ruby","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-replace_ruby","()",""],["replay_received_message_on","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-replay_received_message_on","(expectation, &block)","<p>@private\n"],["report","RDoc::Stats","classes/RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-report","(expected_example_count)","<p>@overload report(count, &amp;block) @overload report(count, &amp;block) @param expected_example_count …\n"],["report_attributes","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_filter_message","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-report_filter_message","(message)","<p>@private\n"],["report_methods","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["reporter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-reporter","()","<p>@return [RSpec::Core::Reporter] the currently configured reporter\n"],["reporter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-reporter","()","<p>@private\n"],["repository_url","SDoc::GitHub","classes/SDoc/GitHub.html#method-i-repository_url","(path)",""],["repro_command_for_currently_needed_ids","RSpec::Core::Bisect::ExampleMinimizer","classes/RSpec/Core/Bisect/ExampleMinimizer.html#method-i-repro_command_for_currently_needed_ids","()",""],["repro_command_from","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-i-repro_command_from","(locations)",""],["require_do","Object","classes/Object.html#method-i-require_do","(resource, &block)",""],["required_kw_args_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-required_kw_args_supported-3F","()",""],["requires=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-requires-3D","(paths)","<p>@private\n"],["rerdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerun_argument","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-rerun_argument","()","<p>Returns the location-based argument that can be passed to the `rspec` command to rerun this example. …\n"],["reset","RDoc::Markup::PreProcess","classes/RDoc/Markup/PreProcess.html#method-c-reset","()","<p>Clears all registered directives and post-processors\n"],["reset","RDoc::Parser::RipperStateLex::InnerStateLex","classes/RDoc/Parser/RipperStateLex/InnerStateLex.html#method-i-reset","()",""],["reset","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-reset","()","<p>Resets the tools\n"],["reset","RSpec","classes/RSpec.html#method-c-reset","()","<p>Used to ensure examples get reloaded and user configuration gets reset to defaults between multiple runs …\n"],["reset","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-reset","()","<p>@api private\n<p>Reset world to &#39;scratch&#39; before running suite.\n"],["reset","RSpec::Mocks::ConstantMutator::ConstantHider","classes/RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-reset","()",""],["reset","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-reset","()",""],["reset","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","classes/RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-reset","()",""],["reset","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-reset","()",""],["reset","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Mocks::TestDoubleProxy","classes/RSpec/Mocks/TestDoubleProxy.html#method-i-reset","()",""],["reset!","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-reset-21","()",""],["reset_all","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-reset_all","()",""],["reset_all","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-reset_all","()",""],["reset_filters","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-reset_filters","()","<p>@private\n"],["reset_memoized","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-reset_memoized","()","<p>Clear memoized values when adding/removing examples @private\n"],["reset_reporter","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-reset_reporter","()","<p>@private\n"],["reset_syntaxes_to_default","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-reset_syntaxes_to_default","()","<p>@private\n"],["reset_syntaxes_to_default","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-reset_syntaxes_to_default","()","<p>@api private Resets the configured syntax to the default.\n"],["resolve","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented <code>text</code> will be returned. …\n"],["resolve","Rake::FileList","classes/Rake/FileList.html#method-i-resolve","()","<p>Resolve all the pending adds now.\n"],["resolve","Rake::FileList","classes/Rake/FileList.html#method-i-resolve","()","<p>Resolve all the pending adds now.\n"],["resolve_aliases","RDoc::Context","classes/RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been added.\n"],["resolve_args","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-resolve_args","(args)","<p>Resolve the arguments for a task/rule.  Returns a triplet of [task_name, arg_name_list, prerequisites]. …\n"],["resolve_expected_args_based_on","RSpec::Mocks::ArgumentListMatcher","classes/RSpec/Mocks/ArgumentListMatcher.html#method-i-resolve_expected_args_based_on","(actual_args)","<p>@private Resolves abstract arg placeholders like `no_args` and `any_args` into a more concrete arg list …\n"],["respond_to","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-respond_to","(*names)","<p>Matches if the target object responds to all of the names provided. Names can be Strings or Symbols. …\n"],["respond_to?","RSpec::Core::OutputWrapper","classes/RSpec/Core/OutputWrapper.html#method-i-respond_to-3F","(name, priv=false)",""],["respond_to?","RSpec::Matchers::DSL::Matcher","classes/RSpec/Matchers/DSL/Matcher.html#method-i-respond_to-3F","(method, include_private=false)","<p>:nocov:  Indicates that this matcher responds to messages from the `@matcher_execution_context` as well. …\n"],["respond_to?","RSpec::Matchers::MatcherDelegator","classes/RSpec/Matchers/MatcherDelegator.html#method-i-respond_to-3F","(name, include_all=false)","<p>:nocov:\n"],["respond_to?","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","classes/RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-respond_to-3F","(method_name, include_private=false)",""],["respond_to?","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-respond_to-3F","(message, incl_private=false)","<p>@private\n"],["respond_to?","RSpec::Mocks::VerifyingDouble","classes/RSpec/Mocks/VerifyingDouble.html#method-i-respond_to-3F","(message, include_private=false)",""],["respond_to?","RSpec::Mocks::VerifyingDouble::SilentIO","classes/RSpec/Mocks/VerifyingDouble/SilentIO.html#method-c-respond_to-3F","(*)",""],["respond_to_missing?","RSpec::Matchers::DSL::Matcher","classes/RSpec/Matchers/DSL/Matcher.html#method-i-respond_to_missing-3F","(method, include_private=false)","<p>Indicates that this matcher responds to messages from the `@matcher_execution_context` as well. Also …\n"],["respond_to_missing?","RSpec::Matchers::MatcherDelegator","classes/RSpec/Matchers/MatcherDelegator.html#method-i-respond_to_missing-3F","(name, include_all=false)",""],["respond_to_missing?","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","classes/RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-respond_to_missing-3F","(method_name, include_private=false)",""],["restore","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-i-restore","()","<p>@private\n"],["restore_original_method","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-restore_original_method","()","<p>@private\n"],["restore_original_visibility","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-restore_original_visibility","()","<p>@private\n"],["retrieve_comment_body","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-retrieve_comment_body","(tk)","<p>Retrieve comment body without =begin/=end\n"],["reverse_sdiff","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-reverse_sdiff","(forward_sdiff)",""],["ri_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_paths","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-ri_paths","(&block)","<p>Enumerates the ri paths.  See RDoc::RI::Paths#each\n"],["ripper_supported?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-ripper_supported-3F","()",""],["root","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-root","(req, res)","<p>Generates the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root","RSpec::Core::RubyProject","classes/RSpec/Core/RubyProject.html#method-c-root","()",""],["root_search","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-root_search","(req, res)","<p>Generates a search index for the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["rspec_description_for_object","RSpec::Support","classes/RSpec/Support.html#method-c-rspec_description_for_object","(object)","<p>@api private\n<p>gives a string representation of an object for use in RSpec descriptions\n"],["ruby","FileUtils","classes/FileUtils.html#method-i-ruby","(*args, &block)","<p>Run a Ruby interpreter with the given arguments.\n<p>Example:\n\n<pre><code>ruby %{-pe &#39;$_.upcase!&#39; &lt;README}\n</code></pre>\n"],["ruby","RubyRunner","classes/RubyRunner.html#method-i-ruby","(*option_list)","<p>Run a shell Ruby command with command line options (using the default test options). Output is captured …\n"],["ruby?","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-ruby-3F","()","<p>Is this verbatim section Ruby code?\n"],["rule","Rake::DSL","classes/Rake/DSL.html#method-i-rule","(*args, &block)","<p>Declare a rule for auto-tasks.\n<p>Example:\n\n<pre><code>rule &#39;.o&#39; =&gt; &#39;.c&#39; do |t|\n  sh &#39;cc&#39;, &#39;-o&#39;, t.name, t.source\nend\n</code></pre>\n"],["run","LCS::HTMLDiff","classes/LCS/HTMLDiff.html#method-i-run","()",""],["run","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-c-run","(argv = ARGV)","<p>Runs the ri command line executable using <code>argv</code>\n"],["run","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-run","()","<p>Looks up and displays ri data according to the options given.\n"],["run","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-i-run","(locations)",""],["run","RSpec::Core::Bisect::Server","classes/RSpec/Core/Bisect/Server.html#method-c-run","()",""],["run","RSpec::Core::Bisect::ShellRunner","classes/RSpec/Core/Bisect/ShellRunner.html#method-i-run","(locations)",""],["run","RSpec::Core::DRbRunner","classes/RSpec/Core/DRbRunner.html#method-i-run","(err, out)",""],["run","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-run","(example_group_instance, reporter)","<p>@api private instance_execs the block passed to the constructor in the context of the instance of {ExampleGroup}. …\n"],["run","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-run","(*args, &block)",""],["run","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-run","(reporter=RSpec::Core::NullReporter)","<p>Runs all the examples in this group.\n"],["run","RSpec::Core::Hooks::AfterContextHook","classes/RSpec/Core/Hooks/AfterContextHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::AfterHook","classes/RSpec/Core/Hooks/AfterHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::BeforeHook","classes/RSpec/Core/Hooks/BeforeHook.html#method-i-run","(example)",""],["run","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-run","(position, scope, example_or_group)","<p>@private\n<p>Runs all of the blocks stored with the hook in the context of the example. If no example is provided, …\n"],["run","RSpec::Core::ProjectInitializer","classes/RSpec/Core/ProjectInitializer.html#method-i-run","()",""],["run","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-run","(args, err=$stderr, out=$stdout)","<p>Run a suite of RSpec examples. Does not exit.\n<p>This is used internally by RSpec to run a suite, but is …\n"],["run","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-i-run","(err, out)","<p>Configures and runs a spec suite.\n<p>@param err [IO] error stream @param out [IO] output stream\n"],["run","Rake::Application","classes/Rake/Application.html#method-i-run","()","<p>Run the Rake application.  The run method performs the following three steps:\n<p>Initialize the command line …\n"],["run_after_context_hooks","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-run_after_context_hooks","(example_group_instance)","<p>@private\n"],["run_before_context_hooks","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-run_before_context_hooks","(example_group_instance)","<p>@private\n"],["run_examples","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-run_examples","(reporter)","<p>@private\n"],["run_owned_hooks_for","RSpec::Core::Hooks::HookCollections","classes/RSpec/Core/Hooks/HookCollections.html#method-i-run_owned_hooks_for","(position, scope, example_or_group)",""],["run_ruby","RubyRunner","classes/RubyRunner.html#method-i-run_ruby","(option_list)","<p>Low level ruby command runner …\n"],["run_ruby_with_current_load_path","RSpec::Support::ShellOut","classes/RSpec/Support/ShellOut.html#method-i-run_ruby_with_current_load_path","(ruby_command, *flags)",""],["run_specs","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-i-run_specs","(example_groups)","<p>Runs the provided example groups.\n<p>@param example_groups [Array&lt;RSpec::Core::ExampleGroup&gt;] groups …\n"],["run_task","RSpec::Core::RakeTask","classes/RSpec/Core/RakeTask.html#method-i-run_task","(verbose)","<p>@private\n"],["run_with_threads","Rake::Application","classes/Rake/Application.html#method-i-run_with_threads","()","<p>Run the given block with the thread startup and shutdown.\n"],["running_in_drb?","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-running_in_drb-3F","()","<p>@private\n"],["safe_invoke","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-safe_invoke","(parent_stub, *args, &block)",""],["safe_ln","FileUtils","classes/FileUtils.html#method-i-safe_ln","(*args)","<p>Attempt to do a normal file link, but fall back to a copy if the link fails.\n"],["sandboxed","RSpec::Core::Sandbox","classes/RSpec/Core/Sandbox.html#method-c-sandboxed","()","<p>Execute a provided block with RSpec global objects (configuration, world) reset.  This is used to test …\n"],["sanitize_path","RDoc::Options","classes/RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current directory\n"],["satisfy","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-satisfy","(description=nil, &block)","<p>Passes if the submitted block returns true. Yields target to the block.\n<p>Generally speaking, this should …\n"],["save","RDoc::Store","classes/RDoc/Store.html#method-i-save","()","<p>Saves all entries in the store\n"],["save_cache","RDoc::Store","classes/RDoc/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::Store","classes/RDoc/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code> (or module)\n"],["save_method","RDoc::Store","classes/RDoc/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_original_implementation_callable!","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-save_original_implementation_callable-21","()",""],["save_page","RDoc::Store","classes/RDoc/Store.html#method-i-save_page","(page)","<p>Writes the ri data for <code>page</code>\n"],["scan","RDoc::Parser::C","classes/RDoc/Parser/C.html#method-i-scan","()","<p>Extracts the classes, modules, methods, attributes, constants and aliases from a C file and returns an …\n"],["scan","RDoc::Parser::ChangeLog","classes/RDoc/Parser/ChangeLog.html#method-i-scan","()","<p>Converts the ChangeLog into an RDoc::Markup::Document\n"],["scan","RDoc::Parser::Markdown","classes/RDoc/Parser/Markdown.html#method-i-scan","()","<p>Creates an Markdown-format TopLevel for the given file.\n"],["scan","RDoc::Parser::RD","classes/RDoc/Parser/RD.html#method-i-scan","()","<p>Creates an rd-format TopLevel for the given file.\n"],["scan","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-scan","()","<p>Scans this Ruby file for Ruby constructs\n"],["scan","RDoc::Parser::Simple","classes/RDoc/Parser/Simple.html#method-i-scan","()","<p>Extract the file contents and attach them to the TopLevel as a comment\n"],["scope","Rake::NameSpace","classes/Rake/NameSpace.html#method-i-scope","()","<p>The scope of the namespace (a LinkedList)\n"],["scope_name","Rake::Task","classes/Rake/Task.html#method-c-scope_name","(scope, task_name)","<p>Apply the scope to the task name according to the rules for this kind of task.  Generic tasks will accept …\n"],["sdiff","LCS","classes/LCS.html#method-i-sdiff","(other, callbacks = nil, &block)","<p>Returns the balanced (“side-by-side”) difference set between <code>self</code> and <code>other</code>. See Diff::LCS#sdiff …\n"],["sdiff","LCS","classes/LCS.html#method-c-sdiff","(seq1, seq2, callbacks = nil, &block)","<p>#sdiff computes all necessary components to show two sequences and their minimized differences side by …\n"],["search_record","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search engine.\n"],["search_record","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_string","RDoc::Generator::JsonIndex","classes/RDoc/Generator/JsonIndex.html#method-i-search_string","(string)","<p>Removes whitespace and downcases <code>string</code>\n"],["section","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-section","()","<p>The section this CodeObject is in.  Sections allow grouping of constants, attributes and methods inside …\n"],["section_contents","RDoc::Context","classes/RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use in a table of contents.\n"],["sections","RDoc::Context","classes/RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["see","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has no documentation.\n<p>It can be …\n"],["seed","RSpec::Core::Formatters::BaseTextFormatter","classes/RSpec/Core/Formatters/BaseTextFormatter.html#method-i-seed","(notification)","<p>@private\n"],["seed","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-seed","(notification)",""],["seed=","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-i-seed-3D","(seed)",""],["seed_used?","RSpec::Core::Notifications::SeedNotification","classes/RSpec/Core/Notifications/SeedNotification.html#method-i-seed_used-3F","()","<p>@api @return [Boolean] has the seed been used?\n"],["seed_used?","RSpec::Core::Ordering::ConfigurationManager","classes/RSpec/Core/Ordering/ConfigurationManager.html#method-i-seed_used-3F","()",""],["segments","RSpec::Support::ComparableVersion","classes/RSpec/Support/ComparableVersion.html#method-i-segments","()",""],["send","RSpec::Core::Bisect::Channel","classes/RSpec/Core/Bisect/Channel.html#method-i-send","(message)",""],["send","RSpec::Mocks::VerifyingDouble","classes/RSpec/Mocks/VerifyingDouble.html#method-i-send","(name, *args, &block)",""],["seq1","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-seq1","()",""],["seq2","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-seq2","()",""],["sequence","RDoc::Context::Section","classes/RDoc/Context/Section.html#method-i-sequence","()","<p>Section sequence number (deprecated)\n"],["set_aggregate_failures_exception","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-set_aggregate_failures_exception","(exception)","<p>@private\n<p>Used to set the exception when `aggregate_failures` fails.\n"],["set_arg_names","Rake::Task","classes/Rake/Task.html#method-i-set_arg_names","(args)","<p>Set the names of the arguments for this task. <code>args</code> should be an array of symbols, one for each argument …\n"],["set_attrs","RDoc::Markup::AttrSpan","classes/RDoc/Markup/AttrSpan.html#method-i-set_attrs","(start, length, bits)","<p>Toggles <code>bits</code> from <code>start</code> to <code>length</code>\n"],["set_constant_visibility_for","RDoc::Context","classes/RDoc/Context.html#method-i-set_constant_visibility_for","(names, visibility)","<p>Given an array <code>names</code> of constants, set the visibility of each constant to <code>visibility</code>\n"],["set_current_section","RDoc::Context","classes/RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also #add_section\n"],["set_eoutvar","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_eoutvar","RDoc::ERBPartial","classes/RDoc/ERBPartial.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Overrides <code>compiler</code> startup to set the <code>eoutvar</code> to an empty string only if it isn&#39;t already set.\n"],["set_exception","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-set_exception","(exception)","<p>@private\n<p>Used internally to set an exception in an after hook, which captures the exception but doesn&#39;t …\n"],["set_exception","RSpec::Core::SuiteHookContext","classes/RSpec/Core/SuiteHookContext.html#method-i-set_exception","(exception)","<p>rubocop:disable Naming/AccessorMethodName\n"],["set_it_up","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-set_it_up","(description, args, registration_collection, &example_group_block)","<p>@private\n"],["set_ivars","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-set_ivars","(instance, ivars)","<p>@private\n"],["set_visibility_for","RDoc::Context","classes/RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of each to <code>visibility</code>\n"],["setup","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-setup","()","<p>Prepares for generation of output from the current directory\n"],["setup","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-setup","()","<p>Call #setup when inheriting from this test case.\n<p>Provides the following instance variables:\n<p>+@m+ &mdash; RDoc::Markup.new …\n"],["setup","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-i-setup","(err, out)","<p>Wires together the various configuration objects and state holders.\n<p>@param err [IO] error stream @param …\n"],["setup","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-setup","()","<p>Performs per-test/example setup. This should be called before an test or example begins.\n"],["setup","Rake::TestCase","classes/Rake/TestCase.html#method-i-setup","()",""],["setup","TestPrivateAttrs","classes/TestPrivateAttrs.html#method-i-setup","()",""],["setup","TestRakeApplication","classes/TestRakeApplication.html#method-i-setup","()",""],["setup","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-setup","()",""],["setup","TestRakeBacktrace","classes/TestRakeBacktrace.html#method-i-setup","()",""],["setup","TestRakeCpuCounter","classes/TestRakeCpuCounter.html#method-i-setup","()",""],["setup","TestRakeCpuCounter::TestClassMethod","classes/TestRakeCpuCounter/TestClassMethod.html#method-i-setup","()",""],["setup","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-setup","()",""],["setup","TestRakeDsl","classes/TestRakeDsl.html#method-i-setup","()",""],["setup","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-setup","()",""],["setup","TestRakeFileList","classes/TestRakeFileList.html#method-i-setup","()",""],["setup","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-setup","()",""],["setup","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-setup","()",""],["setup","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-setup","()",""],["setup","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-setup","()",""],["setup","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-setup","()",""],["setup","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-setup","()",""],["setup","TestRakePathMapExplode","classes/TestRakePathMapExplode.html#method-i-setup","()",""],["setup","TestRakeRules","classes/TestRakeRules.html#method-i-setup","()",""],["setup","TestRakeTask","classes/TestRakeTask.html#method-i-setup","()",""],["setup","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-setup","()",""],["setup","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-setup","()",""],["setup","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-setup","()",""],["setup","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-setup","()",""],["setup","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-setup","()",""],["setup_allowance","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_allowance","(_subject, &_block)",""],["setup_allowance","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_allowance","(subject, &block)",""],["setup_allowance","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-setup_allowance","(subject, &block)",""],["setup_allowance","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_allowance","(subject)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_any_instance_allowance","(_subject, &_block)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_allowance","(subject, &block)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-setup_any_instance_allowance","(subject, &block)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_any_instance_allowance","(subject)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_any_instance_expectation","(_subject, &_block)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_expectation","(subject, &block)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-setup_any_instance_expectation","(subject, &block)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_any_instance_expectation","(subject)",""],["setup_any_instance_negative_expectation","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_any_instance_negative_expectation","(_subject, &_block)",""],["setup_any_instance_negative_expectation","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_any_instance_negative_expectation","(subject, &block)",""],["setup_chain","RSpec::Mocks::MessageChain","classes/RSpec/Mocks/MessageChain.html#method-i-setup_chain","()","<p>@api private\n"],["setup_command_line","TestRakeApplication","classes/TestRakeApplication.html#method-i-setup_command_line","(*options)",""],["setup_default","RSpec::Core::Formatters::Loader","classes/RSpec/Core/Formatters/Loader.html#method-i-setup_default","(output_stream, deprecation_stream)","<p>@private\n"],["setup_expectation","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_expectation","(subject, &block)",""],["setup_expectation","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_expectation","(subject, &block)",""],["setup_expectation","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-setup_expectation","(subject, &block)",""],["setup_expectation","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_expectation","(subject)",""],["setup_generator","RDoc::Options","classes/RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","classes/RSpec/Core/MockingAdapters/Flexmock.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","classes/RSpec/Core/MockingAdapters/Mocha.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","classes/RSpec/Core/MockingAdapters/Null.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","classes/RSpec/Core/MockingAdapters/RR.html#method-i-setup_mocks_for_rspec","()",""],["setup_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","classes/RSpec/Core/MockingAdapters/RSpec.html#method-i-setup_mocks_for_rspec","()",""],["setup_names","SDoc::Merge","classes/SDoc/Merge.html#method-i-setup_names","()",""],["setup_negative_expectation","RSpec::Mocks::Matchers::HaveReceived","classes/RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_negative_expectation","(subject, &block)",""],["setup_negative_expectation","RSpec::Mocks::Matchers::Receive","classes/RSpec/Mocks/Matchers/Receive.html#method-i-setup_negative_expectation","(subject, &block)",""],["setup_negative_expectation","RSpec::Mocks::Matchers::ReceiveMessageChain","classes/RSpec/Mocks/Matchers/ReceiveMessageChain.html#method-i-setup_negative_expectation","(*_args)",""],["setup_negative_expectation","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_negative_expectation","(_subject)",""],["setup_options","RDoc::Generator::SDoc","classes/RDoc/Generator/SDoc.html#method-c-setup_options","(options)",""],["setup_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn&#39;t exist. If it does exist, but doesn&#39;t contain the flag file …\n"],["setup_output_dir","SDoc::Merge","classes/SDoc/Merge.html#method-i-setup_output_dir","()",""],["setup_pager","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-setup_pager","()","<p>Sets up a pager program to pass output through.  Tries the RI_PAGER and PAGER environment variables followed …\n"],["setup_scanner","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-setup_scanner","(input)","<p>Creates the StringScanner\n"],["setup_simple_method_double","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-setup_simple_method_double","(method_name, response, collection, error_generator=nil, backtrace_line=nil)","<p>@private\n"],["setup_simplecov","RSpec::Support::Spec","classes/RSpec/Support/Spec.html#method-c-setup_simplecov","(&block)",""],["sexp?","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-c-sexp-3F","(array)",""],["sh","FileUtils","classes/FileUtils.html#method-i-sh","(*cmd, &block)","<p>Run the system command <code>cmd</code>.  If multiple arguments are given the command is run directly (without the …\n"],["shared_context","RSpec::Core::SharedExampleGroup","classes/RSpec/Core/SharedExampleGroup.html#method-i-shared_context","(name, *args, &block)",""],["shared_context_metadata_behavior=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-shared_context_metadata_behavior-3D","(value)","<p>@see shared_context_metadata_behavior\n"],["shared_example_group_inclusions","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-shared_example_group_inclusions","()","<p>@private\n"],["shared_example_group_registry","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-shared_example_group_registry","()","<p>@private\n"],["shared_examples","RSpec::Core::SharedExampleGroup","classes/RSpec/Core/SharedExampleGroup.html#method-i-shared_examples","(name, *args, &block)","<p>@overload shared_examples(name, &amp;block)\n\n<pre><code>@param name [String, Symbol, Module] identifer to use when ...\n</code></pre>\n"],["shared_examples","RSpec::Core::SharedExampleGroup::TopLevelDSL","classes/RSpec/Core/SharedExampleGroup/TopLevelDSL.html#method-i-shared_examples","(name, *args, &block)",""],["shared_examples_for","RSpec::Core::SharedExampleGroup","classes/RSpec/Core/SharedExampleGroup.html#method-i-shared_examples_for","(name, *args, &block)",""],["shell_allows_unquoted_ids?","RSpec::Core::ShellEscape","classes/RSpec/Core/ShellEscape.html#method-i-shell_allows_unquoted_ids-3F","()",""],["shell_out","RSpec::Support::ShellOut","classes/RSpec/Support/ShellOut.html#method-i-shell_out","(*command)",""],["shellcommand","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-shellcommand","()",""],["should","RSpec::Core::MemoizedHelpers","classes/RSpec/Core/MemoizedHelpers.html#method-i-should","(matcher=nil, message=nil)","<p>When `should` is called with no explicit receiver, the call is delegated to the object returned by `subject`. …\n"],["should","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-should","(matcher=nil, message=nil, &block)",""],["should_enabled?","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-should_enabled-3F","(syntax_host=default_should_host)","<p>@api private Indicates whether or not the `should` syntax is enabled.\n"],["should_enabled?","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-should_enabled-3F","(syntax_host=default_should_syntax_host)","<p>@api private Indicates whether or not the should syntax is enabled.\n"],["should_enumerate?","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-c-should_enumerate-3F","(item)","<p>@api private We should enumerate arrays as long as they are not recursive.\n"],["should_method","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#method-c-should_method","()",""],["should_method","RSpec::Expectations::PositiveExpectationHandler","classes/RSpec/Expectations/PositiveExpectationHandler.html#method-c-should_method","()",""],["should_not","RSpec::Core::MemoizedHelpers","classes/RSpec/Core/MemoizedHelpers.html#method-i-should_not","(matcher=nil, message=nil)","<p>Just like `should`, `should_not` delegates to the subject (implicit or explicit) of the example group. …\n"],["should_not","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-should_not","(matcher=nil, message=nil, &block)",""],["should_not_receive","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-should_not_receive","(method_name, &block)",""],["should_not_receive","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_not_receive","(method_name, &block)","<p>The opposite of `should_receive`\n<p>@see Methods#should_not_receive\n"],["should_not_receive","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-should_not_receive","(message, &block)",""],["should_receive","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-should_receive","(method_name, &block)",""],["should_receive","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_receive","(method_name, &block)","<p>Initializes the recording a message expectation to be played back against any instance of this object …\n"],["should_receive","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-should_receive","(message, opts={}, &block)",""],["should_transfer_nested_constants?","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-should_transfer_nested_constants-3F","()",""],["show_documentation","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-show_documentation","(req, res)","<p>Displays documentation for <code>req</code> on <code>res</code>, whether that be HTML or some asset.\n"],["show_frozen_warning","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-show_frozen_warning","()","<p>@private\n"],["shutdown","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-i-shutdown","()",""],["signature","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section&#39;s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and …\n\n"],["silence_metadata_example_group_deprecations","RSpec::Core::MetadataFilter","classes/RSpec/Core/MetadataFilter.html#method-c-silence_metadata_example_group_deprecations","()","<p>@private\n"],["similar_messages","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-similar_messages","()",""],["simple_callback","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-simple_callback","()",""],["simple_callback_no_finishers","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-simple_callback_no_finishers","()",""],["simplify","LCS::ContextChange","classes/LCS/ContextChange.html#method-c-simplify","(event)","<p>Simplifies a context change for use in some diff callbacks. &#39;&lt;&#39; actions are converted to &#39;-&#39; …\n"],["single_yield_args","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-single_yield_args","()",""],["singleton_class","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-i-singleton_class","()","<p>:nocov:  @private\n"],["site_dir","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-site_dir","()","<p>The location of ri data installed into the site dir.\n<p>Historically this was available for documentation …\n"],["skip","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-skip","(token_type, error = true)","<p>Skips the next token if its type is <code>token_type</code>.\n<p>Optionally raises an error if the next token is not of …\n"],["skip","RSpec::Core::Pending","classes/RSpec/Core/Pending.html#method-i-skip","(message=nil)","<p>@overload skip() @overload skip(message)\n<p>Marks an example as pending and skips execution.\n<p>@param message …\n"],["skip_for_variable","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_for_variable","()","<p>skip the var [in] part of a &#39;for&#39; statement\n"],["skip_method","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_method","(container)","<p>Skips the next method in <code>container</code>\n"],["skip_optional_do_after_expression","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_optional_do_after_expression","()","<p>while, until, and for have an optional do\n"],["skip_tkspace","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-skip_tkspace","()","<p>Skips whitespace tokens including newlines\n"],["skip_tkspace_comment","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-skip_tkspace_comment","(skip_nl = true)","<p>Skip spaces until a comment is found\n"],["skip_tkspace_without_nl","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-skip_tkspace_without_nl","()","<p>Skips whitespace tokens excluding newlines\n"],["skip_with_exception","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-skip_with_exception","(reporter, exception)","<p>@private\n<p>Used internally to skip without actually executing the example when skip is used in before(:context). …\n"],["skipped_seq1","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-skipped_seq1","()",""],["skipped_seq2","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-skipped_seq2","()",""],["slow_duration","RSpec::Core::Notifications::ProfileNotification","classes/RSpec/Core/Notifications/ProfileNotification.html#method-i-slow_duration","()","<p>@return [Float] the time taken (in seconds) to run the slowest examples\n"],["slowest_examples","RSpec::Core::Notifications::ProfileNotification","classes/RSpec/Core/Notifications/ProfileNotification.html#method-i-slowest_examples","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] the slowest examples\n"],["slowest_groups","RSpec::Core::Notifications::ProfileNotification","classes/RSpec/Core/Notifications/ProfileNotification.html#method-i-slowest_groups","()","<p>@return [Array&lt;RSpec::Core::Example&gt;] the slowest example groups\n"],["snippet","RDoc::Text","classes/RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["snippet","RSpec::Core::Formatters::HtmlSnippetExtractor","classes/RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-snippet","(backtrace)","<p>@api private\n<p>Extract lines of code corresponding to  a backtrace.\n<p>@param backtrace [String] the backtrace …\n"],["snippet_for","RSpec::Core::Formatters::HtmlSnippetExtractor","classes/RSpec/Core/Formatters/HtmlSnippetExtractor.html#method-i-snippet_for","(error_line)","<p>@api private\n<p>Create a snippet from a line of code.\n<p>@param error_line [String] file name with line number …\n"],["sort_hash_keys","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-sort_hash_keys","(input_hash)",""],["sort_sections","RDoc::Context","classes/RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fashion (none, Public, Internal, Deprecated)\n"],["source","RDoc::Store","classes/RDoc/Store.html#method-i-source","()","<p>Source of the contents of this store.\n<p>For a store from a gem the source is the gem name.  For a store …\n"],["source","Rake::Task","classes/Rake/Task.html#method-i-source","()","<p>First source from a rule (nil if no sources)\n"],["source_from_file","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-c-source_from_file","(path)",""],["source_from_file","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-source_from_file","(path)","<p>@private\n"],["sources","Rake::Task","classes/Rake/Task.html#method-i-sources","()",""],["spec_files_with_failures","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-spec_files_with_failures","()","<p>@private\n"],["spec_opts_without_bisect","RSpec::Core::Bisect::ShellCommand","classes/RSpec/Core/Bisect/ShellCommand.html#method-i-spec_opts_without_bisect","()",""],["split","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-split","(regex_or_string)",""],["split_all","FileUtils","classes/FileUtils.html#method-i-split_all","(path)","<p>Split a file path into individual directory names.\n<p>Example:\n\n<pre><code>split_all(&quot;a/b/c&quot;) =&gt;  [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n</code></pre>\n"],["split_file_scoped_rules","RSpec::Core::InclusionRules","classes/RSpec/Core/InclusionRules.html#method-i-split_file_scoped_rules","()",""],["split_into_flow","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-split_into_flow","()","<p>Splits the string into chunks by attribute change\n"],["split_words","RSpec::Matchers::EnglishPhrasing","classes/RSpec/Matchers/EnglishPhrasing.html#method-c-split_words","(sym)","<p>Converts a symbol into an English expression.\n\n<pre><code>split_words(:banana_creme_pie) #=&gt; &quot;banana creme pie&quot;\n</code></pre>\n"],["spy","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-spy","(*args)","<p>@overload spy() @overload spy(name)\n\n<pre><code>@param name [String/Symbol] name or description to be used in failure ...\n</code></pre>\n"],["standalone?","RSpec::Core::InclusionRules","classes/RSpec/Core/InclusionRules.html#method-i-standalone-3F","()",""],["start","RSpec::Core::Bisect::ForkRunner","classes/RSpec/Core/Bisect/ForkRunner.html#method-c-start","(shell_command, spec_runner)",""],["start","RSpec::Core::Bisect::Server","classes/RSpec/Core/Bisect/Server.html#method-i-start","()",""],["start","RSpec::Core::Bisect::ShellRunner","classes/RSpec/Core/Bisect/ShellRunner.html#method-c-start","(shell_command, _spec_runner)",""],["start","RSpec::Core::Formatters::BaseFormatter","classes/RSpec/Core/Formatters/BaseFormatter.html#method-i-start","(notification)","<p>@api public\n<p>@param notification [StartNotification] @see RSpec::Core::Formatters::Protocol#start\n"],["start","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-start","(notification)",""],["start","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-start","(expected_example_count, time=RSpec::Core::Time.now)","<p>@private\n"],["start_accepting","RDoc::Markup::ToAnsi","classes/RDoc/Markup/ToAnsi.html#method-i-start_accepting","()","<p>Starts accepting with a reset screen\n"],["start_accepting","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML generation\n"],["start_accepting","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-start_accepting","()","<p>Prepares the visitor for HTML snippet generation\n"],["start_accepting","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-i-start_accepting","()","<p>Prepares the visitor for text generation\n"],["start_accepting","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-start_accepting","()","<p>Prepares the visitor for gathering tt sections\n"],["start_collecting_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by :enddoc:\n"],["start_dump","RSpec::Core::Formatters::BaseBisectFormatter","classes/RSpec/Core/Formatters/BaseBisectFormatter.html#method-i-start_dump","(_notification)",""],["start_dump","RSpec::Core::Formatters::HtmlFormatter","classes/RSpec/Core/Formatters/HtmlFormatter.html#method-i-start_dump","(_notification)",""],["start_dump","RSpec::Core::Formatters::ProgressFormatter","classes/RSpec/Core/Formatters/ProgressFormatter.html#method-i-start_dump","(_notification)",""],["start_server","RDoc::RI::Driver","classes/RDoc/RI/Driver.html#method-i-start_server","()","<p>Starts a WEBrick server for ri.\n"],["start_with","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-start_with","(*expected)","<p>Matches if the actual value starts with the expected value(s). In the case of a string, matches against …\n"],["stash","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-i-stash","()","<p>@private\n"],["stash_deprecation_message","RSpec::Core::Formatters::DeprecationFormatter::DelayedPrinter","classes/RSpec/Core/Formatters/DeprecationFormatter/DelayedPrinter.html#method-i-stash_deprecation_message","(deprecation_message)",""],["stashed_method_name","RSpec::Mocks::InstanceMethodStasher","classes/RSpec/Mocks/InstanceMethodStasher.html#method-i-stashed_method_name","()","<p>@private\n"],["stop","RSpec::Core::Bisect::Server","classes/RSpec/Core/Bisect/Server.html#method-i-stop","()",""],["stop","RSpec::Core::Formatters::JsonFormatter","classes/RSpec/Core/Formatters/JsonFormatter.html#method-i-stop","(notification)",""],["stop","RSpec::Core::Reporter","classes/RSpec/Core/Reporter.html#method-i-stop","()","<p>@private\n"],["stop_all_observation!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-stop_all_observation-21","()","<p>@private\n"],["stop_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["stop_observing!","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-stop_observing-21","(method_name)",""],["store=","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-store-3D","(store)","<p>Sets the store for this method and its referenced code objects.\n"],["store=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-store-3D","(store)","<p>Sets the <code>store</code> that contains this CodeObject\n"],["store=","RDoc::Constant","classes/RDoc/Constant.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-store-3D","(store)","<p>Sets the current documentation tree to <code>store</code> and sets the store&#39;s rdoc driver to this instance.\n"],["store_before_context_ivars","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-store_before_context_ivars","(example_group_instance)","<p>@private\n"],["store_for","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-store_for","(source_name)","<p>Returns an RDoc::Store for the given <code>source_name</code> (&#39;ruby&#39; or a gem name).\n"],["strike","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-strike","","<p>Enables the strike extension\n"],["string","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-string","()",""],["strip_hashes","RDoc::Text","classes/RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_known_warnings","RSpec::Support::ShellOut","classes/RSpec/Support/ShellOut.html#method-i-strip_known_warnings","(input)",""],["strip_newlines","RDoc::Text","classes/RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","classes/RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips       style comments\n"],["strip_tags","SDoc::Helpers","classes/SDoc/Helpers.html#method-i-strip_tags","(text)","<p>Strips out HTML tags from a given string.\n<p>Example:\n\n<pre><code>strip_tags(&quot;&lt;strong&gt;Hello world&lt;/strong&gt;&quot;) =&gt; &quot;Hello ...\n</code></pre>\n"],["strong","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-strong","(text)","<p>Wraps <code>text</code> in strong markup for rdoc inline formatting\n"],["stub","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-stub","(method_name_or_method_map, &block)",""],["stub","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub","(method_name, &block)","<p>Initializes the recording a stub to be played back against any instance of this object that invokes the …\n"],["stub","RSpec::Mocks::ConstantMutator","classes/RSpec/Mocks/ConstantMutator.html#method-c-stub","(constant_name, value, options={})","<p>Stubs a constant.\n<p>@param (see ExampleMethods#stub_const) @option (see ExampleMethods#stub_const) @return …\n"],["stub","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-stub","(message_or_hash, opts={}, &block)",""],["stub_chain","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-stub_chain","(*chain, &block)",""],["stub_chain","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub_chain","(*method_names_and_optional_return_values, &block)","<p>Initializes the recording a stub chain to be played back against any instance of this object that invokes …\n"],["stub_chain","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-stub_chain","(*chain, &blk)",""],["stub_chain_on","RSpec::Mocks::StubChain","classes/RSpec/Mocks/StubChain.html#method-c-stub_chain_on","(object, *chain, &blk)",""],["stub_const","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-stub_const","(constant_name, value, options={})","<p>Stubs the named constant with the given value. Like method stubs, the constant will be restored to its …\n"],["stubbed?","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-stubbed-3F","()","<p>@return [Boolean] Whether or not rspec-mocks has stubbed\n\n<pre><code>this constant.\n</code></pre>\n"],["sub","Rake::FileList","classes/Rake/FileList.html#method-i-sub","(pat, rep)","<p>Return a new FileList with the results of running <code>sub</code> against each element of the original list.\n<p>Example: …\n"],["sub","Rake::FileList","classes/Rake/FileList.html#method-i-sub","(pat, rep)","<p>Return a new FileList with the results of running <code>sub</code> against each element of the original list.\n<p>Example: …\n"],["sub!","Rake::FileList","classes/Rake/FileList.html#method-i-sub-21","(pat, rep)","<p>Same as <code>sub</code> except that the original file list is modified.\n"],["sub!","Rake::FileList","classes/Rake/FileList.html#method-i-sub-21","(pat, rep)","<p>Same as <code>sub</code> except that the original file list is modified.\n"],["subclass","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-subclass","(parent, description, args, registration_collection, &example_group_block)","<p>@private\n"],["subject","RSpec::Core::MemoizedHelpers","classes/RSpec/Core/MemoizedHelpers.html#method-i-subject","()","<p>@note `subject` was contributed by Joe Ferris to support the one-liner\n\n<pre><code>syntax embraced by shoulda matchers: ...\n</code></pre>\n"],["subject","RSpec::Core::MemoizedHelpers::ClassMethods","classes/RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-subject","(name=nil, &block)","<p>Declares a `subject` for an example group which can then be wrapped with `expect` using `is_expected` …\n"],["subject!","RSpec::Core::MemoizedHelpers::ClassMethods","classes/RSpec/Core/MemoizedHelpers/ClassMethods.html#method-i-subject-21","(name=nil, &block)","<p>Just like `subject`, except the block is invoked by an implicit `before` hook. This serves a dual purpose …\n"],["summarize","RSpec::Core::Formatters::DeprecationFormatter::FileStream","classes/RSpec/Core/Formatters/DeprecationFormatter/FileStream.html#method-i-summarize","(summary_stream, deprecation_count)",""],["summarize","RSpec::Core::Formatters::DeprecationFormatter::RaiseErrorStream","classes/RSpec/Core/Formatters/DeprecationFormatter/RaiseErrorStream.html#method-i-summarize","(summary_stream, deprecation_count)",""],["summary","RDoc::Stats","classes/RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["summary","RSpec::Core::MultipleExceptionError","classes/RSpec/Core/MultipleExceptionError.html#method-i-summary","()","<p>@return [String] A summary of the failure, including the block label and a count of failures.\n"],["summary","RSpec::Expectations::MultipleExpectationsNotMetError","classes/RSpec/Expectations/MultipleExpectationsNotMetError.html#method-i-summary","()","<p>@return [String] A summary of the failure, including the block label and a count of failures.\n"],["superclass","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass object, returns the name if it …\n"],["superclass","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don&#39;t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superclass_before_context_ivars","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-superclass_before_context_ivars","()","<p>@private\n"],["superclass_metadata","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-superclass_metadata","()","<p>@private @return [Metadata] belonging to the parent of a nested {ExampleGroup}\n"],["superclass_method","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-superclass_method","()","<p>For methods that <code>super</code>, find the superclass method that would be called.\n"],["superclass_proxy","RSpec::Mocks::PartialClassDoubleProxyMethods","classes/RSpec/Mocks/PartialClassDoubleProxyMethods.html#method-i-superclass_proxy","()",""],["superclass_proxy_for","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-superclass_proxy_for","(*_args)",""],["superclass_proxy_for","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-superclass_proxy_for","(klass)",""],["supports_block_expectations","RSpec::Matchers::DSL::Macros","classes/RSpec/Matchers/DSL/Macros.html#method-i-supports_block_expectations","()","<p>Declares that the matcher can be used in a block expectation. Users will not be able to use your matcher …\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::BaseMatcher","classes/RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-supports_block_expectations-3F","()","<p>@api private Most matchers are value matchers (i.e. meant to work with `expect(value)`) rather than block …\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::ChangeRelatively","classes/RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Compound","classes/RSpec/Matchers/BuiltIn/Compound.html#method-i-supports_block_expectations-3F","()",""],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-supports_block_expectations-3F","()","<p>@api private Indicates this matcher matches against a block. @return [True]\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::SpecificValuesChange","classes/RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::ThrowSymbol","classes/RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-supports_block_expectations-3F","()","<p>@api private Indicates this matcher matches against a block. @return [True]\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","classes/RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::YieldWithArgs","classes/RSpec/Matchers/BuiltIn/YieldWithArgs.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::YieldWithNoArgs","classes/RSpec/Matchers/BuiltIn/YieldWithNoArgs.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::DSL::DefaultImplementations","classes/RSpec/Matchers/DSL/DefaultImplementations.html#method-i-supports_block_expectations-3F","()","<p>Matchers do not support block expectations by default. You must opt-in.\n"],["supports_exception_cause?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-supports_exception_cause-3F","()",""],["supports_rebinding_module_methods?","RSpec::Support::RubyFeatures","classes/RSpec/Support/RubyFeatures.html#method-i-supports_rebinding_module_methods-3F","()",""],["suppress","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-suppress","()","<p>Use this to suppress a CodeObject and all its children until the next file it is seen in or documentation …\n"],["suppressed?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-suppressed-3F","()","<p>Has this class been suppressed?\n<p>See also #suppress\n"],["suppressed?","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-i-suppressed-3F","(heading)","<p>Returns true if <code>heading</code> is below the display threshold\n"],["surface_descriptions_in","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-c-surface_descriptions_in","(item)","<p>Transforms the given data structue (typically a hash or array) into a new data structure that, when `#inspect` …\n"],["synchronize","RSpec::Support::Mutex","classes/RSpec/Support/Mutex.html#method-i-synchronize","()","<p>@private\n"],["synchronize","RSpec::Support::ReentrantMutex","classes/RSpec/Support/ReentrantMutex.html#method-i-synchronize","()",""],["syntax","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-syntax","()","<p>The list of configured syntaxes. @return [Array&lt;Symbol&gt;] the list of configured syntaxes. @example …\n"],["syntax","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-syntax","()","<p>Returns an array with a list of syntaxes that are enabled.\n<p>@example\n\n<pre><code>unless RSpec::Mocks.configuration.syntax.include?(:expect) ...\n</code></pre>\n"],["syntax=","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-syntax-3D","(values)","<p>Configures the supported syntax. @param [Array&lt;Symbol&gt;, Symbol] values the syntaxes to enable @example …\n"],["syntax=","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-syntax-3D","(*values)","<p>Provides the ability to set either `expect`, `should` or both syntaxes. RSpec uses `expect` syntax by …\n"],["syntax_highlighter","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-syntax_highlighter","()","<p>@private\n"],["system_dir","RDoc::RI::Paths","classes/RDoc/RI/Paths.html#method-c-system_dir","()","<p>The location of the built-in ri data.\n<p>This data is built automatically when `make` is run when Ruby is …\n"],["table_of_contents","RDoc::Markup::Document","classes/RDoc/Markup/Document.html#method-i-table_of_contents","()","<p>Returns an Array of headings in the document.\n<p>Require &#39;rdoc/markup/formatter&#39; before calling this …\n"],["tar_bz2_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tar_bz2_file","()","<p>The package name with .tar.bz2 added\n"],["tar_gz_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tar_gz_file","()","<p>The package name with .tar.gz added\n"],["target","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-i-target","()","<p>The target of the verifying double (the object itself).\n<p>@return [Object]\n"],["target","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-i-target","()","<p>@return [Object, nil] the target of the verifying double (the named object), or\n\n<pre><code>nil if it is not defined.\n</code></pre>\n"],["task","Rake::DSL","classes/Rake/DSL.html#method-i-task","(*args, &block)","<p>Declare a basic task.  The <code>task_name</code> is always the first argument.  If the task name contains a “:” …\n"],["task","TestRakeTaskManagerArgumentResolution","classes/TestRakeTaskManagerArgumentResolution.html#method-i-task","(*args)",""],["task_defined?","Rake::Task","classes/Rake/Task.html#method-c-task_defined-3F","(task_name)","<p>TRUE if the task name is already defined.\n"],["tasks","Rake::NameSpace","classes/Rake/NameSpace.html#method-i-tasks","()","<p>Return the list of tasks defined in this and nested namespaces.\n"],["tasks","Rake::Task","classes/Rake/Task.html#method-c-tasks","()","<p>List of all defined tasks.\n"],["tasks","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-tasks","()","<p>List of all defined tasks in this application.\n"],["tasks_in_scope","Rake::TaskManager","classes/Rake/TaskManager.html#method-i-tasks_in_scope","(scope)","<p>List of all the tasks defined in the given scope (and its sub-scopes).\n"],["teardown","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-teardown","()","<p>Cleans up all test double state (including any methods that were redefined on partial doubles). This …\n"],["teardown","Rake::TestCase","classes/Rake/TestCase.html#method-i-teardown","()",""],["teardown","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-teardown","()",""],["teardown","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-teardown","()",""],["teardown","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-teardown","()",""],["teardown","TestRakePathMapExplode","classes/TestRakePathMapExplode.html#method-i-teardown","()",""],["teardown","TestRakeTask","classes/TestRakeTask.html#method-i-teardown","()",""],["teardown","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-teardown","()",""],["teardown","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-teardown","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","classes/RSpec/Core/MockingAdapters/Flexmock.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","classes/RSpec/Core/MockingAdapters/Mocha.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","classes/RSpec/Core/MockingAdapters/Null.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","classes/RSpec/Core/MockingAdapters/RR.html#method-i-teardown_mocks_for_rspec","()",""],["teardown_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","classes/RSpec/Core/MockingAdapters/RSpec.html#method-i-teardown_mocks_for_rspec","()",""],["template_dir_for","RDoc::Options","classes/RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["template_for","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-template_for","(file, page = true, klass = ERB)","<p>Retrieves a cache template for <code>file</code>, if present, or fills the cache.\n"],["template_result","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-template_result","(template, context, template_file)","<p>Creates the result for <code>template</code> with <code>context</code>.  If an error is raised a Pathname <code>template_file</code> will indicate …\n"],["terminal_action=","RSpec::Mocks::AndWrapOriginalImplementation","classes/RSpec/Mocks/AndWrapOriginalImplementation.html#method-i-terminal_action-3D","(_value)",""],["test_9d_returns_partial_dirname","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_9d_returns_partial_dirname","()",""],["test_accept_blank_line","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_blank_line","()","<p>Calls accept_blank_line\n"],["test_accept_block_quote","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_block_quote","()","<p>Calls accept_block_quote\n"],["test_accept_document","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_document","()","<p>Test case that calls <code>@to.accept_document</code>\n"],["test_accept_heading","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading","()","<p>Calls accept_heading with a level 5 RDoc::Markup::Heading\n"],["test_accept_heading_1","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_1","()","<p>Calls accept_heading_1 with a level 1 RDoc::Markup::Heading\n"],["test_accept_heading_2","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_2","()","<p>Calls accept_heading_2 with a level 2 RDoc::Markup::Heading\n"],["test_accept_heading_3","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_3","()","<p>Calls accept_heading_3 with a level 3 RDoc::Markup::Heading\n"],["test_accept_heading_4","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_4","()","<p>Calls accept_heading_4 with a level 4 RDoc::Markup::Heading\n"],["test_accept_heading_b","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_b","()","<p>Calls accept_heading_b with a bold level 1 RDoc::Markup::Heading\n"],["test_accept_heading_indent","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_heading_indent","()","<p>Test case that calls <code>@to.accept_heading</code>\n"],["test_accept_heading_suppressed_crossref","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_heading_suppressed_crossref","()","<p>Calls accept_heading_suppressed_crossref with a level 1 RDoc::Markup::Heading containing a suppressed …\n"],["test_accept_list_end_bullet","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_bullet","()","<p>Calls accept_list_end_bullet\n"],["test_accept_list_end_label","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_label","()","<p>Calls accept_list_end_label\n"],["test_accept_list_end_lalpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_lalpha","()","<p>Calls accept_list_end_lalpha\n"],["test_accept_list_end_note","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_note","()","<p>Calls accept_list_end_note\n"],["test_accept_list_end_number","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_number","()","<p>Calls accept_list_end_number\n"],["test_accept_list_end_ualpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_end_ualpha","()","<p>Calls accept_list_end_ualpha\n"],["test_accept_list_item_end_bullet","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_bullet","()","<p>Calls accept_list_item_end_bullet\n"],["test_accept_list_item_end_label","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_label","()","<p>Calls accept_list_item_end_label\n"],["test_accept_list_item_end_lalpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_lalpha","()","<p>Calls accept_list_item_end_lalpha\n"],["test_accept_list_item_end_note","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_note","()","<p>Calls accept_list_item_end_note\n"],["test_accept_list_item_end_number","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_number","()","<p>Calls accept_list_item_end_number\n"],["test_accept_list_item_end_ualpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_end_ualpha","()","<p>Calls accept_list_item_end_ualpha\n"],["test_accept_list_item_start_bullet","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_bullet","()","<p>Calls accept_list_item_start_bullet\n"],["test_accept_list_item_start_label","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_label","()","<p>Calls accept_list_item_start_label\n"],["test_accept_list_item_start_lalpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_lalpha","()","<p>Calls accept_list_item_start_lalpha\n"],["test_accept_list_item_start_note","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note","()","<p>Calls accept_list_item_start_note\n"],["test_accept_list_item_start_note_2","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note_2","()","<p>Calls accept_list_item_start_note_2\n"],["test_accept_list_item_start_note_multi_description","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note_multi_description","()","<p>Calls accept_list_item_start_note_multi_description\n"],["test_accept_list_item_start_note_multi_label","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_note_multi_label","()","<p>Calls accept_list_item_start_note_multi_label\n"],["test_accept_list_item_start_number","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_number","()","<p>Calls accept_list_item_start_number\n"],["test_accept_list_item_start_ualpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_item_start_ualpha","()","<p>Calls accept_list_item_start_ualpha\n"],["test_accept_list_start_bullet","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_bullet","()","<p>Calls accept_list_start_bullet\n"],["test_accept_list_start_label","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_label","()","<p>Calls accept_list_start_label\n"],["test_accept_list_start_lalpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_lalpha","()","<p>Calls accept_list_start_lalpha\n"],["test_accept_list_start_note","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_note","()","<p>Calls accept_list_start_note\n"],["test_accept_list_start_number","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_number","()","<p>Calls accept_list_start_number\n"],["test_accept_list_start_ualpha","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_list_start_ualpha","()","<p>Calls accept_list_start_ualpha\n"],["test_accept_paragraph","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph","()","<p>Calls accept_paragraph\n"],["test_accept_paragraph_b","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_b","()","<p>Calls accept_paragraph_b with a RDoc::Markup::Paragraph containing bold words\n"],["test_accept_paragraph_br","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_br","()","<p>Calls accept_paragraph_br with a RDoc::Markup::Paragraph containing a &lt;br&gt;\n"],["test_accept_paragraph_break","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_break","()","<p>Calls accept_paragraph with a Paragraph containing a hard break\n"],["test_accept_paragraph_i","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_i","()","<p>Calls accept_paragraph_i with a RDoc::Markup::Paragraph containing emphasized words\n"],["test_accept_paragraph_indent","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_paragraph_indent","()","<p>Test case that calls <code>@to.accept_paragraph</code> with an indent\n"],["test_accept_paragraph_plus","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_plus","()","<p>Calls accept_paragraph_plus with a RDoc::Markup::Paragraph containing teletype words\n"],["test_accept_paragraph_star","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_star","()","<p>Calls accept_paragraph_star with a RDoc::Markup::Paragraph containing bold words\n"],["test_accept_paragraph_underscore","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_paragraph_underscore","()","<p>Calls accept_paragraph_underscore with a RDoc::Markup::Paragraph containing emphasized words\n"],["test_accept_paragraph_wrap","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_paragraph_wrap","()","<p>Test case that calls <code>@to.accept_paragraph</code> with a long line\n"],["test_accept_raw","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_raw","()","<p>Calls accept_raw with a RDoc::Markup::Raw\n"],["test_accept_rule","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_rule","()","<p>Calls accept_rule with a RDoc::Markup::Rule\n"],["test_accept_rule_indent","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_rule_indent","()","<p>Test case that calls <code>@to.accept_rule</code>\n"],["test_accept_verbatim","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_accept_verbatim","()","<p>Calls accept_verbatim with a RDoc::Markup::Verbatim\n"],["test_accept_verbatim_big_indent","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_verbatim_big_indent","()","<p>Test case that calls <code>@to.accept_verbatim</code> with a big indent\n"],["test_accept_verbatim_indent","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_accept_verbatim_indent","()","<p>Test case that calls <code>@to.accept_verbatim</code>\n"],["test_actions_of_various_arity_are_ok_with_args","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_actions_of_various_arity_are_ok_with_args","()",""],["test_add_default_exclude_list","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_add_default_exclude_list","()",""],["test_add_many","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_add_many","()",""],["test_add_matching","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_add_matching","()",""],["test_add_return","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_add_return","()",""],["test_all_and_extra_arguments_with_named_arguments","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_all_and_extra_arguments_with_named_arguments","()",""],["test_all_and_extra_arguments_without_named_arguments","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_all_and_extra_arguments_without_named_arguments","()",""],["test_all_multitasks_wait_on_slow_prerequisites","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-test_all_multitasks_wait_on_slow_prerequisites","()",""],["test_all_prerequisite_tasks_does_not_include_duplicates","TestRakeTask","classes/TestRakeTask.html#method-i-test_all_prerequisite_tasks_does_not_include_duplicates","()",""],["test_all_prerequisite_tasks_includes_all_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_all_prerequisite_tasks_includes_all_prerequisites","()",""],["test_all_prerequisite_tasks_includes_self_on_cyclic_dependencies","TestRakeTask","classes/TestRakeTask.html#method-i-test_all_prerequisite_tasks_includes_self_on_cyclic_dependencies","()",""],["test_always_multitask","TestRakeTask","classes/TestRakeTask.html#method-i-test_always_multitask","()",""],["test_anonymous_namespace","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_anonymous_namespace","()",""],["test_anonymous_tasks_can_be_invoked_indirectly","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_anonymous_tasks_can_be_invoked_indirectly","()",""],["test_append","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_append","()",""],["test_append_one_circular","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_append_one_circular","()",""],["test_append_pathname","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_append_pathname","()",""],["test_append_two_circular","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_append_two_circular","()",""],["test_append_with_one_argument","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_append_with_one_argument","()",""],["test_arg_list_is_empty_if_no_args_given","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_arg_list_is_empty_if_no_args_given","()",""],["test_args_do_not_reference_env_values","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_args_do_not_reference_env_values","()",""],["test_args_given","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_args_given","()",""],["test_args_knows_its_names","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_args_knows_its_names","()",""],["test_args_not_passed_if_no_arg_names","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_args_not_passed_if_no_arg_names","()",""],["test_args_not_passed_if_no_prereq_names_on_multitask","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_args_not_passed_if_no_prereq_names_on_multitask","()",""],["test_args_not_passed_if_no_prereq_names_on_task","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_args_not_passed_if_no_prereq_names_on_task","()",""],["test_arguments_are_passed_to_all_blocks","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_arguments_are_passed_to_all_blocks","()",""],["test_arguments_are_passed_to_block","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_arguments_are_passed_to_block","()",""],["test_array_comparisons","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_array_comparisons","()",""],["test_array_equality","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_array_equality","()",""],["test_array_operators","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_array_operators","()",""],["test_arrays_can_be_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_arrays_can_be_prerequisites","()",""],["test_attributes","RDoc::Markup::TextFormatterTestCase","classes/RDoc/Markup/TextFormatterTestCase.html#method-i-test_attributes","()","<p>Test case that calls <code>@to.attributes</code> with an escaped cross-reference.  If this test doesn&#39;t pass something …\n"],["test_backtrace","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_backtrace","()",""],["test_backtrace_with_error","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_backtrace_with_error","()",""],["test_backtrace_with_following_task_name","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_backtrace_with_following_task_name","()",""],["test_backtrace_with_stderr","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_backtrace_with_stderr","()",""],["test_backtrace_with_stdout","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_backtrace_with_stdout","()",""],["test_bad_option","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_bad_option","()",""],["test_bad_run","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_bad_run","()",""],["test_bad_run_includes_exception_name","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_bad_run_includes_exception_name","()",""],["test_bad_run_with_backtrace","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_bad_run_with_backtrace","()",""],["test_bad_run_with_trace","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_bad_run_with_trace","()",""],["test_banner","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_banner","()",""],["test_basic_array_functions","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_basic_array_functions","()",""],["test_bin_rake_suppressed","TestBacktraceSuppression","classes/TestBacktraceSuppression.html#method-i-test_bin_rake_suppressed","()",""],["test_block_verbose_false_should_not_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_block_verbose_false_should_not_show_command","()",""],["test_block_verbose_true_should_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_block_verbose_true_should_show_command","()",""],["test_block_with_no_parameters_is_ok","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_block_with_no_parameters_is_ok","()",""],["test_building_imported_files_on_demand","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_building_imported_files_on_demand","()",""],["test_by_default_rakelib_files_are_included","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_by_default_rakelib_files_are_included","()",""],["test_can_double_invoke_with_reenable","TestRakeTask","classes/TestRakeTask.html#method-i-test_can_double_invoke_with_reenable","()",""],["test_can_handle_commas_in_args","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_can_handle_commas_in_args","()",""],["test_can_handle_spaces_between_args","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_can_handle_spaces_between_args","()",""],["test_can_invoke_task_in_nested_namespace","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_can_invoke_task_in_nested_namespace","()",""],["test_can_invoke_task_in_toplevel_namespace","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_can_invoke_task_in_toplevel_namespace","()",""],["test_can_load_rake_library","TestRakeRequire","classes/TestRakeRequire.html#method-i-test_can_load_rake_library","()",""],["test_can_override_application","TestRake","classes/TestRake.html#method-i-test_can_override_application","()",""],["test_can_use_blocks","TestRakeDirectoryTask","classes/TestRakeDirectoryTask.html#method-i-test_can_use_blocks","()",""],["test_can_use_pathname","TestRakeDirectoryTask","classes/TestRakeDirectoryTask.html#method-i-test_can_use_pathname","()",""],["test_child_hides_parent_arg_names","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_child_hides_parent_arg_names","()",""],["test_claim_to_be_a_filelist_instance","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_claim_to_be_a_filelist_instance","()",""],["test_claim_to_be_a_kind_of_array","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_claim_to_be_a_kind_of_array","()",""],["test_claim_to_be_a_kind_of_filelist","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_claim_to_be_a_kind_of_filelist","()",""],["test_clean","TestRakeClean","classes/TestRakeClean.html#method-i-test_clean","()",""],["test_cleanup","TestRakeClean","classes/TestRakeClean.html#method-i-test_cleanup","()",""],["test_cleanup_ignores_missing_files","TestRakeClean","classes/TestRakeClean.html#method-i-test_cleanup_ignores_missing_files","()",""],["test_clear","TestRakeTask","classes/TestRakeTask.html#method-i-test_clear","()",""],["test_clear_actions","TestRakeTask","classes/TestRakeTask.html#method-i-test_clear_actions","()",""],["test_clear_comments","TestRakeTask","classes/TestRakeTask.html#method-i-test_clear_comments","()",""],["test_clear_ignore_patterns","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_clear_ignore_patterns","()",""],["test_clear_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_clear_prerequisites","()",""],["test_clone","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_clone","()",""],["test_clone_and_dup","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_clone_and_dup","()",""],["test_cloned_items_stay_frozen","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_cloned_items_stay_frozen","()",""],["test_close_date","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-test_close_date","()",""],["test_close_matches_on_name_do_not_trigger_rule","TestRakeRules","classes/TestRakeRules.html#method-i-test_close_matches_on_name_do_not_trigger_rule","()",""],["test_comment_after_desc_is_ignored","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_comment_after_desc_is_ignored","()",""],["test_comment_before_desc_is_ignored","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_comment_before_desc_is_ignored","()",""],["test_comment_before_task_acts_like_desc","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_comment_before_task_acts_like_desc","()",""],["test_comment_separated_from_task_by_blank_line_is_not_picked_up","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_comment_separated_from_task_by_blank_line_is_not_picked_up","()",""],["test_comment_setting","TestRakeTask","classes/TestRakeTask.html#method-i-test_comment_setting","()","<p>NOTE: Rail-ties uses comment=.\n"],["test_comments_do_not_set","TestRakeTask","classes/TestRakeTask.html#method-i-test_comments_do_not_set","()",""],["test_comments_is_nil","TestRakeTask","classes/TestRakeTask.html#method-i-test_comments_is_nil","()",""],["test_comments_with_decimal_points","TestRakeTask","classes/TestRakeTask.html#method-i-test_comments_with_decimal_points","()",""],["test_comments_with_sentences","TestRakeTask","classes/TestRakeTask.html#method-i-test_comments_with_sentences","()",""],["test_comments_with_tabbed_sentences","TestRakeTask","classes/TestRakeTask.html#method-i-test_comments_with_tabbed_sentences","()",""],["test_complex_patterns","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_complex_patterns","()",""],["test_conj_against_two_elements","TestRakeScope","classes/TestRakeScope.html#method-i-test_conj_against_two_elements","()",""],["test_conj_on_invocation_chains","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_conj_on_invocation_chains","()",""],["test_conjunction","TestLinkedList","classes/TestLinkedList.html#method-i-test_conjunction","()",""],["test_continue","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_continue","()",""],["test_conversion_to_string","TestLinkedList","classes/TestLinkedList.html#method-i-test_conversion_to_string","()",""],["test_conversion_with_inspect","TestLinkedList","classes/TestLinkedList.html#method-i-test_conversion_with_inspect","()",""],["test_correct_number_of_tasks_reported","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_correct_number_of_tasks_reported","()",""],["test_correctly_scoped_prerequisites_are_invoked","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_correctly_scoped_prerequisites_are_invoked","()",""],["test_count","TestRakeCpuCounter","classes/TestRakeCpuCounter.html#method-i-test_count","()",""],["test_count","TestRakeCpuCounter::TestClassMethod","classes/TestRakeCpuCounter/TestClassMethod.html#method-i-test_count","()",""],["test_count_nil","TestRakeCpuCounter::TestClassMethod","classes/TestRakeCpuCounter/TestClassMethod.html#method-i-test_count_nil","()",""],["test_count_raise","TestRakeCpuCounter::TestClassMethod","classes/TestRakeCpuCounter/TestClassMethod.html#method-i-test_count_raise","()",""],["test_count_with_default_nil","TestRakeCpuCounter","classes/TestRakeCpuCounter.html#method-i-test_count_with_default_nil","()",""],["test_count_with_default_raise","TestRakeCpuCounter","classes/TestRakeCpuCounter.html#method-i-test_count_with_default_raise","()",""],["test_create","TestRakeEarlyTime","classes/TestRakeEarlyTime.html#method-i-test_create","()",""],["test_create","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create","()",""],["test_create","TestRakeTask","classes/TestRakeTask.html#method-i-test_create","()",""],["test_create_filetask_in_namespace","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_create_filetask_in_namespace","()",""],["test_create_task_manager","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_create_task_manager","()",""],["test_create_with_args","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create_with_args","()",""],["test_create_with_block","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create_with_block","()",""],["test_create_with_brackets","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create_with_brackets","()",""],["test_create_with_brackets_and_filelist","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create_with_brackets_and_filelist","()",""],["test_create_with_pathname","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_create_with_pathname","()",""],["test_create_with_source","TestRakeRules","classes/TestRakeRules.html#method-i-test_create_with_source","()",""],["test_creating_new_argument_scopes","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_creating_new_argument_scopes","()",""],["test_curly_bracket_pattern","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_curly_bracket_pattern","()",""],["test_d_returns_dirname","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_d_returns_dirname","()",""],["test_dash_f_with_no_arg_foils_rakefile_lookup","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_dash_f_with_no_arg_foils_rakefile_lookup","()",""],["test_dash_returns_empty_string","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_dash_returns_empty_string","()",""],["test_default_arguments_that_dont_match_names_are_ignored","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_default_arguments_that_dont_match_names_are_ignored","()",""],["test_default_arguments_values_can_be_merged","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_default_arguments_values_can_be_merged","()",""],["test_default_exclude","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_default_exclude","()",""],["test_default_options","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_default_options","()",""],["test_default_task_collection","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_default_task_collection","()",""],["test_define_namespace_in_namespace","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_define_namespace_in_namespace","()",""],["test_define_namespaced_task","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_define_namespaced_task","()",""],["test_define_task","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_define_task","()",""],["test_defined","TestRakeTask","classes/TestRakeTask.html#method-i-test_defined","()",""],["test_delegating_methods_do_not_include_to_a_or_to_ary","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_delegating_methods_do_not_include_to_a_or_to_ary","()",""],["test_describe","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_describe","()",""],["test_describe_tasks","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_describe_tasks","()",""],["test_describe_with_pattern","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_describe_with_pattern","()",""],["test_directory","TestRakeDirectoryTask","classes/TestRakeDirectoryTask.html#method-i-test_directory","()",""],["test_directory","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-test_directory","()",""],["test_directory","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-test_directory","()",""],["test_directory_colon","TestRakeDirectoryTask","classes/TestRakeDirectoryTask.html#method-i-test_directory_colon","()",""],["test_directory_win32","TestRakeDirectoryTask","classes/TestRakeDirectoryTask.html#method-i-test_directory_win32","()",""],["test_display_exception_details","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_exception_details","()",""],["test_display_exception_details_cause","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_exception_details_cause","()",""],["test_display_exception_details_cause_loop","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_exception_details_cause_loop","()",""],["test_display_prereqs","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_prereqs","()",""],["test_display_task_run","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_task_run","()",""],["test_display_tasks","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_tasks","()",""],["test_display_tasks_with_long_comments","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_tasks_with_long_comments","()",""],["test_display_tasks_with_long_comments_to_a_non_tty_shows_entire_comment","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_tasks_with_long_comments_to_a_non_tty_shows_entire_comment","()",""],["test_display_tasks_with_task_name_wider_than_tty_display","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_tasks_with_task_name_wider_than_tty_display","()",""],["test_display_tasks_with_very_long_task_name_to_a_non_tty_shows_name_and_comment","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_display_tasks_with_very_long_task_name_to_a_non_tty_shows_name_and_comment","()",""],["test_dont_claim_to_be_an_array_instance","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_dont_claim_to_be_an_array_instance","()",""],["test_dot_rake_files_can_be_loaded_with_dash_r","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_dot_rake_files_can_be_loaded_with_dash_r","()",""],["test_dry_run","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_dry_run","()",""],["test_dry_run","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_dry_run","()",""],["test_dry_run_bug","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_dry_run_bug","()","<p>Test for the trace/dry_run bug found by Brian Chandler\n"],["test_dry_run_prevents_actions","TestRakeTask","classes/TestRakeTask.html#method-i-test_dry_run_prevents_actions","()",""],["test_dup_and_clone_replicate_taint","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_dup_and_clone_replicate_taint","()",""],["test_duped_items_will_thaw","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_duped_items_will_thaw","()",""],["test_duplicate_comments","TestRakeTask","classes/TestRakeTask.html#method-i-test_duplicate_comments","()",""],["test_each_dir_parent","TestRake","classes/TestRake.html#method-i-test_each_dir_parent","()",""],["test_egrep_returns_0_if_no_matches","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_egrep_returns_0_if_no_matches","()",""],["test_egrep_with_block","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_egrep_with_block","()",""],["test_egrep_with_error","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_egrep_with_error","()",""],["test_egrep_with_output","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_egrep_with_output","()",""],["test_empty_arg_list_is_empty","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_empty_arg_list_is_empty","()",""],["test_empty_args","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_empty_args","()",""],["test_empty_list","TestLinkedList","classes/TestLinkedList.html#method-i-test_empty_list","()",""],["test_end_accepting","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_end_accepting","()","<p>Calls end_accepting on your test case which needs to call <code>@to.end_accepting</code> and verify document generation …\n"],["test_enumerable_behavior","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_enumerable_behavior","()",""],["test_enumeration_methods","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_enumeration_methods","()",""],["test_env_available_at_task_scope","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_env_available_at_task_scope","()",""],["test_env_available_at_top_scope","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_env_available_at_top_scope","()",""],["test_environment_and_tasks_together","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_environment_and_tasks_together","()",""],["test_environment_definition","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_environment_definition","()",""],["test_equality","TestRakeEarlyTime","classes/TestRakeEarlyTime.html#method-i-test_equality","()",""],["test_exceptions","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_exceptions","()","<p>test that throwing an exception way down in the blocks propagates to the top\n"],["test_exclude","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_exclude","()",""],["test_exclude_pathname","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_exclude_pathname","()",""],["test_exclude_return_on_create","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_exclude_return_on_create","()",""],["test_exclude_with_alternate_file_seps","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_exclude_with_alternate_file_seps","()",""],["test_exclude_with_string_return_on_create","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_exclude_with_string_return_on_create","()",""],["test_excluding_via_block","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_excluding_via_block","()",""],["test_execute","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_execute","()",""],["test_execute_and_continue","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_execute_and_continue","()",""],["test_execute_and_print","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_execute_and_print","()",""],["test_existing","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_existing","()",""],["test_existing!","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_existing-21","()",""],["test_existing_file_depends_on_non_existing_file","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_existing_file_depends_on_non_existing_file","()",""],["test_explode","TestRakePathMapExplode","classes/TestRakePathMapExplode.html#method-i-test_explode","()",""],["test_ext_works_on_pathnames","TestRakePathnameExtensions","classes/TestRakePathnameExtensions.html#method-i-test_ext_works_on_pathnames","()",""],["test_extended_comments","TestRakeTask","classes/TestRakeTask.html#method-i-test_extended_comments","()",""],["test_extension_complains_when_a_method_that_is_present","TestRakeExtension","classes/TestRakeExtension.html#method-i-test_extension_complains_when_a_method_that_is_present","()",""],["test_extra_args_with_less_than_named_arguments","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_extra_args_with_less_than_named_arguments","()",""],["test_extra_names_are_nil","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_extra_names_are_nil","()",""],["test_extra_parameters_are_ignored","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_extra_parameters_are_ignored","()",""],["test_f_returns_basename","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_f_returns_basename","()",""],["test_failing_test_sets_exit_status","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_failing_test_sets_exit_status","()",""],["test_falsey_dependencies","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_falsey_dependencies","()",""],["test_far_date","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-test_far_date","()",""],["test_file_creation_task","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_file_creation_task","()",""],["test_file_depends_on_task_depend_on_file","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_file_depends_on_task_depend_on_file","()",""],["test_file_list_env_test","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_file_list_env_test","()",""],["test_file_list_is_requirable_separately","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_file_list_is_requirable_separately","()",""],["test_file_list_supports_pathmap","TestRakeFileListPathMap","classes/TestRakeFileListPathMap.html#method-i-test_file_list_supports_pathmap","()",""],["test_file_names_beginning_with_dot_can_be_tricked_into_referring_to_file","TestRakeRules","classes/TestRakeRules.html#method-i-test_file_names_beginning_with_dot_can_be_tricked_into_referring_to_file","()",""],["test_file_names_beginning_with_dot_can_be_wrapped_in_lambda","TestRakeRules","classes/TestRakeRules.html#method-i-test_file_names_beginning_with_dot_can_be_wrapped_in_lambda","()",""],["test_file_names_containing_percent_can_be_wrapped_in_lambda","TestRakeRules","classes/TestRakeRules.html#method-i-test_file_names_containing_percent_can_be_wrapped_in_lambda","()",""],["test_file_need","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_file_need","()",""],["test_file_needed","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-test_file_needed","()",""],["test_file_task","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_file_task","()",""],["test_file_task_are_not_scoped_by_namespaces","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_file_task_are_not_scoped_by_namespaces","()",""],["test_file_task_dependencies_scoped_by_namespaces","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_file_task_dependencies_scoped_by_namespaces","()",""],["test_file_times_new_depend_on_regular_task_timestamps","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_file_times_new_depend_on_regular_task_timestamps","()",""],["test_file_times_new_depends_on_old","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_file_times_new_depends_on_old","()",""],["test_file_times_old_depends_on_new","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_file_times_old_depends_on_new","()",""],["test_file_utils_can_use_filelists","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_file_utils_can_use_filelists","()",""],["test_file_utils_methods_are_available_at_top_level","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_file_utils_methods_are_available_at_top_level","()",""],["test_filelist_ext","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_filelist_ext","()",""],["test_filelists_can_be_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_filelists_can_be_prerequisites","()",""],["test_files=","Rake::TestTask","classes/Rake/TestTask.html#method-i-test_files-3D","(list)","<p>Explicitly define the list of test files to be included in a test.  <code>list</code> is expected to be an array of …\n"],["test_fileutils_methods_dont_leak","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_fileutils_methods_dont_leak","()",""],["test_find","TestRakeTask","classes/TestRakeTask.html#method-i-test_find","()",""],["test_finding_rakefile","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_finding_rakefile","()",""],["test_flatten","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_flatten","()",""],["test_general","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-test_general","()",""],["test_good_arg_patterns","TestRakeTaskManagerArgumentResolution","classes/TestRakeTaskManagerArgumentResolution.html#method-i-test_good_arg_patterns","()",""],["test_good_run","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_good_run","()",""],["test_gsub","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_gsub","()",""],["test_gsub!","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_gsub-21","()",""],["test_handle_options_should_not_strip_options_from_argv","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_handle_options_should_not_strip_options_from_argv","()",""],["test_handle_options_trace_default_is_stderr","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_handle_options_trace_default_is_stderr","()",""],["test_handle_options_trace_does_not_eat_following_task_names","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_handle_options_trace_does_not_eat_following_task_names","()",""],["test_handle_options_trace_overrides_to_stdout","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_handle_options_trace_overrides_to_stdout","()",""],["test_has_key","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_has_key","()",""],["test_help","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_help","()",""],["test_ignore_special","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_ignore_special","()",""],["test_implicit_file_dependencies","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_implicit_file_dependencies","()",""],["test_implicit_system","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_implicit_system","()",""],["test_import","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-test_import","()",""],["test_imports","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_imports","()",""],["test_include_with_another_array","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_include_with_another_array","()",""],["test_include_with_another_filelist","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_include_with_another_filelist","()",""],["test_include_with_pathname","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_include_with_pathname","()",""],["test_incremental_definitions","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_incremental_definitions","()",""],["test_index","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_index","()",""],["test_initialize","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_initialize","()",""],["test_initialize","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_initialize","()",""],["test_initialize_no_version","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_initialize_no_version","()",""],["test_initialize_noversion","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_initialize_noversion","()",""],["test_initialize_override","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_initialize_override","()",""],["test_inline_verbose_default_should_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_inline_verbose_default_should_show_command","()",""],["test_inline_verbose_false_should_not_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_inline_verbose_false_should_not_show_command","()",""],["test_inline_verbose_true_should_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_inline_verbose_true_should_show_command","()",""],["test_inspect","TestRakeTask","classes/TestRakeTask.html#method-i-test_inspect","()",""],["test_inspect_pending","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_inspect_pending","()",""],["test_interspersed_duplicate_comments","TestRakeTask","classes/TestRakeTask.html#method-i-test_interspersed_duplicate_comments","()",""],["test_invalid_command_line_options","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_invalid_command_line_options","()",""],["test_investigation_output","TestRakeTask","classes/TestRakeTask.html#method-i-test_investigation_output","()",""],["test_invoke","TestRakeTask","classes/TestRakeTask.html#method-i-test_invoke","()",""],["test_invoke_with_circular_dependencies","TestRakeTask","classes/TestRakeTask.html#method-i-test_invoke_with_circular_dependencies","()",""],["test_item_dequeued","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_item_dequeued","()",""],["test_item_queued","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_item_queued","()",""],["test_jobs","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_jobs","()",""],["test_keeps_embedded_spaces","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_keeps_embedded_spaces","()",""],["test_late_time_comparisons","TestRakeLateTime","classes/TestRakeLateTime.html#method-i-test_late_time_comparisons","()",""],["test_libdir","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_libdir","()",""],["test_libs_equals","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_libs_equals","()",""],["test_libs_equals_empty","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_libs_equals_empty","()",""],["test_list_nested","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_list_nested","()","<p>Calls list_nested with a two-level list\n"],["test_list_verbatim","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_list_verbatim","()","<p>Calls list_verbatim with a list containing a verbatim block\n"],["test_list_with_one_item","TestLinkedList","classes/TestLinkedList.html#method-i-test_list_with_one_item","()",""],["test_list_with_several_items","TestLinkedList","classes/TestLinkedList.html#method-i-test_list_with_several_items","()",""],["test_lists_are_enumerable","TestLinkedList","classes/TestLinkedList.html#method-i-test_lists_are_enumerable","()",""],["test_lists_are_structurally_equivalent","TestLinkedList","classes/TestLinkedList.html#method-i-test_lists_are_structurally_equivalent","()",""],["test_ln","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_ln","()",""],["test_load_from_calculated_system_rakefile","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_from_calculated_system_rakefile","()",""],["test_load_from_system_rakefile","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_from_system_rakefile","()",""],["test_load_rakefile","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile","()",""],["test_load_rakefile_doesnt_print_rakefile_directory_from_same_dir","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile_doesnt_print_rakefile_directory_from_same_dir","()",""],["test_load_rakefile_doesnt_print_rakefile_directory_from_subdir_if_silent","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile_doesnt_print_rakefile_directory_from_subdir_if_silent","()",""],["test_load_rakefile_from_subdir","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile_from_subdir","()",""],["test_load_rakefile_not_found","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile_not_found","()",""],["test_load_rakefile_prints_rakefile_directory_from_subdir","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_load_rakefile_prints_rakefile_directory_from_subdir","()",""],["test_loading_imports","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_loading_imports","()",""],["test_long_description","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_long_description","()",""],["test_lookup_with_explicit_scopes","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_lookup_with_explicit_scopes","()",""],["test_make_on_invocation_chains","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_make_on_invocation_chains","()",""],["test_make_with_no_arguments","TestLinkedList","classes/TestLinkedList.html#method-i-test_make_with_no_arguments","()",""],["test_make_with_one_argument","TestLinkedList","classes/TestLinkedList.html#method-i-test_make_with_one_argument","()",""],["test_make_with_two_arguments","TestLinkedList","classes/TestLinkedList.html#method-i-test_make_with_two_arguments","()",""],["test_match","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_match","()",""],["test_member_eh_one","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_member_eh_one","()",""],["test_member_eh_two","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_member_eh_two","()",""],["test_methods_actually_exist","TestRakeExtension","classes/TestRakeExtension.html#method-i-test_methods_actually_exist","()",""],["test_missing_dependencies","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_missing_dependencies","()",""],["test_missing_other_constant","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-test_missing_other_constant","()",""],["test_missing_require","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_missing_require","()",""],["test_multi_collapse","TestRakeBacktrace","classes/TestRakeBacktrace.html#method-i-test_multi_collapse","()",""],["test_multi_desc","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_multi_desc","()",""],["test_multi_invocations","TestRakeTask","classes/TestRakeTask.html#method-i-test_multi_invocations","()",""],["test_multiline_environment_definition","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_multiline_environment_definition","()",""],["test_multiple_comments","TestRakeTask","classes/TestRakeTask.html#method-i-test_multiple_comments","()",""],["test_multiple_items","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_multiple_items","()",""],["test_multiple_patterns","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_multiple_patterns","()",""],["test_multiple_patterns","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_multiple_patterns","()",""],["test_multiple_rules1","TestRakeRules","classes/TestRakeRules.html#method-i-test_multiple_rules1","()",""],["test_multiple_rules2","TestRakeRules","classes/TestRakeRules.html#method-i-test_multiple_rules2","()",""],["test_multiple_values_in_args","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_multiple_values_in_args","()",""],["test_multitask","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_multitask","()",""],["test_multitasks_with_parameters","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-test_multitasks_with_parameters","()",""],["test_n_returns_basename_without_extension","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_n_returns_basename_without_extension","()",""],["test_name_and_needs","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_name_and_needs","()",""],["test_name_args_and_prereqs","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_name_args_and_prereqs","()",""],["test_name_lookup","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_name_lookup","()",""],["test_name_lookup_in_multiple_scopes","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_name_lookup_in_multiple_scopes","()",""],["test_name_lookup_with_implicit_file_tasks","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_name_lookup_with_implicit_file_tasks","()",""],["test_name_lookup_with_nonexistent_task","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_name_lookup_with_nonexistent_task","()",""],["test_name_only","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_name_only","()",""],["test_name_with_args","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_name_with_args","()",""],["test_named_args","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_named_args","()",""],["test_named_args_are_passed_to_prereqs","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_named_args_are_passed_to_prereqs","()",""],["test_namespace","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-test_namespace","()",""],["test_namespace_command","TestRakeDsl","classes/TestRakeDsl.html#method-i-test_namespace_command","()",""],["test_namespace_command_with_a_string_like_object","TestRakeDsl","classes/TestRakeDsl.html#method-i-test_namespace_command_with_a_string_like_object","()",""],["test_namespace_command_with_bad_name","TestRakeDsl","classes/TestRakeDsl.html#method-i-test_namespace_command_with_bad_name","()",""],["test_namespace_creation","TestRakeNameSpace","classes/TestRakeNameSpace.html#method-i-test_namespace_creation","()",""],["test_namespace_lookup","TestRakeNameSpace","classes/TestRakeNameSpace.html#method-i-test_namespace_lookup","()",""],["test_namespace_reports_tasks_it_owns","TestRakeNameSpace","classes/TestRakeNameSpace.html#method-i-test_namespace_reports_tasks_it_owns","()",""],["test_namespace_task_create","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_namespace_task_create","()",""],["test_namespace_yields_same_namespace_as_returned","TestRakeTaskManager","classes/TestRakeTaskManager.html#method-i-test_namespace_yields_same_namespace_as_returned","()",""],["test_near_system_dir_isnt_suppressed","TestBacktraceSuppression","classes/TestBacktraceSuppression.html#method-i-test_near_system_dir_isnt_suppressed","()",""],["test_needed_eh_build_all","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_needed_eh_build_all","()",""],["test_needed_eh_dependency","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_needed_eh_dependency","()",""],["test_needed_eh_exists","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_needed_eh_exists","()",""],["test_no_args_given","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_no_args_given","()",""],["test_no_commands_constant","TestRakeDsl","classes/TestRakeDsl.html#method-i-test_no_commands_constant","()",""],["test_no_deprecated_dsl","TestRakeReduceCompat","classes/TestRakeReduceCompat.html#method-i-test_no_deprecated_dsl","()",""],["test_no_deprecated_messages","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_no_deprecated_messages","()",""],["test_no_double_invoke","TestRakeTask","classes/TestRakeTask.html#method-i-test_no_double_invoke","()",""],["test_no_rakeopt","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_no_rakeopt","()",""],["test_no_retriggers_on_file_task","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-test_no_retriggers_on_file_task","()",""],["test_no_retriggers_on_filecreate_task","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-test_no_retriggers_on_filecreate_task","()",""],["test_no_search","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_no_search","()",""],["test_no_system","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_no_system","()",""],["test_no_system","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_no_system","()",""],["test_no_warning_when_defining_ok_method","TestRakeExtension","classes/TestRakeExtension.html#method-i-test_no_warning_when_defining_ok_method","()",""],["test_non_extension_rule_name_refers_to_file","TestRakeRules","classes/TestRakeRules.html#method-i-test_non_extension_rule_name_refers_to_file","()",""],["test_nosearch_with_rakefile_uses_local_rakefile","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_nosearch_with_rakefile_uses_local_rakefile","()",""],["test_nosearch_without_rakefile_and_no_system_fails","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_nosearch_without_rakefile_and_no_system_fails","()",""],["test_nosearch_without_rakefile_finds_system","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_nosearch_without_rakefile_finds_system","()",""],["test_not_finding_rakefile","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_not_finding_rakefile","()",""],["test_nowrite","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_nowrite","()",""],["test_one_argument","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_one_argument","()",""],["test_original_dir_reports_current_dir","TestRake","classes/TestRake.html#method-i-test_original_dir_reports_current_dir","()",""],["test_original_time_compare_is_not_messed_up","TestRakeEarlyTime","classes/TestRakeEarlyTime.html#method-i-test_original_time_compare_is_not_messed_up","()",""],["test_other_array_returning_methods","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_other_array_returning_methods","()",""],["test_p_returns_entire_pathname","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_p_returns_entire_pathname","()",""],["test_package_name","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_package_name","()",""],["test_package_name_noversion","TestRakePackageTask","classes/TestRakePackageTask.html#method-i-test_package_name_noversion","()",""],["test_parse","TestRakeMakefileLoader","classes/TestRakeMakefileLoader.html#method-i-test_parse","()",""],["test_partial_directory_selection_works_with_patterns","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_partial_directory_selection_works_with_patterns","()",""],["test_paste","TestRakeTaskLib","classes/TestRakeTaskLib.html#method-i-test_paste","()",""],["test_path_against_empty_scope","TestRakeScope","classes/TestRakeScope.html#method-i-test_path_against_empty_scope","()",""],["test_path_against_one_element","TestRakeScope","classes/TestRakeScope.html#method-i-test_path_against_one_element","()",""],["test_path_against_two_elements","TestRakeScope","classes/TestRakeScope.html#method-i-test_path_against_two_elements","()",""],["test_path_map_works_on_pathnames","TestRakePathnameExtensions","classes/TestRakePathnameExtensions.html#method-i-test_path_map_works_on_pathnames","()",""],["test_path_with_task_name","TestRakeScope","classes/TestRakeScope.html#method-i-test_path_with_task_name","()",""],["test_path_with_task_name_against_empty_scope","TestRakeScope","classes/TestRakeScope.html#method-i-test_path_with_task_name_against_empty_scope","()",""],["test_pathmap_automatically_applies_to_name","TestRakeRules","classes/TestRakeRules.html#method-i-test_pathmap_automatically_applies_to_name","()",""],["test_pathmap_partial","TestRakePathMapPartial","classes/TestRakePathMapPartial.html#method-i-test_pathmap_partial","()",""],["test_pattern","TestRakeRakeTestLoader","classes/TestRakeRakeTestLoader.html#method-i-test_pattern","()",""],["test_pattern_can_use_backreferences","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_can_use_backreferences","()",""],["test_pattern_equals","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_pattern_equals","()",""],["test_pattern_equals_test_files_equals","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_pattern_equals_test_files_equals","()",""],["test_pattern_returns_substitutions","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_returns_substitutions","()",""],["test_pattern_with_invalid_operator","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_with_invalid_operator","()",""],["test_pattern_with_no_replacement_nor_block_substitutes_empty_string","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_with_no_replacement_nor_block_substitutes_empty_string","()",""],["test_pattern_with_star_replacement_string_uses_block","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_with_star_replacement_string_uses_block","()",""],["test_pattern_works_with_certain_valid_operators","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_pattern_works_with_certain_valid_operators","()",""],["test_percent_percent_returns_percent","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_percent_percent_returns_percent","()",""],["test_plain_strings_are_just_filenames","TestRakeRules","classes/TestRakeRules.html#method-i-test_plain_strings_are_just_filenames","()",""],["test_plain_strings_as_dependents_refer_to_files","TestRakeRules","classes/TestRakeRules.html#method-i-test_plain_strings_as_dependents_refer_to_files","()",""],["test_pool_creates_the_correct_number_of_threads","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_creates_the_correct_number_of_threads","()",""],["test_pool_executes_in_current_thread_for_zero_threads","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_executes_in_current_thread_for_zero_threads","()",""],["test_pool_executes_in_other_thread_for_pool_of_size_one","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_executes_in_other_thread_for_pool_of_size_one","()",""],["test_pool_executes_in_two_other_threads_for_pool_of_size_two","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_executes_in_two_other_threads_for_pool_of_size_two","()",""],["test_pool_future_does_not_duplicate_arguments","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_future_does_not_duplicate_arguments","()",""],["test_pool_join_empties_queue","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_join_empties_queue","()",""],["test_pool_prevents_deadlock","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_prevents_deadlock","()",""],["test_pool_reports_correct_results","TestRakeTestThreadPool","classes/TestRakeTestThreadPool.html#method-i-test_pool_reports_correct_results","()",""],["test_prereqs","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_prereqs","()",""],["test_prerequisite_can_be_pathname","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_prerequisite_can_be_pathname","()",""],["test_prerequisite_tasks_fails_if_prerequisites_are_undefined","TestRakeTask","classes/TestRakeTask.html#method-i-test_prerequisite_tasks_fails_if_prerequisites_are_undefined","()",""],["test_prerequisite_tasks_honors_namespaces","TestRakeTask","classes/TestRakeTask.html#method-i-test_prerequisite_tasks_honors_namespaces","()",""],["test_prerequisite_tasks_returns_tasks_not_strings","TestRakeTask","classes/TestRakeTask.html#method-i-test_prerequisite_tasks_returns_tasks_not_strings","()",""],["test_printing_original_exception_cause","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_printing_original_exception_cause","()",""],["test_private_reader_is_private","TestPrivateAttrs","classes/TestPrivateAttrs.html#method-i-test_private_reader_is_private","()",""],["test_private_reader_returns_data","TestPrivateAttrs","classes/TestPrivateAttrs.html#method-i-test_private_reader_returns_data","()",""],["test_proc_returning_lists_are_flattened_into_prereqs","TestRakeRules","classes/TestRakeRules.html#method-i-test_proc_returning_lists_are_flattened_into_prereqs","()",""],["test_proper_namespace_access","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_proper_namespace_access","()",""],["test_quiet","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_quiet","()",""],["test_rake_default","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_rake_default","()",""],["test_rake_error_excludes_exception_name","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_rake_error_excludes_exception_name","()",""],["test_rake_error_on_bad_task","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_rake_error_on_bad_task","()",""],["test_rake_explicit_task_library","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_rake_explicit_task_library","()",""],["test_rake_namespace_refers_to_toplevel","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_rake_namespace_refers_to_toplevel","()",""],["test_rakefile","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_rakefile","()",""],["test_rakelib","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_rakelib","()",""],["test_rakeopt_with_blank_options","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_rakeopt_with_blank_options","()",""],["test_rakeopt_with_silent_options","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_rakeopt_with_silent_options","()",""],["test_rbext","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_rbext","()",""],["test_recursive_rules_that_dont_terminate_will_overflow","TestRakeRules","classes/TestRakeRules.html#method-i-test_recursive_rules_that_dont_terminate_will_overflow","()",""],["test_recursive_rules_will_work_as_long_as_they_terminate","TestRakeRules","classes/TestRakeRules.html#method-i-test_recursive_rules_will_work_as_long_as_they_terminate","()",""],["test_regenerate_imports","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_regenerate_imports","()",""],["test_regex_rule_with_args","TestRakeRules","classes/TestRakeRules.html#method-i-test_regex_rule_with_args","()",""],["test_regex_rule_with_args_and_lambda_prereq","TestRakeRules","classes/TestRakeRules.html#method-i-test_regex_rule_with_args_and_lambda_prereq","()",""],["test_reject","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_reject","()",""],["test_require","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_require","()",""],["test_returns_self_with_no_args","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_returns_self_with_no_args","()",""],["test_rm_filelist","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_rm_filelist","()",""],["test_rm_one_file","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_rm_one_file","()",""],["test_rm_two_files","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_rm_two_files","()",""],["test_ruby_with_a_single_string_argument","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_ruby_with_a_single_string_argument","()",""],["test_ruby_with_multiple_arguments","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_ruby_with_multiple_arguments","()",""],["test_rule_can_be_created_by_string","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_can_be_created_by_string","()",""],["test_rule_prereqs_can_be_created_by_string","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_prereqs_can_be_created_by_string","()",""],["test_rule_rebuilds_obj_when_source_is_newer","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_rebuilds_obj_when_source_is_newer","()",""],["test_rule_runs_when_explicit_task_has_no_actions","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_runs_when_explicit_task_has_no_actions","()",""],["test_rule_with_method_prereq","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_method_prereq","()",""],["test_rule_with_one_arg_method_prereq","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_one_arg_method_prereq","()",""],["test_rule_with_proc_dependent_will_trigger","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_proc_dependent_will_trigger","()",""],["test_rule_with_two_sources_builds_both_sources","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_two_sources_builds_both_sources","()",""],["test_rule_with_two_sources_but_one_missing_does_not_run","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_two_sources_but_one_missing_does_not_run","()",""],["test_rule_with_two_sources_runs_if_both_sources_are_present","TestRakeRules","classes/TestRakeRules.html#method-i-test_rule_with_two_sources_runs_if_both_sources_are_present","()",""],["test_rules_chaining_to_file_task","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_rules_chaining_to_file_task","()",""],["test_rules_with_bad_dependents_will_fail","TestRakeRules","classes/TestRakeRules.html#method-i-test_rules_with_bad_dependents_will_fail","()",""],["test_run_code_direct","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_run_code_direct","()",""],["test_run_code_rake","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_run_code_rake","()",""],["test_run_code_rake_default_gem","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_run_code_rake_default_gem","()",""],["test_run_code_testrb_ruby_1_8_2","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_run_code_testrb_ruby_1_8_2","()",""],["test_run_code_testrb_ruby_1_8_6","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_run_code_testrb_ruby_1_8_6","()",""],["test_run_with_bad_options","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_run_with_bad_options","()",""],["test_running_multitasks","TestRakeMultiTask","classes/TestRakeMultiTask.html#method-i-test_running_multitasks","()",""],["test_s_returns_file_separator","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_s_returns_file_separator","()",""],["test_safe_ln_failover_to_cp_on_not_implemented_error","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_safe_ln_failover_to_cp_on_not_implemented_error","()",""],["test_safe_ln_failover_to_cp_on_standard_error","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_safe_ln_failover_to_cp_on_standard_error","()",""],["test_safe_ln_fails_on_script_error","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_safe_ln_fails_on_script_error","()",""],["test_scope","TestRakeNameSpace","classes/TestRakeNameSpace.html#method-i-test_scope","()",""],["test_second_rule_doest_run_if_first_triggers","TestRakeRules","classes/TestRakeRules.html#method-i-test_second_rule_doest_run_if_first_triggers","()",""],["test_second_rule_doest_run_if_first_triggers_with_reversed_rules","TestRakeRules","classes/TestRakeRules.html#method-i-test_second_rule_doest_run_if_first_triggers_with_reversed_rules","()",""],["test_second_rule_runs_when_first_rule_doesnt","TestRakeRules","classes/TestRakeRules.html#method-i-test_second_rule_runs_when_first_rule_doesnt","()",""],["test_sh","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh","()",""],["test_sh_bad_option","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_bad_option","()",""],["test_sh_failure","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_failure","()",""],["test_sh_noop","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_noop","()",""],["test_sh_special_handling","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_special_handling","()",""],["test_sh_verbose","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_verbose","()",""],["test_sh_verbose_false","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_verbose_false","()",""],["test_sh_verbose_flag_nil","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_verbose_flag_nil","()",""],["test_sh_with_a_single_string_argument","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_with_a_single_string_argument","()",""],["test_sh_with_multiple_arguments","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_sh_with_multiple_arguments","()",""],["test_show_lines","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_show_lines","()",""],["test_signal_propagation_in_tests","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_signal_propagation_in_tests","()",""],["test_silent","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_silent","()",""],["test_single_collapse","TestRakeBacktrace","classes/TestRakeBacktrace.html#method-i-test_single_collapse","()",""],["test_single_dependent","TestRakeRules","classes/TestRakeRules.html#method-i-test_single_dependent","()",""],["test_source_is_first_prerequisite","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_source_is_first_prerequisite","()",""],["test_source_is_first_prerequisite","TestRakeTask","classes/TestRakeTask.html#method-i-test_source_is_first_prerequisite","()",""],["test_sources_is_all_prerequisites","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_sources_is_all_prerequisites","()",""],["test_special_return_delegating_methods_object_type","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_special_return_delegating_methods_object_type","()",""],["test_split_all","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_split_all","()",""],["test_square_bracket_pattern","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_square_bracket_pattern","()",""],["test_stand_alone_filelist","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_stand_alone_filelist","()",""],["test_standalone_verbose_false_should_not_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_standalone_verbose_false_should_not_show_command","()",""],["test_standalone_verbose_true_should_show_command","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_standalone_verbose_true_should_show_command","()",""],["test_standard_exception_handling_invalid_option","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_standard_exception_handling_invalid_option","()",""],["test_standard_exception_handling_other","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_standard_exception_handling_other","()",""],["test_standard_exception_handling_system_exit","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_standard_exception_handling_system_exit","()",""],["test_standard_exception_handling_system_exit_nonzero","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_standard_exception_handling_system_exit_nonzero","()",""],["test_start_accepting","RDoc::Markup::FormatterTestCase","classes/RDoc/Markup/FormatterTestCase.html#method-i-test_start_accepting","()","<p>Calls start_accepting which needs to verify startup state\n"],["test_string_ext","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_string_ext","()",""],["test_string_rule_with_args","TestRakeRules","classes/TestRakeRules.html#method-i-test_string_rule_with_args","()",""],["test_string_rule_with_args_and_lambda_prereq","TestRakeRules","classes/TestRakeRules.html#method-i-test_string_rule_with_args_and_lambda_prereq","()",""],["test_strings_can_be_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_strings_can_be_prerequisites","()",""],["test_sub","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_sub","()",""],["test_sub!","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_sub-21","()",""],["test_sub_with_block","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_sub_with_block","()",""],["test_suppress_option","TestRakeBacktrace","classes/TestRakeBacktrace.html#method-i-test_suppress_option","()",""],["test_symbols_can_be_prerequisites","TestRakeTask","classes/TestRakeTask.html#method-i-test_symbols_can_be_prerequisites","()",""],["test_symlink","TestRakeFtpFile","classes/TestRakeFtpFile.html#method-i-test_symlink","()",""],["test_system","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_system","()",""],["test_system","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_system","()",""],["test_system_dir_suppressed","TestBacktraceSuppression","classes/TestBacktraceSuppression.html#method-i-test_system_dir_suppressed","()",""],["test_system_excludes_rakelib_files_too","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_system_excludes_rakelib_files_too","()",""],["test_task","TestRakeDefinitions","classes/TestRakeDefinitions.html#method-i-test_task","()",""],["test_task_can_be_pathname","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-test_task_can_be_pathname","()",""],["test_task_collection","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_task_collection","()",""],["test_task_gives_name_on_to_s","TestRakeTask","classes/TestRakeTask.html#method-i-test_task_gives_name_on_to_s","()",""],["test_task_list","TestRakeTask","classes/TestRakeTask.html#method-i-test_task_list","()",""],["test_tasks","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_tasks","()",""],["test_tasks_can_access_arguments_as_hash","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_tasks_can_access_arguments_as_hash","()",""],["test_tasks_can_be_traced","TestRakeTask","classes/TestRakeTask.html#method-i-test_tasks_can_be_traced","()",""],["test_tasks_can_reference_task_in_other_namespaces","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_tasks_can_reference_task_in_other_namespaces","()",""],["test_tasks_can_reference_task_in_same_namespace","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_tasks_can_reference_task_in_same_namespace","()",""],["test_terminal_columns","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_terminal_columns","()",""],["test_terminal_width_using_env","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_terminal_width_using_env","()",""],["test_terminal_width_using_hardcoded_80","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_terminal_width_using_hardcoded_80","()",""],["test_terminal_width_using_stty","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_terminal_width_using_stty","()",""],["test_terminal_width_using_tput","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_terminal_width_using_tput","()",""],["test_terminal_width_with_failure","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_terminal_width_with_failure","()",""],["test_test_files_equals","TestRakeTestTask","classes/TestRakeTestTask.html#method-i-test_test_files_equals","()",""],["test_test_task_descriptions","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_test_task_descriptions","()",""],["test_thread_created","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_thread_created","()",""],["test_thread_deleted","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_thread_deleted","()",""],["test_throws_error_if_library_not_found","TestRakeRequire","classes/TestRakeRequire.html#method-i-test_throws_error_if_library_not_found","()",""],["test_timestamp_returns_latest_prereq_timestamp","TestRakeTask","classes/TestRakeTask.html#method-i-test_timestamp_returns_latest_prereq_timestamp","()",""],["test_timestamp_returns_now_if_all_prereqs_have_no_times","TestRakeTask","classes/TestRakeTask.html#method-i-test_timestamp_returns_now_if_all_prereqs_have_no_times","()",""],["test_to_array","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_to_array","()",""],["test_to_s","TestRakeEarlyTime","classes/TestRakeEarlyTime.html#method-i-test_to_s","()",""],["test_to_s","TestRakeLateTime","classes/TestRakeLateTime.html#method-i-test_to_s","()",""],["test_to_s","TestRakeTaskArguments","classes/TestRakeTaskArguments.html#method-i-test_to_s","()",""],["test_to_s_empty","TestRakeInvocationChain","classes/TestRakeInvocationChain.html#method-i-test_to_s_empty","()",""],["test_to_s_pending","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_to_s_pending","()",""],["test_to_string","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_to_string","()",""],["test_trace","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace","()",""],["test_trace_bug","TestRakeFunctional","classes/TestRakeFunctional.html#method-i-test_trace_bug","()","<p>Test for the trace/dry_run bug found by Brian Chandler\n"],["test_trace_handles_nil_objects","TestTraceOutput","classes/TestTraceOutput.html#method-i-test_trace_handles_nil_objects","()",""],["test_trace_issues_single_io_for_args_multiple_strings","TestTraceOutput","classes/TestTraceOutput.html#method-i-test_trace_issues_single_io_for_args_multiple_strings","()",""],["test_trace_issues_single_io_for_args_multiple_strings_and_alternate_sep","TestTraceOutput","classes/TestTraceOutput.html#method-i-test_trace_issues_single_io_for_args_multiple_strings_and_alternate_sep","()",""],["test_trace_issues_single_io_for_args_with_empty_args","TestTraceOutput","classes/TestTraceOutput.html#method-i-test_trace_issues_single_io_for_args_with_empty_args","()",""],["test_trace_rules","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace_rules","()",""],["test_trace_with_error","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace_with_error","()",""],["test_trace_with_following_task_name","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace_with_following_task_name","()",""],["test_trace_with_stderr","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace_with_stderr","()",""],["test_trace_with_stdout","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_trace_with_stdout","()",""],["test_treat_blank_arg_as_empty_string","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_treat_blank_arg_as_empty_string","()",""],["test_trim","TestRakeScope","classes/TestRakeScope.html#method-i-test_trim","()",""],["test_truncating_comments_to_a_non_tty","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_truncating_comments_to_a_non_tty","()",""],["test_two_arguments","TestRakeTaskArgumentParsing","classes/TestRakeTaskArgumentParsing.html#method-i-test_two_arguments","()",""],["test_undefined_percent_causes_error","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_undefined_percent_causes_error","()",""],["test_unique","TestRakeFileList","classes/TestRakeFileList.html#method-i-test_unique","()",""],["test_values_at","TestRakeTaskWithArguments","classes/TestRakeTaskWithArguments.html#method-i-test_values_at","()",""],["test_verbose","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_verbose","()",""],["test_verbose","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-test_verbose","()",""],["test_version","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_version","()",""],["test_very_early_timestamp","TestRakeFileCreationTask","classes/TestRakeFileCreationTask.html#method-i-test_very_early_timestamp","()",""],["test_waiting","TestThreadHistoryDisplay","classes/TestThreadHistoryDisplay.html#method-i-test_waiting","()",""],["test_when_not_writing","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-test_when_not_writing","()",""],["test_when_writing","TestRakeTopLevelFunctions","classes/TestRakeTopLevelFunctions.html#method-i-test_when_writing","()",""],["test_where","TestRakeApplicationOptions","classes/TestRakeApplicationOptions.html#method-i-test_where","()",""],["test_win32_backtrace_with_different_case","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_backtrace_with_different_case","()",""],["test_win32_system_dir_fallback_to_userprofile_otherwise","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_system_dir_fallback_to_userprofile_otherwise","()",""],["test_win32_system_dir_nil_of_no_env_vars","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_system_dir_nil_of_no_env_vars","()",""],["test_win32_system_dir_uses_appdata_when_no_home_or_home_combo","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_system_dir_uses_appdata_when_no_home_or_home_combo","()",""],["test_win32_system_dir_uses_home_if_defined","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_system_dir_uses_home_if_defined","()",""],["test_win32_system_dir_uses_homedrive_homepath_when_no_home_defined","TestRakeWin32","classes/TestRakeWin32.html#method-i-test_win32_system_dir_uses_homedrive_homepath_when_no_home_defined","()",""],["test_windows","TestRakeApplication","classes/TestRakeApplication.html#method-i-test_windows","()",""],["test_with_99_exit_status","TestRakePseudoStatus","classes/TestRakePseudoStatus.html#method-i-test_with_99_exit_status","()",""],["test_with_zero_exit_status","TestRakePseudoStatus","classes/TestRakePseudoStatus.html#method-i-test_with_zero_exit_status","()",""],["test_wont_reload_rake_library","TestRakeRequire","classes/TestRakeRequire.html#method-i-test_wont_reload_rake_library","()",""],["test_works_with_windows_separators","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_works_with_windows_separators","()",""],["test_x_returns_everything_but_extension","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_x_returns_everything_but_extension","()",""],["test_x_returns_extension","TestRakePathMap","classes/TestRakePathMap.html#method-i-test_x_returns_extension","()",""],["text","RDoc::Markup::IndentedParagraph","classes/RDoc/Markup/IndentedParagraph.html#method-i-text","(hard_break = nil)","<p>Joins the raw paragraph text and converts inline HardBreaks to the <code>hard_break</code> text followed by the indent. …\n"],["text","RDoc::Markup::Paragraph","classes/RDoc/Markup/Paragraph.html#method-i-text","(hard_break = '')","<p>Joins the raw paragraph text and converts inline HardBreaks to the <code>hard_break</code> text.\n"],["text","RDoc::Markup::Raw","classes/RDoc/Markup/Raw.html#method-i-text","()","<p>The raw text\n"],["text","RDoc::Markup::Verbatim","classes/RDoc/Markup/Verbatim.html#method-i-text","()","<p>The text of the section\n"],["text=","RDoc::Comment","classes/RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment&#39;s text with <code>text</code> and resets the parsed document.\n<p>An error is raised if the comment …\n"],["text?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["tgz_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-tgz_file","()","<p>The package name with .tgz added\n"],["thread_local_data","RSpec::Support","classes/RSpec/Support.html#method-c-thread_local_data","()","<p>A single thread local variable so we don&#39;t excessively pollute that namespace.\n"],["thrice","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-thrice","()","<p>@api public Specifies that the method is expected to yield thrice.\n"],["thrice","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-thrice","(&block)","<p>Expect a message to be received exactly three times.\n<p>@return [MessageExpectation] self, to support further …\n"],["throw_symbol","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-throw_symbol","(expected_symbol=nil, expected_arg=nil)","<p>Given no argument, matches if a proc throws any Symbol.\n<p>Given a Symbol, matches if the given proc throws …\n"],["time_delta_string","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-time_delta_string","(seconds)","<p>Return a string describing the amount of time in the given number of seconds in terms a human can understand …\n"],["times","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-times","()","<p>@api public No-op. Provides syntactic sugar.\n"],["times","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-times","(&block)","<p>Syntactic sugar for `exactly`, `at_least` and `at_most`\n<p>@return [MessageExpectation] self, to support …\n"],["timestamp","Rake::FileCreationTask","classes/Rake/FileCreationTask.html#method-i-timestamp","()","<p>Time stamp for file creation task.  This time stamp is earlier than any other time stamp.\n"],["timestamp","Rake::FileTask","classes/Rake/FileTask.html#method-i-timestamp","()","<p>Time stamp for file task.\n"],["timestamp","Rake::Task","classes/Rake/Task.html#method-i-timestamp","()","<p>Timestamp for this task.  Basic tasks return the current time for their time stamp.  Other tasks can …\n"],["title","RDoc::Store","classes/RDoc/Store.html#method-i-title","()","<p>Gets the title for this RDoc store.  This is used as the title in each page on the RDoc server\n"],["title=","RDoc::Store","classes/RDoc/Store.html#method-i-title-3D","(title)","<p>Sets the title page for this RDoc store.\n"],["tk_nl?","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-tk_nl-3F","(tk)",""],["to","Object","classes/Object.html#method-i-to","(*args)",""],["to","RSpec::Expectations::BlockExpectationTarget","classes/RSpec/Expectations/BlockExpectationTarget.html#method-i-to","(matcher, message=nil, &block)",""],["to","RSpec::Expectations::ExpectationTarget::InstanceMethods","classes/RSpec/Expectations/ExpectationTarget/InstanceMethods.html#method-i-to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns true. @example\n\n<pre><code>expect(value).to eq(5)\nexpect ...\n</code></pre>\n"],["to","RSpec::Matchers::BuiltIn::Change","classes/RSpec/Matchers/BuiltIn/Change.html#method-i-to","(value)","<p>@api public Specifies the new value you expect.\n"],["to","RSpec::Matchers::BuiltIn::ChangeFromValue","classes/RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-to","(value)","<p>@api public Specifies the new value you expect.\n"],["to_a","LCS::Change","classes/LCS/Change.html#method-i-to_a","()",""],["to_a","LCS::ContextChange","classes/LCS/ContextChange.html#method-i-to_a","()",""],["to_a","Rake::FileList","classes/Rake/FileList.html#method-i-to_a","()","<p>Return the internal array object.\n"],["to_a","Rake::FileList","classes/Rake/FileList.html#method-i-to_a","()","<p>Return the internal array object.\n"],["to_a","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-to_a","()","<p>Retrieve the complete array of sequential values\n"],["to_ary","Rake::FileList","classes/Rake/FileList.html#method-i-to_ary","()","<p>Return the internal array object.\n"],["to_ary","Rake::FileList","classes/Rake/FileList.html#method-i-to_ary","()","<p>Return the internal array object.\n"],["to_constant","RSpec::Mocks::ConstantMutator::BaseMutator","classes/RSpec/Mocks/ConstantMutator/BaseMutator.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::ConstantHider","classes/RSpec/Mocks/ConstantMutator/ConstantHider.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-to_constant","()",""],["to_constant","RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","classes/RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html#method-i-to_constant","()",""],["to_h","RSpec::Core::HashImitatable","classes/RSpec/Core/HashImitatable.html#method-i-to_h","()",""],["to_h","RSpec::Core::LegacyExampleGroupHash","classes/RSpec/Core/LegacyExampleGroupHash.html#method-i-to_h","()",""],["to_hash","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-to_hash","()","<p>Returns a Hash of arguments and their values\n"],["to_html","RDoc::Markup::ToHtml","classes/RDoc/Markup/ToHtml.html#method-i-to_html","(item)","<p>Converts <code>item</code> to HTML using RDoc::Text#to_html\n"],["to_html","RDoc::Text","classes/RDoc/Text.html#method-i-to_html","(text)","<p>Converts ampersand, dashes, ellipsis, quotes, copyright and registered trademark symbols in <code>text</code> to properly …\n"],["to_html","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with <code>&lt;span&gt;</code> elements. Some tokens types are …\n"],["to_io","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-to_io","()","<p>To work around JRuby error: can&#39;t convert RSpec::Support::StdErrSplitter into String\n"],["to_not","Object","classes/Object.html#method-i-to_not","(*args)",""],["to_not","RSpec::Expectations::BlockExpectationTarget","classes/RSpec/Expectations/BlockExpectationTarget.html#method-i-to_not","(matcher, message=nil, &block)",""],["to_not","RSpec::Expectations::ExpectationTarget::InstanceMethods","classes/RSpec/Expectations/ExpectationTarget/InstanceMethods.html#method-i-to_not","(matcher=nil, message=nil, &block)",""],["to_proc","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-to_proc","()","<p>Provides a wrapped proc that will update our `executed?` state when executed.\n"],["to_proc","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-to_proc","()",""],["to_s","RDoc::Generator::POT::PO","classes/RDoc/Generator/POT/PO.html#method-i-to_s","()","<p>Returns PO format text for the PO.\n"],["to_s","RDoc::Generator::POT::POEntry","classes/RDoc/Generator/POT/POEntry.html#method-i-to_s","()","<p>Returns the PO entry in PO format.\n"],["to_s","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-to_s","()",""],["to_s","RSpec::Core::SharedExampleGroupModule","classes/RSpec/Core/SharedExampleGroupModule.html#method-i-to_s","()",""],["to_s","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-to_s","()","<p>The default `to_s` isn&#39;t very useful, so a custom version is provided.\n"],["to_s","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-to_s","()","<p>@return [String] a nice representation of the message expectation\n"],["to_s","RSpec::Mocks::TestDouble","classes/RSpec/Mocks/TestDouble.html#method-i-to_s","()","<p>@private\n"],["to_s","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-to_s","()",""],["to_s","Rake::FileList","classes/Rake/FileList.html#method-i-to_s","()","<p>Convert a FileList to a string by joining all elements with a space.\n"],["to_s","Rake::FileList","classes/Rake/FileList.html#method-i-to_s","()","<p>Convert a FileList to a string by joining all elements with a space.\n"],["to_s","Rake::InvocationChain","classes/Rake/InvocationChain.html#method-i-to_s","()","<p>Convert to string, ie: TOP =&gt; invocation =&gt; invocation\n"],["to_s","Rake::InvocationChain::EmptyInvocationChain","classes/Rake/InvocationChain/EmptyInvocationChain.html#method-i-to_s","()",""],["to_s","Rake::LateTime","classes/Rake/LateTime.html#method-i-to_s","()",""],["to_s","Rake::LinkedList","classes/Rake/LinkedList.html#method-i-to_s","()","<p>Convert to string: LL(item, item…)\n"],["to_s","Rake::Task","classes/Rake/Task.html#method-i-to_s","()","<p>Return task name\n"],["to_stderr","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-to_stderr","()","<p>@api public Tells the matcher to match against stderr. Works only when the main Ruby process prints to …\n"],["to_stderr_from_any_process","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-to_stderr_from_any_process","()","<p>@api public Tells the matcher to match against stderr. Works when subprocesses print to stderr as well. …\n"],["to_stdout","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-to_stdout","()","<p>@api public Tells the matcher to match against stdout. Works only when the main Ruby process prints to …\n"],["to_stdout_from_any_process","RSpec::Matchers::BuiltIn::Output","classes/RSpec/Matchers/BuiltIn/Output.html#method-i-to_stdout_from_any_process","()","<p>@api public Tells the matcher to match against stdout. Works when subprocesses print to stdout as well. …\n"],["to_str","RSpec::Support::EncodedString","classes/RSpec/Support/EncodedString.html#method-i-to_str","()",""],["to_toc","RDoc::Markup::ToTableOfContents","classes/RDoc/Markup/ToTableOfContents.html#method-c-to_toc","()","<p>Singleton for table-of-contents generation\n"],["today","FakeDate","classes/FakeDate.html#method-c-today","()",""],["token_listener","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-token_listener","(obj)","<p>Has <code>obj</code> listen to tokens\n"],["token_pos","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-token_pos","(byte_offset)","<p>Calculates the column (by character) and line of the current token based on <code>byte_offset</code>.\n"],["token_stream","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["tokenize","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-c-tokenize","(str)","<p>Returns a token stream for <code>str</code>, for testing\n"],["tokenize","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-tokenize","(input)","<p>Turns text <code>input</code> into a stream of tokens\n"],["tokenize","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns\n"],["tokens","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-tokens","()",""],["tokens_by_line_number","RSpec::Support::Source","classes/RSpec/Support/Source.html#method-i-tokens_by_line_number","()",""],["tokens_from_ripper_tokens","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-c-tokens_from_ripper_tokens","(ripper_tokens)",""],["tokens_to_s","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tomdoc?","RDoc::Comment","classes/RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top_level","RDoc::Context","classes/RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","classes/RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if not found.\n"],["top_level","Rake::Application","classes/Rake/Application.html#method-i-top_level","()","<p>Run the top level tasks of a Rake application.\n"],["top_level?","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-top_level-3F","()","<p>@private\n"],["top_level_description","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-top_level_description","()","<p>@private\n"],["totals_line","RSpec::Core::Notifications::SummaryNotification","classes/RSpec/Core/Notifications/SummaryNotification.html#method-i-totals_line","()","<p>@api @return [String] A line summarising the result totals of the spec run.\n"],["transfer_nested_constants","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-transfer_nested_constants","()",""],["transfer_nested_constants?","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-transfer_nested_constants-3F","()",""],["translate","RDoc::I18n::Locale","classes/RDoc/I18n/Locale.html#method-i-translate","(message)","<p>Translates the <code>message</code> into locale. If there is no translation messages for <code>message</code> in locale, <code>message</code> …\n"],["translate","RDoc::I18n::Text","classes/RDoc/I18n/Text.html#method-i-translate","(locale)","<p>Translates raw text into <code>locale</code>.\n"],["trap_interrupt","RSpec::Core::Runner","classes/RSpec/Core/Runner.html#method-c-trap_interrupt","()","<p>@private\n"],["traverse_balanced","LCS","classes/LCS.html#method-i-traverse_balanced","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between <code>self</code> and <code>other</code> using the alternate, balanced …\n"],["traverse_balanced","LCS","classes/LCS.html#method-c-traverse_balanced","(seq1, seq2, callbacks = Diff::LCS::BalancedCallbacks)","<p>#traverse_balanced is an alternative to #traverse_sequences. It uses a different algorithm to iterate …\n"],["traverse_example_group_trees_until","RSpec::Core::World","classes/RSpec/Core/World.html#method-i-traverse_example_group_trees_until","(&block)","<p>@private Traverses the tree of each top level group. For each it yields the group, then the children, …\n"],["traverse_example_group_trees_until","RSpec::Core::World::Null","classes/RSpec/Core/World/Null.html#method-c-traverse_example_group_trees_until","()",""],["traverse_sequences","LCS","classes/LCS.html#method-i-traverse_sequences","(other, callbacks = nil, &block)","<p>Traverses the discovered longest common subsequences between <code>self</code> and <code>other</code>. See Diff::LCS#traverse_sequences …\n"],["traverse_sequences","LCS","classes/LCS.html#method-c-traverse_sequences","(seq1, seq2, callbacks = Diff::LCS::SequenceCallbacks, &block)","<p>#traverse_sequences is the most general facility provided by this module; #diff and #lcs are implemented …\n"],["traverse_tree_until","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-traverse_tree_until","(&block)","<p>@private Traverses the tree of groups, starting with `self`, then the children, recursively. Halts the …\n"],["treat_symbols_as_metadata_keys_with_true_values=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-treat_symbols_as_metadata_keys_with_true_values-3D","(_value)","<p>@deprecated This config option was added in RSpec 2 to pave the way\n\n<pre><code>for this being the default behavior ...\n</code></pre>\n"],["truncate","RDoc::Markup::ToHtmlSnippet","classes/RDoc/Markup/ToHtmlSnippet.html#method-i-truncate","(text)","<p>Truncates <code>text</code> at the end of the first word after the character_limit.\n"],["truncate","SDoc::Helpers","classes/SDoc/Helpers.html#method-i-truncate","(text, options = {})","<p>Truncates a given string. It tries to take whole sentences to have a meaningful description for SEO tags. …\n"],["try_extracting_single_line_body_of","RSpec::Expectations::BlockSnippetExtractor","classes/RSpec/Expectations/BlockSnippetExtractor.html#method-c-try_extracting_single_line_body_of","(proc, method_name)",""],["tt?","RDoc::Markup::Formatter","classes/RDoc/Markup/Formatter.html#method-i-tt-3F","(tag)","<p>Is <code>tag</code> a tt tag?\n"],["tt_sections","RDoc::Markup::ToTtOnly","classes/RDoc/Markup/ToTtOnly.html#method-i-tt_sections","(text)","<p>Extracts tt sections from <code>text</code>\n"],["twice","RSpec::Matchers::BuiltIn::YieldControl","classes/RSpec/Matchers/BuiltIn/YieldControl.html#method-i-twice","()","<p>@api public Specifies that the method is expected to yield twice.\n"],["twice","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-twice","(&block)","<p>Expect a message to be received exactly two times.\n<p>@return [MessageExpectation] self, to support further …\n"],["type","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-type","()","<p>&#39;module&#39; or &#39;class&#39;\n"],["type","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["type","RSpec::Support::Source::ExpressionSequenceNode","classes/RSpec/Support/Source/ExpressionSequenceNode.html#method-i-type","()",""],["type","RSpec::Support::Source::Node","classes/RSpec/Support/Source/Node.html#method-i-type","()",""],["type","RSpec::Support::Source::Token","classes/RSpec/Support/Source/Token.html#method-i-type","()",""],["unadvise","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-unadvise","(args)",""],["unadvise","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-i-unadvise","(_)",""],["unchanged?","LCS::Change","classes/LCS/Change.html#method-i-unchanged-3F","()",""],["unclosed_tokens_in_line_range","RSpec::Core::Formatters::SnippetExtractor","classes/RSpec/Core/Formatters/SnippetExtractor.html#method-i-unclosed_tokens_in_line_range","(line_range)",""],["undoc_params","RDoc::Stats","classes/RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented.  Returns a total parameter count and an Array …\n"],["unfulfilled_expectations","RSpec::Mocks::AnyInstance::MessageChains","classes/RSpec/Mocks/AnyInstance/MessageChains.html#method-i-unfulfilled_expectations","()","<p>@private\n"],["unget","RDoc::Markup::Parser","classes/RDoc/Markup/Parser.html#method-i-unget","()","<p>Returns the current token to the token stream\n"],["unget_tk","RDoc::Parser::RubyTools","classes/RDoc/Parser/RubyTools.html#method-i-unget_tk","(tk)","<p>Returns <code>tk</code> to the scanner\n"],["unimplemented?","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-i-unimplemented-3F","()","<p>Returns true if we definitively know that sending the method will result in a `NoMethodError`.\n<p>This is …\n"],["unimplemented?","RSpec::Mocks::VerifyingExistingMethodDouble","classes/RSpec/Mocks/VerifyingExistingMethodDouble.html#method-i-unimplemented-3F","()",""],["unique_classes","RDoc::Store","classes/RDoc/Store.html#method-i-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::Store","classes/RDoc/Store.html#method-i-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must have been called prior to …\n"],["unique_modules","RDoc::Store","classes/RDoc/Store.html#method-i-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been called prior to using this method. …\n"],["unlimited_args?","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-unlimited_args-3F","()",""],["unlock","RSpec::Support::Mutex","classes/RSpec/Support/Mutex.html#method-i-unlock","()","<p>@private\n"],["unmask_protected_sequences","RDoc::Markup::AttributeManager","classes/RDoc/Markup/AttributeManager.html#method-i-unmask_protected_sequences","()","<p>Unescapes regexp handling sequences of text\n"],["unmutated","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-c-unmutated","(name)","<p>@private\n"],["unpatch","LCS","classes/LCS.html#method-i-unpatch","(patchset)",""],["unpatch!","LCS","classes/LCS.html#method-i-unpatch-21","(patchset)","<p>Attempts to unpatch <code>self</code> with the provided <code>patchset</code>. A new sequence based on <code>self</code> and the <code>patchset</code> will …\n"],["unpatch!","LCS","classes/LCS.html#method-c-unpatch-21","(src, patchset)","<p>Given a set of patchset, convert the current version to the prior version. Does no auto-discovery.\n"],["unpatch!","RSpec::Mocks::MarshalExtension","classes/RSpec/Mocks/MarshalExtension.html#method-c-unpatch-21","()",""],["unpatch_me","LCS","classes/LCS.html#method-i-unpatch_me","(patchset)","<p>Attempts to unpatch <code>self</code> with the provided <code>patchset</code>, using #unpatch!. If the sequence this is used on …\n"],["unreadable_io?","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-c-unreadable_io-3F","(object)","<p>@api private\n"],["unregister","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-unregister","(klass, operator)","<p>@private\n"],["unshift","LCS::Hunk","classes/LCS/Hunk.html#method-i-unshift","(hunk)",""],["unstub","RSpec::Mocks::AnyInstance::Proxy","classes/RSpec/Mocks/AnyInstance/Proxy.html#method-i-unstub","(method_name)",""],["unstub","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-unstub","(method_name)","<p>Removes any previously recorded stubs, stub_chains or message expectations that use `method_name`.\n<p>@see …\n"],["unstub","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-i-unstub","(message)",""],["update_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are aliases through a constant.\n<p>The …\n"],["update_extends","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_extends","()","<p>Deletes from #extends those whose module has been removed from the documentation.\n"],["update_includes","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the documentation.\n"],["update_inherited_metadata","RSpec::Core::Example","classes/RSpec/Core/Example.html#method-i-update_inherited_metadata","(updates)","<p>@private\n"],["update_inherited_metadata","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-update_inherited_metadata","(updates)","<p>@private\n"],["update_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_parser_of_file","RDoc::Store","classes/RDoc/Store.html#method-i-update_parser_of_file","(absolute_name, parser)",""],["upgrade_to_class","RDoc::Context","classes/RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a <code>class_type</code>\n"],["usable_rspec_prepended_module","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-usable_rspec_prepended_module","()",""],["use_custom_matcher_or_delegate","RSpec::Matchers::BuiltIn::OperatorMatcher","classes/RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-use_custom_matcher_or_delegate","(operator)","<p>@private\n"],["use_markup","RDoc::Parser","classes/RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the file, use it to determine the parser.  …\n"],["use_only","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-use_only","(updated)",""],["use_only","RSpec::Core::FilterRules","classes/RSpec/Core/FilterRules.html#method-i-use_only","(updated)",""],["use_prefix","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-use_prefix","()","<p>Adds the stored #prefix to the output and clears it.  Lists generate a prefix for later consumption. …\n"],["used?","RSpec::Core::Ordering::Random","classes/RSpec/Core/Ordering/Random.html#method-i-used-3F","()",""],["used_random_seed?","RSpec::Core::Ordering::Registry","classes/RSpec/Core/Ordering/Registry.html#method-i-used_random_seed-3F","()",""],["util_loader","TestRakeApplication","classes/TestRakeApplication.html#method-i-util_loader","()",""],["valid?","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-valid-3F","()",""],["valid?","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-valid-3F","()",""],["valid_action?","LCS::Change","classes/LCS/Change.html#method-c-valid_action-3F","(action)",""],["valid_name?","RSpec::Mocks::Constant","classes/RSpec/Mocks/Constant.html#method-i-valid_name-3F","()","<p>@return [Boolean] Whether or not the provided constant name\n\n<pre><code>is a valid Ruby constant name.\n</code></pre>\n"],["valid_non_kw_args?","RSpec::Support::LooseSignatureVerifier::SignatureWithKeywordArgumentsMatcher","classes/RSpec/Support/LooseSignatureVerifier/SignatureWithKeywordArgumentsMatcher.html#method-i-valid_non_kw_args-3F","(*args)",""],["valid_non_kw_args?","RSpec::Support::MethodSignature","classes/RSpec/Support/MethodSignature.html#method-i-valid_non_kw_args-3F","(positional_arg_count, optional_max_arg_count=positional_arg_count)",""],["valid_test?","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","classes/RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-valid_test-3F","()","<p>@return [Boolean]\n"],["validate_arguments!","RSpec::Mocks::VerifyingMethodDouble","classes/RSpec/Mocks/VerifyingMethodDouble.html#method-i-validate_arguments-21","(actual_args)",""],["validate_arguments!","RSpec::Mocks::VerifyingProxy","classes/RSpec/Mocks/VerifyingProxy.html#method-i-validate_arguments-21","(method_name, args)",""],["validity_message","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","classes/RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-validity_message","()","<p>@api private @return [String]\n"],["value_representation","RSpec::Matchers::BuiltIn::ChangeDetails","classes/RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-value_representation","()",""],["values_at","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-values_at","(*keys)","<p>Extracts the argument values at <code>keys</code>\n"],["values_match?","RSpec::Support::FuzzyMatcher","classes/RSpec/Support/FuzzyMatcher.html#method-c-values_match-3F","(expected, actual)","<p>@api private\n"],["verb","RSpec::Expectations::NegativeExpectationHandler","classes/RSpec/Expectations/NegativeExpectationHandler.html#method-c-verb","()",""],["verb","RSpec::Expectations::PositiveExpectationHandler","classes/RSpec/Expectations/PositiveExpectationHandler.html#method-c-verb","()",""],["verbose","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["verbose","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-verbose","(value=nil)","<p>Get/set the verbose flag controlling output from the FileUtils utilities.  If verbose is true, then the …\n"],["verify","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-verify","()","<p>Verifies any message expectations that were set during the test or example. This should be called at …\n"],["verify","RSpec::Mocks::AnyInstance::Recorder","classes/RSpec/Mocks/AnyInstance/Recorder.html#method-i-verify","()","<p>@api private\n<p>Used internally to verify that message expectations have been fulfilled.\n"],["verify","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-verify","()","<p>@private\n"],["verify","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-verify","()","<p>@private\n"],["verify_all","RSpec::Mocks::RootSpace","classes/RSpec/Mocks/RootSpace.html#method-i-verify_all","()",""],["verify_all","RSpec::Mocks::Space","classes/RSpec/Mocks/Space.html#method-i-verify_all","()",""],["verify_constants_to_transfer!","RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","classes/RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html#method-i-verify_constants_to_transfer-21","()",""],["verify_doubled_constant_names?","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-verify_doubled_constant_names-3F","()",""],["verify_invocation_order","RSpec::Mocks::OrderGroup","classes/RSpec/Mocks/OrderGroup.html#method-i-verify_invocation_order","(expectation)",""],["verify_messages_received","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-verify_messages_received","()",""],["verify_messages_received","RSpec::Mocks::SimpleMessageExpectation","classes/RSpec/Mocks/SimpleMessageExpectation.html#method-i-verify_messages_received","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Flexmock","classes/RSpec/Core/MockingAdapters/Flexmock.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Mocha","classes/RSpec/Core/MockingAdapters/Mocha.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::Null","classes/RSpec/Core/MockingAdapters/Null.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::RR","classes/RSpec/Core/MockingAdapters/RR.html#method-i-verify_mocks_for_rspec","()",""],["verify_mocks_for_rspec","RSpec::Core::MockingAdapters::RSpec","classes/RSpec/Core/MockingAdapters/RSpec.html#method-i-verify_mocks_for_rspec","()",""],["verify_no_warnings!","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-verify_no_warnings-21","()",""],["verify_partial_doubles=","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-verify_partial_doubles-3D","(val)","<p>When set to true, partial mocks will be verified the same as object doubles. Any stubs will have their …\n"],["verify_partial_doubles?","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-verify_partial_doubles-3F","()",""],["verifying_double_callbacks","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-verifying_double_callbacks","()","<p>@api private Returns an array of blocks to call when verifying doubles\n"],["visibility","RSpec::Mocks::MethodDouble","classes/RSpec/Mocks/MethodDouble.html#method-i-visibility","()","<p>@private\n"],["visibility","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-i-visibility","()",""],["visibility=","RDoc::Options","classes/RDoc/Options.html#method-i-visibility-3D","(visibility)","<p>Sets the minimum visibility of a documented method.\n<p>Accepts <code>:public</code>, <code>:protected</code>, <code>:private</code>, <code>:nodoc</code>, or …\n"],["visibility_for","RSpec::Mocks::PartialDoubleProxy","classes/RSpec/Mocks/PartialDoubleProxy.html#method-i-visibility_for","(method_name)","<p>@private\n"],["visibility_for","RSpec::Mocks::Proxy","classes/RSpec/Mocks/Proxy.html#method-i-visibility_for","(_method_name)","<p>@private\n"],["visibility_for","RSpec::Mocks::VerifyingProxy","classes/RSpec/Mocks/VerifyingProxy.html#method-i-visibility_for","(method_name)",""],["warn","RDoc::Options","classes/RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we&#39;re being verbose\n"],["warn","RDoc::Parser::Ruby","classes/RDoc/Parser/Ruby.html#method-i-warn","(message)","<p>Prints <code>message</code> to +$stderr+ unless we&#39;re being quiet\n"],["warn_about_block","RSpec::Mocks::Matchers::ReceiveMessages","classes/RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-warn_about_block","()",""],["warn_about_potential_false_positives=","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-warn_about_potential_false_positives-3D","(boolean)","<p>Configures whether RSpec will warn about matcher use which will potentially cause false positives in …\n"],["warn_about_potential_false_positives?","RSpec::Expectations::Configuration","classes/RSpec/Expectations/Configuration.html#method-i-warn_about_potential_false_positives-3F","()","<p>Indicates whether RSpec will warn about matcher use which will potentially cause false positives in tests, …\n"],["warn_about_should!","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-warn_about_should-21","()","<p>@api private Instructs rspec-expectations to warn on first usage of `should` or `should_not`. Enabled …\n"],["warn_about_should!","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-warn_about_should-21","()","<p>@private\n"],["warn_about_should_unless_configured","RSpec::Expectations::Syntax","classes/RSpec/Expectations/Syntax.html#method-i-warn_about_should_unless_configured","(method_name)","<p>@api private Generates a deprecation warning for the given method if no warning has already been issued. …\n"],["warn_deprecation","RSpec::Core::Warnings","classes/RSpec/Core/Warnings.html#method-i-warn_deprecation","(message, opts={})","<p>@private\n<p>Used internally to print deprecation warnings.\n"],["warn_deprecation","RSpec::Support::Warnings","classes/RSpec/Support/Warnings.html#method-i-warn_deprecation","(message, options={})","<p>@private\n<p>Used internally to print deprecation warnings when rspec-core isn&#39;t loaded\n"],["warn_unless_should_configured","RSpec::Mocks::Syntax","classes/RSpec/Mocks/Syntax.html#method-c-warn_unless_should_configured","(method_name , replacement=\"the new `:expect` syntax or explicitly enable `:should`\")","<p>@private\n"],["warn_with","RSpec::Core::Warnings","classes/RSpec/Core/Warnings.html#method-i-warn_with","(message, options={})","<p>@private\n"],["warn_with","RSpec::Support::Warnings","classes/RSpec/Support/Warnings.html#method-i-warn_with","(message, options={})","<p>@private\n<p>Used internally to print longer warnings\n"],["warning","RSpec::Support::Warnings","classes/RSpec/Support/Warnings.html#method-i-warning","(text, options={})","<p>@private\n<p>Used internally to print warnings\n"],["warning_notifier","RSpec::Support","classes/RSpec/Support.html#method-c-warning_notifier","()","<p>@api private\n"],["warnings=","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-warnings-3D","(value)","<p>Set Ruby warnings on or off.\n"],["warnings?","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-warnings-3F","()","<p>@return [Boolean] Whether or not ruby warnings are enabled.\n"],["when_declaring_verifying_double","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-when_declaring_verifying_double","(&block)",""],["when_first_matching_example_defined","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-when_first_matching_example_defined","(*filters)","<p>Defines a callback that runs after the first example with matching metadata is defined. If no examples …\n"],["when_loaded","RSpec::Mocks::DirectObjectReference","classes/RSpec/Mocks/DirectObjectReference.html#method-i-when_loaded","()","<p>Yields if the reference target is loaded, providing a generic mechanism to optionally run a bit of code …\n"],["when_loaded","RSpec::Mocks::NamedObjectReference","classes/RSpec/Mocks/NamedObjectReference.html#method-i-when_loaded","()","<p>Yields if the reference target is loaded, providing a generic mechanism to optionally run a bit of code …\n"],["when_writing","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["when_writing","Rake::FileUtilsExt","classes/Rake/FileUtilsExt.html#method-i-when_writing","(msg=nil)","<p>Use this function to prevent potentially destructive ruby code from running when the :nowrite flag is …\n"],["windows?","RSpec::Support::OS","classes/RSpec/Support/OS.html#method-i-windows-3F","()",""],["windows?","TestRakeFileUtils","classes/TestRakeFileUtils.html#method-i-windows-3F","()",""],["windows_file_path?","RSpec::Support::OS","classes/RSpec/Support/OS.html#method-i-windows_file_path-3F","()",""],["with","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-with","(n)","<p>@api public Specifies the number of expected arguments.\n<p>@example\n\n<pre><code>expect(obj).to respond_to(:message).with(3).arguments\n</code></pre>\n"],["with","RSpec::Mocks::AnyInstance::Chain","classes/RSpec/Mocks/AnyInstance/Chain.html#method-i-with","(*args, &block)",""],["with","RSpec::Mocks::MessageExpectation","classes/RSpec/Mocks/MessageExpectation.html#method-i-with","(*args, &block)","<p>Constrains a stub or message expectation to invocations with specific arguments.\n<p>With a stub, if the message …\n"],["with","RSpec::Mocks::VerifyingMessageExpectation","classes/RSpec/Mocks/VerifyingMessageExpectation.html#method-i-with","(*args, &block)","<p>@private\n"],["with_any_keywords","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-with_any_keywords","()","<p>@api public Specifies that the method accepts any keyword, i.e. the method has\n\n<pre><code>a splatted keyword parameter ...\n</code></pre>\n"],["with_captures","RSpec::Matchers::BuiltIn::Match","classes/RSpec/Matchers/BuiltIn/Match.html#method-i-with_captures","(*captures)","<p>Used to specify the captures we match against @return [self]\n"],["with_defaults","Rake::TaskArguments","classes/Rake/TaskArguments.html#method-i-with_defaults","(defaults)","<p>Specify a hash of default values for task arguments. Use the defaults only if there is no specific value …\n"],["with_documentation?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-with_documentation-3F","()",""],["with_entering_structure","RSpec::Support::ObjectFormatter","classes/RSpec/Support/ObjectFormatter.html#method-i-with_entering_structure","(structure)",""],["with_env","RSpec::Support::ShellOut","classes/RSpec/Support/ShellOut.html#method-i-with_env","(vars)",""],["with_expectation","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-with_expectation","(expectation)",""],["with_expectation","RSpec::Support::MethodSignatureVerifier","classes/RSpec/Support/MethodSignatureVerifier.html#method-i-with_expectation","(expectation)",""],["with_failure_notifier","RSpec::Support","classes/RSpec/Support.html#method-c-with_failure_notifier","(callable)","<p>@api private\n"],["with_frame","RSpec::Core::SharedExampleGroupInclusionStackFrame","classes/RSpec/Core/SharedExampleGroupInclusionStackFrame.html#method-c-with_frame","(name, location)","<p>@private\n"],["with_isolated_stderr","RSpec::Support::WithIsolatedStdErr","classes/RSpec/Support/WithIsolatedStdErr.html#method-i-with_isolated_stderr","()",""],["with_keywords","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-with_keywords","(*keywords)","<p>@api public Specifies keyword arguments, if any.\n<p>@example\n\n<pre><code>expect(obj).to respond_to(:message).with_keywords(:color, ...\n</code></pre>\n"],["with_matcher","RSpec::Expectations::ExpectationHelper","classes/RSpec/Expectations/ExpectationHelper.html#method-c-with_matcher","(handler, matcher, message)",""],["with_message","RSpec::Matchers::BuiltIn::RaiseError","classes/RSpec/Matchers/BuiltIn/RaiseError.html#method-i-with_message","(expected_message)","<p>@api public Specifies the expected error message.\n"],["with_replaced_metadata","RSpec::Core::ExampleGroup","classes/RSpec/Core/ExampleGroup.html#method-c-with_replaced_metadata","(meta)","<p>Temporarily replace the provided metadata. Intended primarily to allow an example group&#39;s singleton …\n"],["with_signature","RSpec::Mocks::ClassNewMethodReference","classes/RSpec/Mocks/ClassNewMethodReference.html#method-i-with_signature","()",""],["with_signature","RSpec::Mocks::MethodReference","classes/RSpec/Mocks/MethodReference.html#method-i-with_signature","()",""],["with_signature","RSpec::Mocks::VerifyingExistingClassNewMethodDouble","classes/RSpec/Mocks/VerifyingExistingClassNewMethodDouble.html#method-i-with_signature","()",""],["with_signature","RSpec::Mocks::VerifyingExistingMethodDouble","classes/RSpec/Mocks/VerifyingExistingMethodDouble.html#method-i-with_signature","()",""],["with_suite_hooks","RSpec::Core::Configuration","classes/RSpec/Core/Configuration.html#method-i-with_suite_hooks","()","<p>@private\n"],["with_temporary_scope","RSpec::Mocks","classes/RSpec/Mocks.html#method-c-with_temporary_scope","()","<p>Call the passed block and verify mocks after it has executed. This allows mock usage in arbitrary places, …\n"],["with_truncated_backtrace","RSpec::Core::Formatters::ExceptionPresenter::Factory::CommonBacktraceTruncater","classes/RSpec/Core/Formatters/ExceptionPresenter/Factory/CommonBacktraceTruncater.html#method-i-with_truncated_backtrace","(child)",""],["with_unlimited_arguments","RSpec::Matchers::BuiltIn::RespondTo","classes/RSpec/Matchers/BuiltIn/RespondTo.html#method-i-with_unlimited_arguments","()","<p>@api public Specifies that the number of arguments has no upper limit, i.e. the\n\n<pre><code>method has a splatted ...\n</code></pre>\n"],["without_partial_double_verification","RSpec::Mocks::ExampleMethods","classes/RSpec/Mocks/ExampleMethods.html#method-i-without_partial_double_verification","()","<p>Turns off the verifying of partial doubles for the duration of the block, this is useful in situations …\n"],["word_sequence","LCS::SpecHelper","classes/LCS/SpecHelper.html#method-i-word_sequence","()",""],["world","RSpec","classes/RSpec.html#method-c-world","()","<p>@private Internal container for global non-configuration data.\n"],["wrap","RDoc::Markup::ToRdoc","classes/RDoc/Markup/ToRdoc.html#method-i-wrap","(text)","<p>Wraps <code>text</code> to #width\n"],["wrap","RDoc::Text","classes/RDoc/Text.html#method-i-wrap","(txt, line_len = 76)","<p>Wraps <code>txt</code> to <code>line_len</code>\n"],["wrap","RSpec::Core::Example::Procsy","classes/RSpec/Core/Example/Procsy.html#method-i-wrap","(&block)","<p>@private\n"],["wrap","RSpec::Core::Formatters::ConsoleCodes","classes/RSpec/Core/Formatters/ConsoleCodes.html#method-i-wrap","(text, code_or_symbol)","<p>Wraps a piece of text in ANSI codes with the supplied code. Will only apply the control code if `RSpec.configuration.color_enabled?` …\n"],["wrap","RSpec::Core::Notifications::NullColorizer","classes/RSpec/Core/Notifications/NullColorizer.html#method-i-wrap","(line, _code_or_symbol)",""],["wrap","RSpec::Expectations::LegacyMatcherAdapter","classes/RSpec/Expectations/LegacyMatcherAdapter.html#method-c-wrap","(matcher)",""],["wrap","RSpec::Expectations::LegacyMatcherAdapter","classes/RSpec/Expectations/LegacyMatcherAdapter.html#method-c-wrap","(matcher)",""],["write","RSpec::Support::StdErrSplitter","classes/RSpec/Support/StdErrSplitter.html#method-i-write","(line)","<p>To work around JRuby error: TypeError: $stderr must have write method, RSpec::StdErrSplitter given\n"],["write_options","RDoc::Options","classes/RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the parsed options.\n"],["write_style_sheet","RDoc::Generator::Darkfish","classes/RDoc/Generator/Darkfish.html#method-i-write_style_sheet","()","<p>Copy over the stylesheet into the appropriate place in the output directory.\n"],["yield_control","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-yield_control","()","<p>Passes if the method called in the expect block yields, regardless of whether or not arguments are yielded. …\n"],["yield_receiver_to_any_instance_implementation_blocks?","RSpec::Mocks::Configuration","classes/RSpec/Mocks/Configuration.html#method-i-yield_receiver_to_any_instance_implementation_blocks-3F","()",""],["yield_receiver_to_implementation_block?","RSpec::Mocks::MessageExpectation::ImplementationDetails","classes/RSpec/Mocks/MessageExpectation/ImplementationDetails.html#method-i-yield_receiver_to_implementation_block-3F","()",""],["yield_successive_args","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-yield_successive_args","(*args)","<p>Designed for use with methods that repeatedly yield (such as iterators). Passes if the method called …\n"],["yield_with_args","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-yield_with_args","(*args)","<p>Given no arguments, matches if the method called in the expect block yields with arguments (regardless …\n"],["yield_with_no_args","RSpec::Matchers","classes/RSpec/Matchers.html#method-i-yield_with_no_args","()","<p>Passes if the method called in the expect block yields with no arguments. Fails if it does not yield, …\n"],["yielded_once?","RSpec::Matchers::BuiltIn::YieldProbe","classes/RSpec/Matchers/BuiltIn/YieldProbe.html#method-i-yielded_once-3F","(matcher_name)",""],["zip?","RDoc::Parser","classes/RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from www.garykessler.net/library/file_sigs.html …\n"],["zip_file","Rake::PackageTask","classes/Rake/PackageTask.html#method-i-zip_file","()","<p>The package name with .zip added\n"],["ztest_file_deletes_on_failure","TestRakeFileTask","classes/TestRakeFileTask.html#method-i-ztest_file_deletes_on_failure","()","<p>I have currently disabled this test.  I&#39;m not convinced that deleting the file target on failure …\n"],["|","RSpec::Matchers::Composable","classes/RSpec/Matchers/Composable.html#method-i-7C","(matcher)",""],["Gemfile","","files/Gemfile.html","","<p>source “rubygems.org”\n<p>git_source(:github) {|repo_name| “github.com/#{repo_name}” } …\n"],["Gemfile.lock","","files/Gemfile_lock.html","","<p>PATH\n\n<pre><code>remote: .\nspecs:\n  fourth_dimensional (0.1.0)\n</code></pre>\n<p>GEM\n"],["README","","files/README_md.html","","<p>Fourth Dimensional\n<p>Fourth Dimensional is an event sourcing library to account for the state of a\nsystem ...\n"],["Rakefile","","files/Rakefile.html","","<p>require “bundler/gem_tasks” require “rspec/core/rake_task” require “sdoc” …\n"],["setup","","files/bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["fourth_dimensional.gemspec","","files/fourth_dimensional_gemspec.html","","<p>lib = File.expand_path(“../lib”, __FILE__) $LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib) …\n"],["htmldiff","","files/vendor/bundle/ruby/2_6_0/bin/htmldiff.html","","<p>#!/bin/sh &#39;exec&#39; “ruby” &#39;-x&#39; “$0” “$@” #!/home/travis/.rvm/rubies/ruby-2.6.1/bin/ruby …\n"],["ldiff","","files/vendor/bundle/ruby/2_6_0/bin/ldiff.html","","<p>#!/bin/sh &#39;exec&#39; “ruby” &#39;-x&#39; “$0” “$@” #!/home/travis/.rvm/rubies/ruby-2.6.1/bin/ruby …\n"],["sdoc","","files/vendor/bundle/ruby/2_6_0/bin/sdoc.html","","<p>#!/bin/sh &#39;exec&#39; “ruby” &#39;-x&#39; “$0” “$@” #!/home/travis/.rvm/rubies/ruby-2.6.1/bin/ruby …\n"],["sdoc-merge","","files/vendor/bundle/ruby/2_6_0/bin/sdoc-merge.html","","<p>#!/bin/sh &#39;exec&#39; “ruby” &#39;-x&#39; “$0” “$@” #!/home/travis/.rvm/rubies/ruby-2.6.1/bin/ruby …\n"],["Code-of-Conduct","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/Code-of-Conduct_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["Contributing","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/Contributing_md.html","","<p>Contributing\n<p>I value any contribution to Diff::LCS you can provide: a bug report, a feature\nrequest, or ...\n"],["History","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/History_md.html","","<p>1.3 / 2017-01-18\n<p>Bugs fixed:\n<p>Fixed an error for bin/ldiff --version. Fixes issue #21.\n"],["License","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/License_md.html","","<p>== License\n<p>This software is available under three licenses: the GNU GPL version 2 (or at\nyour option, ...\n"],["Manifest","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/Manifest_txt.html","","<p>.rspec Code-of-Conduct.md Contributing.md History.md License.md Manifest.txt README.rdoc Rakefile autotest/discover.rb …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/README_rdoc.html","","<p>Diff::LCS\n<p>home  &mdash; github.com/halostatue/diff-lcs\n<p>code  &mdash; github.com/halostatue/diff-lcs\n"],["Rakefile","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/Rakefile.html","","<p>require &#39;rubygems&#39; require &#39;rspec&#39; require &#39;hoe&#39;\n<p>Hoe.plugin :bundler Hoe.plugin …\n"],["htmldiff","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/bin/htmldiff.html","","<p>#!ruby -w\n<p>require &#39;diff/lcs&#39; require &#39;diff/lcs/htmldiff&#39;\n<p>begin\n"],["ldiff","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/bin/ldiff.html","","<p>#!ruby -w\n<p>require &#39;diff/lcs&#39; require &#39;diff/lcs/ldiff&#39;\n<p>exit Diff::LCS::Ldiff.run(ARGV)\n"],["COPYING","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/docs/COPYING_txt.html","","\n<pre><code>                   GNU GENERAL PUBLIC LICENSE\n                      Version 2, June 1991\n\nCopyright (C) ...\n</code></pre>\n"],["artistic","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/docs/artistic_txt.html","","<p>The “Artistic License”\n\n<pre><code>Preamble\n</code></pre>\n<p>The intent of this document is to state the conditions under …\n"],["ds1.csv","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/spec/fixtures/ds1_csv.html","","<p>1,3 2,7 3,13 4,21 5,31 6,43 7,57 8,73 9,91 10,111 11,133 12,157 13,183 14,211 15,241 16,273 17,307 18,343 …\n"],["ds2.csv","","files/vendor/bundle/ruby/2_6_0/gems/diff-lcs-1_3/spec/fixtures/ds2_csv.html","","\n<pre><code>1,3\n</code></pre>\n<p>2,7 3,13 4,21 5,31 6,42 7,57 8,73 9,91 10,111 11,133 12,157 13,183 14,211 15,241 16,273 17,307 18,343 …\n"],["CONTRIBUTING","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/CONTRIBUTING_rdoc.html","","<p>Source Repository\n<p>Rake is currently hosted at github. The github web page is github.com/ruby/rake . The …\n"],["History","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/History_rdoc.html","","<p>10.5.0 / 2016-01-13\n<p>Enhancements:\n<p>Removed monkey patching for Ruby 1.8. Pull request #46 by Pablo Herrero …\n"],["MIT-LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/MIT-LICENSE.html","","<p>Copyright © Jim Weirich\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy …\n"],["Manifest","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/Manifest_txt.html","","<p>.autotest .rubocop.yml .togglerc CONTRIBUTING.rdoc History.rdoc MIT-LICENSE Manifest.txt README.rdoc …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/README_rdoc.html","","<p>RAKE – Ruby Make\n<p>home  &mdash; github.com/ruby/rake\n<p>bugs  &mdash; github.com/ruby/rake/issues\n"],["Rakefile","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/Rakefile.html","","<p># Copyright 2003, 2004, 2005 by Jim Weirich (jim@weirichhouse.org) # All rights reserved.\n<p># This file …\n"],["command_line_usage","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/command_line_usage_rdoc.html","","<p>Rake Command Line Usage\n<p>Rake is invoked from the command line using:\n\n<pre><code>% rake [options ...]  [VAR=VALUE ...] ...\n</code></pre>\n"],["Rakefile1","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/example/Rakefile1.html","","<p>task :default =&gt; [:main]\n<p>file “a.o” =&gt; [“a.c”] do |t|\n\n<pre><code>src = t.name.sub(/\\.o$/, ...\n</code></pre>\n"],["Rakefile2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/example/Rakefile2.html","","<p># Using the power of Ruby\n<p>task :default =&gt; [:main]\n<p>def ext(fn, newext)\n"],["glossary","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/glossary_rdoc.html","","<p>Glossary\n<p>action  &mdash; Code to be executed in order to perform a task.  Actions in a Rakefile are specified …\n"],["proto_rake","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/proto_rake_rdoc.html","","<p>Original Prototype Rake\n<p>This is the original 100 line prototype rake program.\n\n<pre><code>#!/usr/bin/env ruby\n\nrequire ...\n</code></pre>\n"],["rakefile","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/rakefile_rdoc.html","","<p>Rakefile Format\n<p>First of all, there is no special format for a Rakefile.  A Rakefile contains executable …\n"],["rational","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/rational_rdoc.html","","<p>Why rake?\n<p>Ok, let me state from the beginning that I never intended to write this code.  I&#39;m not convinced …\n"],["rake-0.4.14","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_4_14_rdoc.html","","<p>Rake 0.4.14 Released\n<p>Changes\n<p>Version 0.4.14 is a compatibility fix to allow Rake&#39;s test task to work …\n"],["rake-0.4.15","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_4_15_rdoc.html","","<p>Rake 0.4.15 Released\n<p>Changes\n<p>Version 0.4.15 is a bug fix update for the Ruby 1.8.2 compatibility changes. …\n"],["rake-0.5.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_5_0_rdoc.html","","<p>Rake 0.5.0 Released\n<p>It has been a long time in coming, but we finally have a new version of Rake available. …\n"],["rake-0.5.3","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_5_3_rdoc.html","","<p>Rake 0.5.3 Released\n<p>Although it has only been two weeks since the last release, we have enough updates …\n"],["rake-0.5.4","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_5_4_rdoc.html","","<p>Rake 0.5.4 Released\n<p>Time for some minor bug fixes and small enhancements\n<p>Changes\n"],["rake-0.6.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_6_0_rdoc.html","","<p>Rake 0.6.0 Released\n<p>Its time for some long requested enhancements and lots of bug fixes … And a whole …\n"],["rake-0.7.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_7_0_rdoc.html","","<p>Rake 0.7.0 Released\n<p>These changes for Rake have been brewing for a long time.  Here they are, I hope you …\n"],["rake-0.7.1","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_7_1_rdoc.html","","<p>Rake 0.7.1 Released\n<p>Version 0.7.1 supplies a bug fix and a few minor enhancements.\n<p>Changes\n"],["rake-0.7.2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_7_2_rdoc.html","","<p>Rake 0.7.2 Released\n<p>Version 0.7.2 supplies a bug fix and a few minor enhancements.  In particular, the …\n"],["rake-0.7.3","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_7_3_rdoc.html","","<p>Rake 0.7.3 Released\n<p>Rake version 0.7.3 is a minor release that includes some refactoring to better support …\n"],["rake-0.8.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_0_rdoc.html","","<p>Rake 0.8.0/0.8.1 Released\n<p>Rake version 0.8.0 is a new release of rake that includes serveral new features. …\n"],["rake-0.8.2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_2_rdoc.html","","<p>Rake 0.8.2 Released\n<p>Rake version 0.8.2 is a new release of rake that includes a number of new features …\n"],["rake-0.8.3","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_3_rdoc.html","","<p>Rake 0.8.3 Released\n<p>Rake version 0.8.3 is a bug-fix release of rake.\n<p>Changes\n"],["rake-0.8.4","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_4_rdoc.html","","<p>Rake 0.8.4 Released\n<p>Rake version 0.8.4 is a bug-fix release of rake.\n<p>NOTE: The version of Rake that comes …\n"],["rake-0.8.5","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_5_rdoc.html","","<p>Rake 0.8.5 Released\n<p>Rake version 0.8.5 is a new release of Rake with greatly improved support for executing …\n"],["rake-0.8.6","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_6_rdoc.html","","<p>Rake 0.8.6 Released\n<p>Rake version 0.8.5 introduced greatly improved support for executing commands on  …\n"],["rake-0.8.7","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_8_7_rdoc.html","","<p>Rake 0.8.7 Released\n<p>Rake version 0.8.5 introduced greatly improved support for executing commands on  …\n"],["rake-0.9.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_0_rdoc.html","","<p>Rake 0.9.0 Released\n<p>Rake version 0.9.0 has a number of bug fixes and enhancments (see below for more details). …\n"],["rake-0.9.1","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_1_rdoc.html","","<p>Rake 0.9.1 Released\n<p>Rake version 0.9.1 has a number of bug fixes and enhancments (see below for more details). …\n"],["rake-0.9.2.2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_2_2_rdoc.html","","<p>Rake 0.9.2.2 Released\n<p>Rake version 0.9.2.2 is mainly bug fixes.\n<p>Changes\n"],["rake-0.9.2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_2_rdoc.html","","<p>Rake 0.9.2 Released\n<p>Rake version 0.9.2 has a few small fixes.  See below for details.\n<p>Changes\n"],["rake-0.9.3","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_3_rdoc.html","","<p>Rake 0.9.3 Released\n<p>Rake version 0.9.3 contains some new, backwards compatible features and a number of …\n"],["rake-0.9.4","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_4_rdoc.html","","<p>Rake 0.9.4 Released\n<p>Rake version 0.9.4 contains a number of bug fixes.\n<p>Changes\n"],["rake-0.9.5","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_5_rdoc.html","","<p>Rake 0.9.5 Released\n<p>Rake version 0.9.5 contains a number of bug fixes.\n<p>Changes\n"],["rake-0.9.6","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-0_9_6_rdoc.html","","<p>Rake 0.9.6 Released\n<p>Rake version 0.9.6 contains a number of fixes mainly for merging Rake into the Ruby …\n"],["rake-10.0.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-10_0_0_rdoc.html","","<p>Rake 10.0 Released\n\n<pre><code>&quot;Jim, when will Rake reach version 1.0?&quot;\n</code></pre>\n<p>Over the past several years I&#39;ve been asked …\n"],["rake-10.0.1","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-10_0_1_rdoc.html","","<p>Rake 10.0.1 Released\n<p>Changes in 10.0.1\n<p>Bug Fixes\n"],["rake-10.0.2","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-10_0_2_rdoc.html","","<p>Rake 10.0.2 Released\n<p>Changes in Rake 10.0.2\n<p>Bug Fixes\n"],["rake-10.0.3","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-10_0_3_rdoc.html","","<p>Rake 10.0.3 Released\n\n<pre><code>&quot;Jim, when will Rake reach version 1.0?&quot;\n</code></pre>\n<p>Over the past several years I&#39;ve been …\n"],["rake-10.1.0","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/doc/release_notes/rake-10_1_0_rdoc.html","","<p>Rake 10.1.0 Released\n<p>Changes in Version 10.1\n<p>New Features\n"],["publish.rake","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/rakelib/publish_rake.html","","<p># Optional publish task for Rake\n<p>begin\n\n<pre><code>require &#39;rake/contrib/sshpublisher&#39;\nrequire &#39;rake/contrib/rubyforgepublisher&#39; ...\n</code></pre>\n"],["test_times.rake","","files/vendor/bundle/ruby/2_6_0/gems/rake-10_5_0/rakelib/test_times_rake.html","","<p>module TestTimes\n\n<pre><code>def self.run(test_results, limit=0)\n  limit = limit.nonzero? || 10\n  tests = []\n  test_results.split(/\\n/).each ...\n</code></pre>\n"],["markdown.kpeg","","files/vendor/bundle/ruby/2_6_0/gems/rdoc-6_1_1/lib/rdoc/markdown_kpeg.html","","<p>%% name = RDoc::Markdown\n<p>%% header { # coding: UTF-8 # frozen_string_literal: true # :markup: markdown …\n"],["literals.kpeg","","files/vendor/bundle/ruby/2_6_0/gems/rdoc-6_1_1/lib/rdoc/markdown/literals_kpeg.html","","<p>%% name = RDoc::Markdown::Literals\n<p>%% header { # coding: UTF-8 # frozen_string_literal: true # :markup: …\n"],["block_parser.ry","","files/vendor/bundle/ruby/2_6_0/gems/rdoc-6_1_1/lib/rdoc/rd/block_parser_ry.html","","<p>class BlockParser\n\n<pre><code>preclow\n  nonassoc DUMMY\n  left     ITEMLISTLINE\n           ENUMLISTLINE\n           ...\n</code></pre>\n"],["inline_parser.ry","","files/vendor/bundle/ruby/2_6_0/gems/rdoc-6_1_1/lib/rdoc/rd/inline_parser_ry.html","","<p>class InlineParser\n\n<pre><code>preclow\n  nonassoc EX_LOW\n  left QUOTE\n       BAR\n       SLASH\n       BACK_SLASH\n  ...\n</code></pre>\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rspec-3_8_0/LICENSE_md.html","","<p>The MIT License (MIT)\n<p>Copyright © 2009 Chad Humphries, David Chelimsky<br>\nCopyright © 2006 David Chelimsky ...\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rspec-3_8_0/README_md.html","","<p>RSpec\n<p>Behaviour Driven Development for Ruby\n<p>Description\n"],["Changelog","","files/vendor/bundle/ruby/2_6_0/gems/rspec-core-3_8_0/Changelog_md.html","","<p>3.8.0 / 2018-08-04\n<p>Full Changelog\n<p>Enhancements:\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rspec-core-3_8_0/LICENSE_md.html","","<p>The MIT License (MIT)\n<p>Copyright © 2012 Chad Humphries, David Chelimsky, Myron Marston\n<p>Copyright © 2009 …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rspec-core-3_8_0/README_md.html","","<p>rspec-core <img src=\"https://secure.travis-ci.org/rspec/rspec-core.svg?branch=master\"> <img src=\"https://codeclimate.com/github/rspec/rspec-core.svg\"> …\n"],["Changelog","","files/vendor/bundle/ruby/2_6_0/gems/rspec-expectations-3_8_2/Changelog_md.html","","<p>3.8.2 / 2018-10-09\n<p>Full Changelog\n<p>Bug Fixes:\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rspec-expectations-3_8_2/LICENSE_md.html","","<p>The MIT License (MIT)\n<p>Copyright © 2012 David Chelimsky, Myron Marston\n<p>Copyright © 2006 David Chelimsky …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rspec-expectations-3_8_2/README_md.html","","<p>RSpec Expectations <img src=\"https://secure.travis-ci.org/rspec/rspec-expectations.svg?branch=master\"> …\n"],["Changelog","","files/vendor/bundle/ruby/2_6_0/gems/rspec-mocks-3_8_0/Changelog_md.html","","<p>3.8.0 / 2018-08-04\n<p>Full Changelog\n<p>Bug Fixes:\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rspec-mocks-3_8_0/LICENSE_md.html","","<p>The MIT License (MIT)\n<p>Copyright © 2012 David Chelimsky, Myron Marston\n<p>Copyright © 2006 David Chelimsky …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rspec-mocks-3_8_0/README_md.html","","<p>RSpec Mocks <img src=\"https://secure.travis-ci.org/rspec/rspec-mocks.svg?branch=master\"> <img src=\"https://codeclimate.com/github/rspec/rspec-mocks.svg\"> …\n"],["Changelog","","files/vendor/bundle/ruby/2_6_0/gems/rspec-support-3_8_0/Changelog_md.html","","<p>3.8.0 / 2018-08-04\n<p>Full Changelog\n<p>Bug Fixes:\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/rspec-support-3_8_0/LICENSE_md.html","","<p>The MIT License (MIT)\n<p>Copyright © 2013 David Chelimsky, Myron Marston, Jon Rowe, Sam Phippen, Xavier  …\n\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/rspec-support-3_8_0/README_md.html","","<p>RSpec::Support\n<p><code>RSpec::Support</code> provides common functionality to <code>RSpec::Core</code>,\n<code>RSpec::Expectations</code> and <code>RSpec::Mocks</code> ...\n"],["CHANGELOG","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/CHANGELOG_md.html","","<p>0.4.2\n<p>Compare v0.4.1…v0.4.2\n<p>0.4.1\n"],["Gemfile","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/Gemfile.html","","<p>source “rubygems.org”\n<p>gemspec\n<p>gem “rake”, “&lt; 11” gem “minitest” …\n"],["LICENSE","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/LICENSE.html","","<p>Copyright © 2014 Vladimir Kolesnikov, and Nathan Broadbent Copyright © 2014-2017 Zachary Scott\n<p>Permission …\n"],["README","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/README_md.html","","<p>SDoc\n<p><img src=\"https://travis-ci.org/zzak/sdoc.png?branch=master\">\n<p><strong>Powering api.rubyonrails.org/</strong>\n"],["Rakefile","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/Rakefile.html","","<p>require &#39;bundler&#39; Bundler::GemHelper.install_tasks\n<p>require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new …\n"],["index.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/merge/index_rhtml.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>&lt;meta charset=&quot;utf-8&quot;&gt;\n\n&lt;title&gt;&lt;%= ...\n</code></pre>\n"],["_context.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/_context_rhtml.html","","<p>&lt;div id=“content”&gt;\n\n<pre><code>&lt;% unless (description = context.description).empty? %&gt;\n  &lt;div class=&quot;description&quot;&gt; ...\n</code></pre>\n"],["_head.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/_head_rhtml.html","","<p>&lt;link rel=“stylesheet” href=“&lt;%= ”#{rel_prefix}/css/reset.css“ %&gt;” …\n"],["class.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/class_rhtml.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>  &lt;title&gt;&lt;%= h klass.full_name %&gt;&lt;/title&gt; ...\n</code></pre>\n"],["file.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/file_rhtml.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;&lt;%= h file.name %&gt;&lt;/title&gt; ...\n</code></pre>\n"],["index.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/index_rhtml.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>&lt;meta charset=&quot;&lt;%= @options.charset ...\n</code></pre>\n"],["github.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/css/github_css.html","","<p>github.com style © Vasily Polovnyov &lt;vast@whiteants.net&gt;\n<p>pre .comment, pre .template_comment, …\n"],["main.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/css/main_css.html","","<p>body {\n\n<pre><code>font-family: &quot;Helvetica Neue&quot;, Arial, sans-serif;\nbackground: #FFF;\ncolor: #3B3B3B;\nmargin: 0px; ...\n</code></pre>\n"],["panel.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/css/panel_css.html","","\n<pre><code>Panel (begin)   \n .panel\n {\n     position: absolute;\n     width: 100%;\n     height: 100%;\n     top: 0; ...\n</code></pre>\n"],["reset.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/css/reset_css.html","","\n<pre><code>http://meyerweb.com/eric/tools/css/reset/   \nv1.0 | 20080212\n</code></pre>\n<p>html, body, div, span, applet, object, iframe, …\n"],["highlight.pack.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/js/highlight_pack_js.html","","<p>var hljs=new function(){function l(o){return o.replace(/&amp;/gm,“&amp;amp;”).replace(/&lt;/gm,“&amp;lt;”)}function …\n"],["jquery-1.3.2.min.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/js/jquery-1_3_2_min_js.html","","\n<pre><code>jQuery JavaScript Library v1.3.2\nhttp://jquery.com/\n\nCopyright (c) 2009 John Resig\nDual licensed under ...\n</code></pre>\n"],["main.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/js/main_js.html","","<p>function toggleSource(id) {\n\n<pre><code>var src = $(&#39;#&#39; + id).toggle();\nvar isVisible = src.is(&#39;:visible&#39;);\n$(&#39;#l_&#39; ...\n</code></pre>\n"],["searchdoc.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/js/searchdoc_js.html","","<p>Searchdoc = {};\n<p>// navigation.js ——————————————\n<p>Searchdoc.Navigation = new …\n"],["index.html","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/resources/panel/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;search index&lt;/title&gt;\n&lt;link ...\n</code></pre>\n"],["search_index.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/rails/search_index_rhtml.html","","<p>&lt;html&gt;\n\n<pre><code>&lt;head&gt;File index&lt;/head&gt;\n&lt;body&gt;\n&lt;% @files.each do |file| %&gt;\n  &lt;a href=&quot;../&lt;%= file.path %&gt;&quot;&gt;&lt;%= ...\n</code></pre>\n"],["_context.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/_context_rhtml.html","","<p>&lt;div id=“content”&gt;\n\n<pre><code>&lt;% unless (description = context.description).empty? %&gt;\n  &lt;div class=&quot;description&quot;&gt; ...\n</code></pre>\n"],["_head.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/_head_rhtml.html","","<p>&lt;link rel=“stylesheet” href=“&lt;%= ”#{rel_prefix}/css/reset.css“ %&gt;” …\n"],["class.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/class_rhtml.html","","<p>&lt;?xml version=“1.0” encoding=“utf-8”?&gt; &lt;!DOCTYPE html PUBLIC “-//W3C//DTD …\n"],["file.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/file_rhtml.html","","<p>&lt;?xml version=“1.0” encoding=“utf-8”?&gt; &lt;!DOCTYPE html PUBLIC “-//W3C//DTD …\n"],["index.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/index_rhtml.html","","<p>&lt;!DOCTYPE html\n\n<pre><code>PUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;\n</code></pre>\n"],["github.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/css/github_css.html","","<p>github.com style © Vasily Polovnyov &lt;vast@whiteants.net&gt;\n<p>pre .comment, pre .template_comment, …\n"],["main.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/css/main_css.html","","<p>body {\n\n<pre><code>font-family: &quot;Helvetica Neue&quot;, Arial, sans-serif;\nbackground: #FFF;\ncolor: #000;\nmargin: 0px;\nfont-size: ...\n</code></pre>\n"],["panel.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/css/panel_css.html","","\n<pre><code>Panel (begin)   \n .panel\n {\n     position: absolute;\n     width: 100%;\n     height: 100%;\n     top: 0; ...\n</code></pre>\n"],["reset.css","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/css/reset_css.html","","\n<pre><code>http://meyerweb.com/eric/tools/css/reset/   \nv1.0 | 20080212\n</code></pre>\n<p>html, body, div, span, applet, object, iframe, …\n"],["highlight.pack.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/js/highlight_pack_js.html","","<p>var hljs=new function(){function l(o){return o.replace(/&amp;/gm,“&amp;amp;”).replace(/&lt;/gm,“&amp;lt;”)}function …\n"],["jquery-1.3.2.min.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/js/jquery-1_3_2_min_js.html","","\n<pre><code>jQuery JavaScript Library v1.3.2\nhttp://jquery.com/\n\nCopyright (c) 2009 John Resig\nDual licensed under ...\n</code></pre>\n"],["main.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/js/main_js.html","","<p>function toggleSource(id) {\n\n<pre><code>var src = $(&#39;#&#39; + id).toggle();\nvar isVisible = src.is(&#39;:visible&#39;);\n$(&#39;#l_&#39; ...\n</code></pre>\n"],["searchdoc.js","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/js/searchdoc_js.html","","<p>Searchdoc = {};\n<p>// navigation.js ——————————————\n<p>Searchdoc.Navigation = new …\n"],["index.html","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/resources/panel/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;search index&lt;/title&gt;\n&lt;link ...\n</code></pre>\n"],["search_index.rhtml","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/lib/rdoc/generator/template/sdoc/search_index_rhtml.html","","<p>&lt;html&gt;\n\n<pre><code>&lt;head&gt;File index&lt;/head&gt;\n&lt;body&gt;\n&lt;% @files.each do |file| %&gt;\n  &lt;a href=&quot;../&lt;%= file.path %&gt;&quot;&gt;&lt;%= ...\n</code></pre>\n"],["sdoc.gemspec","","files/vendor/bundle/ruby/2_6_0/gems/sdoc-1_0_0/sdoc_gemspec.html","","<p>$:.push File.expand_path(“../lib”, __FILE__) require &#39;sdoc/version&#39;\n<p>Gem::Specification.new …\n"],["diff-lcs-1.3.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/diff-lcs-1_3_gemspec.html","","<p># stub: diff-lcs 1.3 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;diff-lcs&quot;.freeze\ns.version = &quot;1.3&quot; ...\n</code></pre>\n"],["rake-10.5.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rake-10_5_0_gemspec.html","","<p># stub: rake 10.5.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rake&quot;.freeze\ns.version = &quot;10.5.0&quot; ...\n</code></pre>\n"],["rdoc-6.1.1.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rdoc-6_1_1_gemspec.html","","<p># stub: rdoc 6.1.1 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rdoc&quot;.freeze\ns.version = &quot;6.1.1&quot;\n\ns.required_rubygems_version ...\n</code></pre>\n"],["rspec-3.8.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rspec-3_8_0_gemspec.html","","<p># stub: rspec 3.8.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rspec&quot;.freeze\ns.version = &quot;3.8.0&quot; ...\n</code></pre>\n"],["rspec-core-3.8.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rspec-core-3_8_0_gemspec.html","","<p># stub: rspec-core 3.8.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rspec-core&quot;.freeze\ns.version ...\n</code></pre>\n"],["rspec-expectations-3.8.2.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rspec-expectations-3_8_2_gemspec.html","","<p># stub: rspec-expectations 3.8.2 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rspec-expectations&quot;.freeze ...\n</code></pre>\n"],["rspec-mocks-3.8.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rspec-mocks-3_8_0_gemspec.html","","<p># stub: rspec-mocks 3.8.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rspec-mocks&quot;.freeze\ns.version ...\n</code></pre>\n"],["rspec-support-3.8.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/rspec-support-3_8_0_gemspec.html","","<p># stub: rspec-support 3.8.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;rspec-support&quot;.freeze\ns.version ...\n</code></pre>\n"],["sdoc-1.0.0.gemspec","","files/vendor/bundle/ruby/2_6_0/specifications/sdoc-1_0_0_gemspec.html","","<p># stub: sdoc 1.0.0 ruby lib\n<p>Gem::Specification.new do |s|\n\n<pre><code>s.name = &quot;sdoc&quot;.freeze\ns.version = &quot;1.0.0&quot;\n\ns.required_rubygems_version ...\n</code></pre>\n"]]}}
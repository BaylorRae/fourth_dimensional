var search_data = {"index":{"searchIndex":["fourthdimensional","aggregateroot","error","event","eventable","classmethods","apply()","event_bindings()","events()","included()","new()","new()","on()","readme"],"longSearchIndex":["fourthdimensional","fourthdimensional::aggregateroot","fourthdimensional::error","fourthdimensional::event","fourthdimensional::eventable","fourthdimensional::eventable::classmethods","fourthdimensional::aggregateroot#apply()","fourthdimensional::eventable::classmethods#event_bindings()","fourthdimensional::eventable::classmethods#events()","fourthdimensional::eventable::included()","fourthdimensional::aggregateroot::new()","fourthdimensional::event::new()","fourthdimensional::eventable::classmethods#on()",""],"info":[["FourthDimensional","","classes/FourthDimensional.html","",""],["FourthDimensional::AggregateRoot","","classes/FourthDimensional/AggregateRoot.html","","<p>FourthDimensional::AggregateRoot\n<p>An aggregate root is an object whose entire state is built by applying …\n"],["FourthDimensional::Error","","classes/FourthDimensional/Error.html","",""],["FourthDimensional::Event","","classes/FourthDimensional/Event.html","","<p>FourthDimensional::Event\n<p>Events act as a log primarily focused around an aggregate. When persisted it …\n"],["FourthDimensional::Eventable","","classes/FourthDimensional/Eventable.html","","<p>Eventable\n<p>Provides an api for registering event bindings.\n\n<pre><code>class CantHandleTheTruth\n  include FourthDimensional::Eventable ...\n</code></pre>\n"],["FourthDimensional::Eventable::ClassMethods","","classes/FourthDimensional/Eventable/ClassMethods.html","",""],["apply","FourthDimensional::AggregateRoot","classes/FourthDimensional/AggregateRoot.html#method-i-apply","(event_class, **args)","<p>Applies an event to the aggregate when a callback is bound. **<code>args</code> are merged with the <code>id</code> of the aggregate. …\n"],["event_bindings","FourthDimensional::Eventable::ClassMethods","classes/FourthDimensional/Eventable/ClassMethods.html#method-i-event_bindings","()","<p>Returns a hash of event classes and the callback.\n\n<pre><code>Post.on(PostAdded, -&gt; (event) {})\nPost.on(PostDeleted, ...\n</code></pre>\n"],["events","FourthDimensional::Eventable::ClassMethods","classes/FourthDimensional/Eventable/ClassMethods.html#method-i-events","()","<p>Returns an array of class names for the bound events.\n\n<pre><code>Post.on(PostAdded, -&gt; (event) {})\nPost.on(PostDeleted, ...\n</code></pre>\n"],["included","FourthDimensional::Eventable","classes/FourthDimensional/Eventable.html#method-c-included","(klass)",""],["new","FourthDimensional::AggregateRoot","classes/FourthDimensional/AggregateRoot.html#method-c-new","(id:)","<p>Initializes an aggregate with an id\n"],["new","FourthDimensional::Event","classes/FourthDimensional/Event.html#method-c-new","(aggregate_id:, data: nil, metadata: nil)","<p>Initializes an event with the required <code>aggregate_id</code> and optional <code>data</code> and <code>metadata</code>.\n\n<pre><code>event = MyEvent.new(aggregate_id: ...\n</code></pre>\n"],["on","FourthDimensional::Eventable::ClassMethods","classes/FourthDimensional/Eventable/ClassMethods.html#method-i-on","(klass, &block)","<p>Binds an event to the aggregate. Raises a <code>KeyError</code> if the event has already been bound.\n\n<pre><code>Post.on(PostAdded, ...\n</code></pre>\n"],["README","","files/README_md.html","","<p>Fourth Dimensional\n<p>Fourth Dimensional is an event sourcing library to account for the state of a\nsystem ...\n"]]}}